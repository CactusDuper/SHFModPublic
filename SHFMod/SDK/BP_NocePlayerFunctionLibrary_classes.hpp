#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NocePlayerFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GameNoce_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NocePlayerFunctionLibrary.BP_NocePlayerFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBP_NocePlayerFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyBossFightMode(bool InEnabe, class UObject* __WorldContext);
	static void ApplyFullHealth(class UAbilitySystemComponent* ASC, double Level, class UObject* __WorldContext);
	static void ApplyFullSanity(class UAbilitySystemComponent* ASC, double Level, class ANocePlayerCharacter* PlayerCharacter, class UObject* __WorldContext);
	static void ApplyFullStamina(class UAbilitySystemComponent* ASC, double Level, class UObject* __WorldContext);
	static void ApplyHalfHealth(class UAbilitySystemComponent* ASC, double Level, class UObject* __WorldContext);
	static void ApplySmallHealth(class UAbilitySystemComponent* ASC, double Level, class UObject* __WorldContext);
	static void FastEquipWeapon(class FName WeaponName, class UObject* __WorldContext, bool* Success);
	static void FillSanityToCurrentMaxSanity(class UObject* __WorldContext);
	static void HandleChangeWeaponShiromuku2(class FName InWeaponName, class UObject* __WorldContext);
	static void HandlePlayerSpecialRevive(class UObject* __WorldContext);
	static void IsPlayerGameOver(class UObject* __WorldContext, bool* Value);
	static void OverwriteToHealthEasyRecover(class UAbilitySystemComponent* ASC, double Level, class UObject* __WorldContext);
	static void PlayControllerVibration(const struct FNoceControllerVibrationSetting& Setting, class UObject* __WorldContext);
	static void PlayControllerVibrationByData(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FNeoAudioPostEventParam& HapticEffect, class UObject* __WorldContext);
	static void PlayControllerVibrationByType(ENoceControllerVibrationType VibrationType, class UObject* __WorldContext);
	static void Player_Apply_Invincible(bool IsInvincible, class FName InToken, class UObject* __WorldContext);
	static void PlayerAddHealth(class UAbilitySystemComponent* ASC, double AddValue, class UObject* __WorldContext);
	static void PlayerAddSanity(class UAbilitySystemComponent* ASC, double AddValue, class UObject* __WorldContext);
	static void PlayerChangeChapterRecover(double RecoverLevel, class UObject* __WorldContext);
	static void PlayerCurrentWeaponGetMaxDurability(class ANocePlayerCharacter* PlayerCharacter, class UObject* __WorldContext);
	static void PlayerDisableRagdoll(bool Value, class UObject* __WorldContext);
	static void PlayerGenerateOverlapEvent(bool Enable, class UObject* __WorldContext);
	static void PlayerGetFullRecover(double RecoverLevel, bool FixCurrentWeapon, class UObject* __WorldContext);
	static void PlayerGetFullStamina(double RecoverLevel, class UObject* __WorldContext);
	static void PlayerGetGameOver(class UObject* __WorldContext);
	static void PlayerGetInvincibleState(class UObject* __WorldContext, bool* IsInvincible);
	static void PlayerReverseWalkToByCurrentCamera(double InDistance, const TDelegate<void()>& InEventOnReahTarget, class UObject* __WorldContext);
	static void PlayerSavePointRecover(double RecoverLevel, class UObject* __WorldContext);
	static void PlayerSetEventMode(bool InEvent, ENoceEventModeType EventModeType, ENoceCineEventUserType CineEventUserType, class UObject* __WorldContext);
	static void PlayerSetupDevChapterJumpSetting(class UObject* __WorldContext);
	static void PlayerWalkTo(double InDelayStartTime, bool InIsWalkToWithCameraRotation, const struct FRotator& InCameraRotation, const struct FVector& InWalkToLocation, double InCameraLerpTime, bool InLimitInput, const TDelegate<void()>& InEventOnReahTarget, class UObject* __WorldContext);
	static void SendEventLockDoorSystemHintVO(class UObject* __WorldContext);
	static void SendEventRummageSystemHintVO(bool InHaveSpawnedItem, class UObject* __WorldContext);
	static void SendEventSavePointSystemHintVO(bool InForbbiden, bool InClose, class UObject* __WorldContext);
	static void SendEventUnlockSystemHintVO(bool InSuccess, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_NocePlayerFunctionLibrary_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_NocePlayerFunctionLibrary_C")
	}
	static class UBP_NocePlayerFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NocePlayerFunctionLibrary_C>();
	}
};
DUMPER7_ASSERTS_UBP_NocePlayerFunctionLibrary_C;

}

