#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceTutorialInstructor_Sanity_GetHitCharging

#include "Basic.hpp"

#include "BP_NoceTutorialInstructor_Sanity_GetHitCharging_classes.hpp"
#include "BP_NoceTutorialInstructor_Sanity_GetHitCharging_parameters.hpp"


namespace SDK
{

// Function BP_NoceTutorialInstructor_Sanity_GetHitCharging.BP_NoceTutorialInstructor_Sanity_GetHitCharging_C.OnPossessPawnChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            OldPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            NewPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_Sanity_GetHitCharging_C::OnPossessPawnChanged(class APawn* OldPawn, class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Sanity_GetHitCharging_C", "OnPossessPawnChanged");

	Params::BP_NoceTutorialInstructor_Sanity_GetHitCharging_C_OnPossessPawnChanged Parms{};

	Parms.OldPawn = OldPawn;
	Parms.NewPawn = NewPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceTutorialInstructor_Sanity_GetHitCharging.BP_NoceTutorialInstructor_Sanity_GetHitCharging_C.IsStartCondition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NoceTutorialInstructor_Sanity_GetHitCharging_C::IsStartCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Sanity_GetHitCharging_C", "IsStartCondition");

	Params::BP_NoceTutorialInstructor_Sanity_GetHitCharging_C_IsStartCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NoceTutorialInstructor_Sanity_GetHitCharging.BP_NoceTutorialInstructor_Sanity_GetHitCharging_C.GetHitCharging
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InHealthDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InMaxSanityDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_Sanity_GetHitCharging_C::GetHitCharging(float InHealthDamage, float InMaxSanityDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Sanity_GetHitCharging_C", "GetHitCharging");

	Params::BP_NoceTutorialInstructor_Sanity_GetHitCharging_C_GetHitCharging Parms{};

	Parms.InHealthDamage = InHealthDamage;
	Parms.InMaxSanityDamage = InMaxSanityDamage;

	UObject::ProcessEvent(Func, &Parms);
}

}

