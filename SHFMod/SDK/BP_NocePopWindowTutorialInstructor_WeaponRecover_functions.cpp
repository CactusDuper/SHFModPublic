#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NocePopWindowTutorialInstructor_WeaponRecover

#include "Basic.hpp"

#include "BP_NocePopWindowTutorialInstructor_WeaponRecover_classes.hpp"
#include "BP_NocePopWindowTutorialInstructor_WeaponRecover_parameters.hpp"


namespace SDK
{

// Function BP_NocePopWindowTutorialInstructor_WeaponRecover.BP_NocePopWindowTutorialInstructor_WeaponRecover_C.OnAddConsumableItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePopWindowTutorialInstructor_WeaponRecover_C::OnAddConsumableItem(class FName ID, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePopWindowTutorialInstructor_WeaponRecover_C", "OnAddConsumableItem");

	Params::BP_NocePopWindowTutorialInstructor_WeaponRecover_C_OnAddConsumableItem Parms{};

	Parms.ID = ID;
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePopWindowTutorialInstructor_WeaponRecover.BP_NocePopWindowTutorialInstructor_WeaponRecover_C.IsStartCondition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NocePopWindowTutorialInstructor_WeaponRecover_C::IsStartCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePopWindowTutorialInstructor_WeaponRecover_C", "IsStartCondition");

	Params::BP_NocePopWindowTutorialInstructor_WeaponRecover_C_IsStartCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

