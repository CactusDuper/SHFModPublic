#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeoWindSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NeoWindSystem.NeoWindComponent.AddWindSppedCurveData
// 0x0010 (0x0010 - 0x0000)
struct NeoWindComponent_AddWindSppedCurveData final
{
public:
	class UCurveFloat*                            InCurveFloatData;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnique;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_NeoWindComponent_AddWindSppedCurveData;

// Function NeoWindSystem.NeoWindComponent.SetVirtualPositionDivide
// 0x0004 (0x0004 - 0x0000)
struct NeoWindComponent_SetVirtualPositionDivide final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_NeoWindComponent_SetVirtualPositionDivide;

// Function NeoWindSystem.NeoWindComponent.SetWindDirection
// 0x0028 (0x0028 - 0x0000)
struct NeoWindComponent_SetWindDirection final
{
public:
	struct FRotator                               InWindDir;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InWindDirChange_Min;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWindDirChange_Max;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWindDirSwitchTime;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_NeoWindComponent_SetWindDirection;

// Function NeoWindSystem.NeoWindComponent.SetWindSpeed
// 0x0008 (0x0008 - 0x0000)
struct NeoWindComponent_SetWindSpeed final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSwitchTime;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_NeoWindComponent_SetWindSpeed;

// Function NeoWindSystem.NeoWindPhysicsComponent.FindOverlapWindZoneVolume
// 0x0008 (0x0008 - 0x0000)
struct NeoWindPhysicsComponent_FindOverlapWindZoneVolume final
{
public:
	class ANeoWindZoneVolume*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_NeoWindPhysicsComponent_FindOverlapWindZoneVolume;

// Function NeoWindSystem.NeoWindZoneVolume.AddWindActor
// 0x0010 (0x0010 - 0x0000)
struct NeoWindZoneVolume_AddWindActor final
{
public:
	class AActor*                                 InWindActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_NeoWindZoneVolume_AddWindActor;

// Function NeoWindSystem.NeoWindZoneVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct NeoWindZoneVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_NeoWindZoneVolume_OnOverlapBegin;

// Function NeoWindSystem.NeoWindZoneVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct NeoWindZoneVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_NeoWindZoneVolume_OnOverlapEnd;

}

