#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_TriggerTentacle

#include "Basic.hpp"

#include "BPI_TriggerTentacle_classes.hpp"
#include "BPI_TriggerTentacle_parameters.hpp"


namespace SDK
{

// Function BPI_TriggerTentacle.BPI_TriggerTentacle_C.BPI_DisableBlockCamera
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_TriggerTentacle_C::BPI_DisableBlockCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TriggerTentacle_C", "BPI_DisableBlockCamera");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_TriggerTentacle.BPI_TriggerTentacle_C.BPI_GetTriggerTentacleLinkName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName*                            LinkName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TriggerTentacle_C::BPI_GetTriggerTentacleLinkName(class AActor* TargetActor, class FName* LinkName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TriggerTentacle_C", "BPI_GetTriggerTentacleLinkName");

	Params::BPI_TriggerTentacle_C_BPI_GetTriggerTentacleLinkName Parms{};

	Parms.TargetActor = TargetActor;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (LinkName != nullptr)
		*LinkName = Parms.LinkName;
}


// Function BPI_TriggerTentacle.BPI_TriggerTentacle_C.BPI_GetTriggerTentaclePosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TentacleLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        TentacleRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_TriggerTentacle_C::BPI_GetTriggerTentaclePosition(class AActor* TargetActor, struct FVector* TentacleLocation, struct FRotator* TentacleRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TriggerTentacle_C", "BPI_GetTriggerTentaclePosition");

	Params::BPI_TriggerTentacle_C_BPI_GetTriggerTentaclePosition Parms{};

	Parms.TargetActor = TargetActor;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (TentacleLocation != nullptr)
		*TentacleLocation = std::move(Parms.TentacleLocation);

	if (TentacleRotation != nullptr)
		*TentacleRotation = std::move(Parms.TentacleRotation);
}


// Function BPI_TriggerTentacle.BPI_TriggerTentacle_C.BPI_SetupLifeSpan
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TriggerTentacle_C::BPI_SetupLifeSpan(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TriggerTentacle_C", "BPI_SetupLifeSpan");

	Params::BPI_TriggerTentacle_C_BPI_SetupLifeSpan Parms{};

	Parms.Time = Time;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_TriggerTentacle.BPI_TriggerTentacle_C.BPI_SwitchOnTentacle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SwitchOn                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TriggerTentacle_C::BPI_SwitchOnTentacle(bool SwitchOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TriggerTentacle_C", "BPI_SwitchOnTentacle");

	Params::BPI_TriggerTentacle_C_BPI_SwitchOnTentacle Parms{};

	Parms.SwitchOn = SwitchOn;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_TriggerTentacle.BPI_TriggerTentacle_C.BPI_ToggleDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_TriggerTentacle_C::BPI_ToggleDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TriggerTentacle_C", "BPI_ToggleDebugInfo");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

