#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Stamp

#include "Basic.hpp"

#include "Stamp_classes.hpp"
#include "Stamp_parameters.hpp"


namespace SDK
{

// Function Stamp.StampMaskComponent.ChangeStampTexture
// (BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       inTexture2D                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStampMaskComponent::ChangeStampTexture(class UTexture2D* inTexture2D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StampMaskComponent", "ChangeStampTexture");

	Params::StampMaskComponent_ChangeStampTexture Parms{};

	Parms.inTexture2D = inTexture2D;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stamp.StampMaskComponent.Clear
// (BlueprintCosmetic, Native, Public, BlueprintCallable)

void UStampMaskComponent::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StampMaskComponent", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stamp.StampMaskComponent.Initialize
// (BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           inRefPoseMesh                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class USceneComponent*>&   inTargetMeshes                                         (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UStampMaskComponent::Initialize(class USkeletalMeshComponent* inRefPoseMesh, const TArray<class USceneComponent*>& inTargetMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StampMaskComponent", "Initialize");

	Params::StampMaskComponent_Initialize Parms{};

	Parms.inRefPoseMesh = inRefPoseMesh;
	Parms.inTargetMeshes = std::move(inTargetMeshes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stamp.StampMaskComponent.Reset
// (BlueprintCosmetic, Native, Public, BlueprintCallable)

void UStampMaskComponent::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StampMaskComponent", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stamp.StampMaskComponent.TakeHit
// (BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStampHitData&             inHitData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UStampMaskComponent::TakeHit(const struct FStampHitData& inHitData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StampMaskComponent", "TakeHit");

	Params::StampMaskComponent_TakeHit Parms{};

	Parms.inHitData = std::move(inHitData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stamp.StampMaskComponent.RegisterSceneCaptureShowflag
// (BlueprintCosmetic, Native, Public, BlueprintCallable, Const)

void UStampMaskComponent::RegisterSceneCaptureShowflag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StampMaskComponent", "RegisterSceneCaptureShowflag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

