#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NarrowMoveIndicator

#include "Basic.hpp"

#include "BP_NarrowMoveIndicator_classes.hpp"
#include "BP_NarrowMoveIndicator_parameters.hpp"


namespace SDK
{

// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.UpdateActiveTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NarrowMoveIndicator_C::UpdateActiveTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "UpdateActiveTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NarrowMoveIndicator_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.OnEndOverlap_LookAtTrigger2
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NarrowMoveIndicator_C::OnEndOverlap_LookAtTrigger2(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "OnEndOverlap_LookAtTrigger2");

	Params::BP_NarrowMoveIndicator_C_OnEndOverlap_LookAtTrigger2 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.OnEndOverlap_LookAtTrigger1
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NarrowMoveIndicator_C::OnEndOverlap_LookAtTrigger1(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "OnEndOverlap_LookAtTrigger1");

	Params::BP_NarrowMoveIndicator_C_OnEndOverlap_LookAtTrigger1 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.OnBeginOverlap_LookAtTrigger2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_NarrowMoveIndicator_C::OnBeginOverlap_LookAtTrigger2(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "OnBeginOverlap_LookAtTrigger2");

	Params::BP_NarrowMoveIndicator_C_OnBeginOverlap_LookAtTrigger2 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.OnBeginOverlap_LookAtTrigger1
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_NarrowMoveIndicator_C::OnBeginOverlap_LookAtTrigger1(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "OnBeginOverlap_LookAtTrigger1");

	Params::BP_NarrowMoveIndicator_C_OnBeginOverlap_LookAtTrigger1 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.IsForwardDirectionRight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NarrowMoveIndicator_C::IsForwardDirectionRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "IsForwardDirectionRight");

	Params::BP_NarrowMoveIndicator_C_IsForwardDirectionRight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.IsAtSplineStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NarrowMoveIndicator_C::IsAtSplineStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "IsAtSplineStart");

	Params::BP_NarrowMoveIndicator_C_IsAtSplineStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.IsAtSplineEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NarrowMoveIndicator_C::IsAtSplineEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "IsAtSplineEnd");

	Params::BP_NarrowMoveIndicator_C_IsAtSplineEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.HandleBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NarrowMoveIndicator_C::HandleBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "HandleBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.GetSplineStartInputKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  ReturnInputKey                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NarrowMoveIndicator_C::GetSplineStartInputKey(int32* ReturnInputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "GetSplineStartInputKey");

	Params::BP_NarrowMoveIndicator_C_GetSplineStartInputKey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnInputKey != nullptr)
		*ReturnInputKey = Parms.ReturnInputKey;
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.GetSplineStartInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NarrowMoveIndicator_C::GetSplineStartInfo(struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "GetSplineStartInfo");

	Params::BP_NarrowMoveIndicator_C_GetSplineStartInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.GetSplineEndInputKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  ReturnInputKey                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NarrowMoveIndicator_C::GetSplineEndInputKey(int32* ReturnInputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "GetSplineEndInputKey");

	Params::BP_NarrowMoveIndicator_C_GetSplineEndInputKey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnInputKey != nullptr)
		*ReturnInputKey = Parms.ReturnInputKey;
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.GetMotionWarpMaker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent**                 Maker_Start                                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 Maker_Out                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NarrowMoveIndicator_C::GetMotionWarpMaker(class USceneComponent** Maker_Start, class USceneComponent** Maker_Out, struct FRotator* CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "GetMotionWarpMaker");

	Params::BP_NarrowMoveIndicator_C_GetMotionWarpMaker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Maker_Start != nullptr)
		*Maker_Start = Parms.Maker_Start;

	if (Maker_Out != nullptr)
		*Maker_Out = Parms.Maker_Out;

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.GetLocationAndRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InTangent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForMotionWarp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NarrowMoveIndicator_C::GetLocationAndRotation(const struct FVector& InLocation, const struct FVector& InTangent, bool ForMotionWarp, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "GetLocationAndRotation");

	Params::BP_NarrowMoveIndicator_C_GetLocationAndRotation Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InTangent = std::move(InTangent);
	Parms.ForMotionWarp = ForMotionWarp;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.ExecuteUbergraph_BP_NarrowMoveIndicator
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NarrowMoveIndicator_C::ExecuteUbergraph_BP_NarrowMoveIndicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "ExecuteUbergraph_BP_NarrowMoveIndicator");

	Params::BP_NarrowMoveIndicator_C_ExecuteUbergraph_BP_NarrowMoveIndicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.CanInteractWithPawnBP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractorPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NarrowMoveIndicator_C::CanInteractWithPawnBP(class AActor* InteractorPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "CanInteractWithPawnBP");

	Params::BP_NarrowMoveIndicator_C_CanInteractWithPawnBP Parms{};

	Parms.InteractorPawn = InteractorPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NarrowMoveIndicator.BP_NarrowMoveIndicator_C.AdjustTriggerPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NarrowMoveIndicator_C::AdjustTriggerPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NarrowMoveIndicator_C", "AdjustTriggerPosition");

	UObject::ProcessEvent(Func, nullptr);
}

}

