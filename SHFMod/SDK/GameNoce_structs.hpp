#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameNoce

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "NeoAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum GameNoce.ENoceEndingType
// NumValues: 0x0006
enum class ENoceEndingType : uint8
{
	TypeA_Massacre                           = 0,
	TypeB_Marriage                           = 1,
	TypeC_Escape                             = 2,
	TypeD_TroubledYouth                      = 3,
	TypeE_UFO                                = 4,
	ENoceEndingType_MAX                      = 5,
};

// Enum GameNoce.ENoceInteractType
// NumValues: 0x0015
enum class ENoceInteractType : uint8
{
	None                                     = 0,
	Valut                                    = 1,
	ClimbWall_Up                             = 2,
	ClimbWall_Down                           = 3,
	ClimbLowWall_Up                          = 4,
	ClimbLowWall_Down                        = 5,
	NarrowMoveShort_FaceR                    = 6,
	NarrowMoveShort_FaceL                    = 7,
	NarrowMove_FaceR                         = 8,
	NarrowMove_FaceL                         = 9,
	Ladder                                   = 10,
	CrawlMoveShort                           = 11,
	OpenShoji                                = 12,
	RingBell                                 = 13,
	PushPlank                                = 14,
	PullUpWellBucket                         = 15,
	SpinTheWheel                             = 16,
	Telephone                                = 17,
	KatanaAlter                              = 18,
	BadgeOffer                               = 19,
	ENoceInteractType_MAX                    = 20,
};

// Enum GameNoce.ENoceAutoHintSize
// NumValues: 0x0004
enum class ENoceAutoHintSize : uint8
{
	Custom                                   = 0,
	Small                                    = 1,
	Large                                    = 2,
	ENoceAutoHintSize_MAX                    = 3,
};

// Enum GameNoce.ENoceMapIconType
// NumValues: 0x0009
enum class ENoceMapIconType : uint8
{
	Invalid                                  = 0,
	Player                                   = 1,
	SavePoint                                = 2,
	Bell                                     = 3,
	PuzzleLock                               = 4,
	LockedDoor                               = 5,
	LockedKeyDoor                            = 6,
	UnlockedKeyDoor                          = 7,
	ENoceMapIconType_MAX                     = 8,
};

// Enum GameNoce.ENoceDynamicMapIconType
// NumValues: 0x00FD
enum class ENoceDynamicMapIconType : uint8
{
	Invalid                                  = 0,
	Icon_01_001                              = 1,
	Icon_01_002                              = 2,
	Icon_01_003                              = 3,
	Icon_01_004                              = 4,
	Icon_01_005                              = 5,
	Icon_01_006                              = 6,
	Icon_01_007                              = 7,
	Icon_01_008                              = 8,
	Icon_01_009                              = 9,
	Icon_01_010                              = 10,
	Icon_01_011                              = 11,
	Icon_01_012                              = 12,
	Icon_01_013                              = 13,
	Icon_01_014                              = 14,
	Icon_01_015                              = 15,
	Icon_01_016                              = 16,
	Icon_01_017                              = 17,
	Icon_01_018                              = 18,
	Icon_01_019                              = 19,
	Icon_01_020                              = 20,
	Icon_01_021                              = 21,
	Icon_01_022                              = 22,
	Icon_01_023                              = 23,
	Icon_01_024                              = 24,
	Icon_01_025                              = 25,
	Icon_01_026                              = 26,
	Icon_01_027                              = 27,
	Icon_01_028                              = 28,
	Icon_01_029                              = 29,
	Icon_01_030                              = 30,
	Icon_01_031                              = 31,
	Icon_01_032                              = 32,
	Icon_01_033                              = 33,
	Icon_01_034                              = 34,
	Icon_01_035                              = 35,
	Icon_01_036                              = 36,
	Icon_01_037                              = 37,
	Icon_01_038                              = 38,
	Icon_01_039                              = 39,
	Icon_01_040                              = 40,
	Icon_01_041                              = 41,
	Icon_01_042                              = 42,
	Icon_01_043                              = 43,
	Icon_01_044                              = 44,
	Icon_01_045                              = 45,
	Icon_01_046                              = 46,
	Icon_01_047                              = 47,
	Icon_01_048                              = 48,
	Icon_01_049                              = 49,
	Icon_01_050                              = 50,
	Icon_02_001                              = 51,
	Icon_02_002                              = 52,
	Icon_02_003                              = 53,
	Icon_02_004                              = 54,
	Icon_02_005                              = 55,
	Icon_02_006                              = 56,
	Icon_02_007                              = 57,
	Icon_02_008                              = 58,
	Icon_02_009                              = 59,
	Icon_02_010                              = 60,
	Icon_02_011                              = 61,
	Icon_02_012                              = 62,
	Icon_02_013                              = 63,
	Icon_02_014                              = 64,
	Icon_02_015                              = 65,
	Icon_02_016                              = 66,
	Icon_02_017                              = 67,
	Icon_02_018                              = 68,
	Icon_02_019                              = 69,
	Icon_02_020                              = 70,
	Icon_02_021                              = 71,
	Icon_02_022                              = 72,
	Icon_02_023                              = 73,
	Icon_02_024                              = 74,
	Icon_02_025                              = 75,
	Icon_02_026                              = 76,
	Icon_02_027                              = 77,
	Icon_02_028                              = 78,
	Icon_02_029                              = 79,
	Icon_02_030                              = 80,
	Icon_02_031                              = 81,
	Icon_02_032                              = 82,
	Icon_02_033                              = 83,
	Icon_02_034                              = 84,
	Icon_02_035                              = 85,
	Icon_02_036                              = 86,
	Icon_02_037                              = 87,
	Icon_02_038                              = 88,
	Icon_02_039                              = 89,
	Icon_02_040                              = 90,
	Icon_03_001                              = 91,
	Icon_03_002                              = 92,
	Icon_03_003                              = 93,
	Icon_03_004                              = 94,
	Icon_03_005                              = 95,
	Icon_03_006                              = 96,
	Icon_03_007                              = 97,
	Icon_03_008                              = 98,
	Icon_03_009                              = 99,
	Icon_03_010                              = 100,
	Icon_03_011                              = 101,
	Icon_03_012                              = 102,
	Icon_03_013                              = 103,
	Icon_03_014                              = 104,
	Icon_03_015                              = 105,
	Icon_03_016                              = 106,
	Icon_03_017                              = 107,
	Icon_03_018                              = 108,
	Icon_03_019                              = 109,
	Icon_03_020                              = 110,
	Icon_03_021                              = 111,
	Icon_03_022                              = 112,
	Icon_03_023                              = 113,
	Icon_03_024                              = 114,
	Icon_03_025                              = 115,
	Icon_03_026                              = 116,
	Icon_03_027                              = 117,
	Icon_03_028                              = 118,
	Icon_03_029                              = 119,
	Icon_03_030                              = 120,
	Icon_03_031                              = 121,
	Icon_03_032                              = 122,
	Icon_03_033                              = 123,
	Icon_03_034                              = 124,
	Icon_03_035                              = 125,
	Icon_03_036                              = 126,
	Icon_03_037                              = 127,
	Icon_03_038                              = 128,
	Icon_03_039                              = 129,
	Icon_03_040                              = 130,
	Icon_04_001                              = 131,
	Icon_04_002                              = 132,
	Icon_04_003                              = 133,
	Icon_04_004                              = 134,
	Icon_04_005                              = 135,
	Icon_04_006                              = 136,
	Icon_04_007                              = 137,
	Icon_04_008                              = 138,
	Icon_04_009                              = 139,
	Icon_04_010                              = 140,
	Icon_04_011                              = 141,
	Icon_04_012                              = 142,
	Icon_04_013                              = 143,
	Icon_04_014                              = 144,
	Icon_04_015                              = 145,
	Icon_04_016                              = 146,
	Icon_04_017                              = 147,
	Icon_04_018                              = 148,
	Icon_04_019                              = 149,
	Icon_04_020                              = 150,
	Icon_04_021                              = 151,
	Icon_04_022                              = 152,
	Icon_04_023                              = 153,
	Icon_04_024                              = 154,
	Icon_04_025                              = 155,
	Icon_04_026                              = 156,
	Icon_04_027                              = 157,
	Icon_04_028                              = 158,
	Icon_04_029                              = 159,
	Icon_04_030                              = 160,
	Icon_04_031                              = 161,
	Icon_04_032                              = 162,
	Icon_04_033                              = 163,
	Icon_04_034                              = 164,
	Icon_04_035                              = 165,
	Icon_04_036                              = 166,
	Icon_04_037                              = 167,
	Icon_04_038                              = 168,
	Icon_04_039                              = 169,
	Icon_04_040                              = 170,
	Icon_04_041                              = 171,
	Icon_04_042                              = 172,
	Icon_04_043                              = 173,
	Icon_04_044                              = 174,
	Icon_04_045                              = 175,
	Icon_04_046                              = 176,
	Icon_04_047                              = 177,
	Icon_04_048                              = 178,
	Icon_04_049                              = 179,
	Icon_04_050                              = 180,
	Icon_04_051                              = 181,
	Icon_04_052                              = 182,
	Icon_04_053                              = 183,
	Icon_04_054                              = 184,
	Icon_04_055                              = 185,
	Icon_05_001                              = 186,
	Icon_05_002                              = 187,
	Icon_05_003                              = 188,
	Icon_05_004                              = 189,
	Icon_05_005                              = 190,
	Icon_06_001                              = 191,
	Icon_06_002                              = 192,
	Icon_06_003                              = 193,
	Icon_06_004                              = 194,
	Icon_06_005                              = 195,
	Icon_07_001                              = 196,
	Icon_07_002                              = 197,
	Icon_07_003                              = 198,
	Icon_07_004                              = 199,
	Icon_07_005                              = 200,
	Icon_08_001                              = 201,
	Icon_08_002                              = 202,
	Icon_08_003                              = 203,
	Icon_08_004                              = 204,
	Icon_08_005                              = 205,
	Icon_09_001                              = 206,
	Icon_09_002                              = 207,
	Icon_09_003                              = 208,
	Icon_09_004                              = 209,
	Icon_09_005                              = 210,
	Icon_10_001                              = 211,
	Icon_10_002                              = 212,
	Icon_10_003                              = 213,
	Icon_10_004                              = 214,
	Icon_10_005                              = 215,
	Icon_10_006                              = 216,
	Icon_10_007                              = 217,
	Icon_10_008                              = 218,
	Icon_10_009                              = 219,
	Icon_10_010                              = 220,
	Icon_10_011                              = 221,
	Icon_10_012                              = 222,
	Icon_10_013                              = 223,
	Icon_10_014                              = 224,
	Icon_10_015                              = 225,
	Icon_10_016                              = 226,
	Icon_10_017                              = 227,
	Icon_10_018                              = 228,
	Icon_10_019                              = 229,
	Icon_10_020                              = 230,
	Icon_10_021                              = 231,
	Icon_10_022                              = 232,
	Icon_10_023                              = 233,
	Icon_10_024                              = 234,
	Icon_10_025                              = 235,
	Icon_15_001                              = 236,
	Icon_15_002                              = 237,
	Icon_15_003                              = 238,
	Icon_15_004                              = 239,
	Icon_15_005                              = 240,
	Icon_15_006                              = 241,
	Icon_15_007                              = 242,
	Icon_15_008                              = 243,
	Icon_15_009                              = 244,
	Icon_15_010                              = 245,
	Icon_15_011                              = 246,
	Icon_15_012                              = 247,
	Icon_15_013                              = 248,
	Icon_15_014                              = 249,
	Icon_15_015                              = 250,
	Count                                    = 251,
	ENoceDynamicMapIconType_MAX              = 252,
};

// Enum GameNoce.ENoceDynamicMapIconIndexType
// NumValues: 0x003F
enum class ENoceDynamicMapIconIndexType : uint8
{
	Invalid                                  = 0,
	Icon_001                                 = 1,
	Icon_002                                 = 2,
	Icon_003                                 = 3,
	Icon_004                                 = 4,
	Icon_005                                 = 5,
	Icon_006                                 = 6,
	Icon_007                                 = 7,
	Icon_008                                 = 8,
	Icon_009                                 = 9,
	Icon_010                                 = 10,
	Icon_011                                 = 11,
	Icon_012                                 = 12,
	Icon_013                                 = 13,
	Icon_014                                 = 14,
	Icon_015                                 = 15,
	Icon_016                                 = 16,
	Icon_017                                 = 17,
	Icon_018                                 = 18,
	Icon_019                                 = 19,
	Icon_020                                 = 20,
	Icon_021                                 = 21,
	Icon_022                                 = 22,
	Icon_023                                 = 23,
	Icon_024                                 = 24,
	Icon_025                                 = 25,
	Icon_026                                 = 26,
	Icon_027                                 = 27,
	Icon_028                                 = 28,
	Icon_029                                 = 29,
	Icon_030                                 = 30,
	Icon_031                                 = 31,
	Icon_032                                 = 32,
	Icon_033                                 = 33,
	Icon_034                                 = 34,
	Icon_035                                 = 35,
	Icon_036                                 = 36,
	Icon_037                                 = 37,
	Icon_038                                 = 38,
	Icon_039                                 = 39,
	Icon_040                                 = 40,
	Icon_041                                 = 41,
	Icon_042                                 = 42,
	Icon_043                                 = 43,
	Icon_044                                 = 44,
	Icon_045                                 = 45,
	Icon_046                                 = 46,
	Icon_047                                 = 47,
	Icon_048                                 = 48,
	Icon_049                                 = 49,
	Icon_050                                 = 50,
	Icon_051                                 = 51,
	Icon_052                                 = 52,
	Icon_053                                 = 53,
	Icon_054                                 = 54,
	Icon_055                                 = 55,
	Icon_056                                 = 56,
	Icon_057                                 = 57,
	Icon_058                                 = 58,
	Icon_059                                 = 59,
	Icon_060                                 = 60,
	Count                                    = 61,
	ENoceDynamicMapIconIndexType_MAX         = 62,
};

// Enum GameNoce.ENoceDynamicMapIconChapterType
// NumValues: 0x001C
enum class ENoceDynamicMapIconChapterType : uint8
{
	Invalid                                  = 0,
	Chapter01                                = 1,
	Chapter02                                = 2,
	Chapter03                                = 3,
	Chapter04                                = 4,
	Chapter05                                = 5,
	School                                   = 6,
	Chapter06                                = 7,
	Chapter07                                = 8,
	Chapter08_01                             = 9,
	Chapter08_02                             = 10,
	Chapter09                                = 11,
	Chapter10_01                             = 12,
	Chapter10_02                             = 13,
	Chapter10_03                             = 14,
	Chapter11                                = 15,
	Chapter12                                = 16,
	Chapter13                                = 17,
	Chapter14                                = 18,
	Chapter15                                = 19,
	Chapter16A                               = 20,
	Chapter16B                               = 21,
	Chapter16C                               = 22,
	Chapter16D                               = 23,
	Round2                                   = 24,
	MultiRoundsKeep                          = 25,
	Count                                    = 26,
	ENoceDynamicMapIconChapterType_MAX       = 27,
};

// Enum GameNoce.ENoceMapLocation
// NumValues: 0x00B9
enum class ENoceMapLocation : uint8
{
	HLS_01                                   = 0,
	OLD_01                                   = 1,
	OLD_02                                   = 2,
	ALW_01                                   = 3,
	ALW_02                                   = 4,
	ALW_03                                   = 5,
	ALW_04                                   = 6,
	OLD_03                                   = 7,
	TOR_01                                   = 8,
	TOR_02                                   = 9,
	TOR_03                                   = 10,
	TOR_04                                   = 11,
	TOR_05                                   = 12,
	TOR_06                                   = 13,
	TOR_07                                   = 14,
	TOR_08                                   = 15,
	TOR_09                                   = 16,
	TOR_10                                   = 17,
	TOR_11                                   = 18,
	TOR_12                                   = 19,
	TOR_13                                   = 20,
	TOR_14                                   = 21,
	TOR_15                                   = 22,
	TOR_16                                   = 23,
	TOR_17                                   = 24,
	TOR_18                                   = 25,
	TOR_19                                   = 26,
	TOR_20                                   = 27,
	OSF_01                                   = 28,
	OSF_02                                   = 29,
	OSF_03                                   = 30,
	OSF_04                                   = 31,
	OSF_05                                   = 32,
	OSF_06                                   = 33,
	OSF_07                                   = 34,
	OSF_08                                   = 35,
	OSF_09                                   = 36,
	OSF_10                                   = 37,
	OCR_01                                   = 38,
	OCR_02                                   = 39,
	OCR_03                                   = 40,
	OCR_04                                   = 41,
	OCR_05                                   = 42,
	OCR_06                                   = 43,
	OCR_07                                   = 44,
	OCR_08                                   = 45,
	OCR_09                                   = 46,
	OCR_10                                   = 47,
	ALW_11                                   = 48,
	ALW_12                                   = 49,
	ALW_13                                   = 50,
	SCL_01                                   = 51,
	SCL_02                                   = 52,
	SCL_03                                   = 53,
	SCL_04                                   = 54,
	SCL_05                                   = 55,
	SCL_06                                   = 56,
	SCL_07                                   = 57,
	WHL_01                                   = 58,
	WHL_02                                   = 59,
	WHL_03                                   = 60,
	WHL_04                                   = 61,
	WHL_05                                   = 62,
	WHL_06                                   = 63,
	WHL_07                                   = 64,
	WHL_08                                   = 65,
	WHL_09                                   = 66,
	WHL_10                                   = 67,
	WHL_11                                   = 68,
	WHL_12                                   = 69,
	WHL_13                                   = 70,
	WHL_14                                   = 71,
	WHL_15                                   = 72,
	WHL_16                                   = 73,
	WHL_17                                   = 74,
	WHL_18                                   = 75,
	WHL_19                                   = 76,
	WHL_20                                   = 77,
	MTN_01                                   = 78,
	MTN_02                                   = 79,
	MTN_03                                   = 80,
	MTN_04                                   = 81,
	MTN_05                                   = 82,
	MTN_06                                   = 83,
	MTN_07                                   = 84,
	MTN_08                                   = 85,
	MTN_09                                   = 86,
	MTN_10                                   = 87,
	UGD_01                                   = 88,
	UGD_02                                   = 89,
	UGD_03                                   = 90,
	UGD_04                                   = 91,
	UGD_05                                   = 92,
	UGD_06                                   = 93,
	UGD_07                                   = 94,
	UGD_08                                   = 95,
	UGD_09                                   = 96,
	UGD_10                                   = 97,
	UGD_11                                   = 98,
	UGD_12                                   = 99,
	UGD_13                                   = 100,
	UGD_14                                   = 101,
	UGD_15                                   = 102,
	UGD_16                                   = 103,
	UGD_17                                   = 104,
	UGD_18                                   = 105,
	UGD_19                                   = 106,
	UGD_20                                   = 107,
	UGD_21                                   = 108,
	UGD_22                                   = 109,
	UGD_23                                   = 110,
	UGD_24                                   = 111,
	UGD_25                                   = 112,
	UGD_26                                   = 113,
	UGD_27                                   = 114,
	UGD_28                                   = 115,
	UGD_29                                   = 116,
	UGD_30                                   = 117,
	UGD_31                                   = 118,
	UGD_32                                   = 119,
	UGD_33                                   = 120,
	UGD_34                                   = 121,
	UGD_35                                   = 122,
	OLD_21                                   = 123,
	SMZ_01_01                                = 124,
	SMZ_01_02                                = 125,
	SMZ_01_03                                = 126,
	SMZ_01_04                                = 127,
	SMZ_01_05                                = 128,
	SMZ_01_06                                = 129,
	SMZ_01_07                                = 130,
	SMZ_01_08                                = 131,
	SMZ_01_09                                = 132,
	SMZ_01_10                                = 133,
	SMZ_01_11                                = 134,
	SMZ_01_12                                = 135,
	SMZ_01_13                                = 136,
	SMZ_01_14                                = 137,
	SMZ_01_15                                = 138,
	SMZ_01_16                                = 139,
	SMZ_02_01                                = 140,
	SMZ_02_02                                = 141,
	SMZ_02_03                                = 142,
	SMZ_02_04                                = 143,
	SMZ_02_05                                = 144,
	SMZ_02_06                                = 145,
	SMZ_02_07                                = 146,
	SMZ_02_08                                = 147,
	SMZ_02_09                                = 148,
	SMZ_02_10                                = 149,
	SMZ_02_11                                = 150,
	SMZ_02_12                                = 151,
	SMZ_02_13                                = 152,
	SMZ_02_14                                = 153,
	SMZ_03_01                                = 154,
	SMZ_03_02                                = 155,
	SMZ_03_03                                = 156,
	SMZ_03_04                                = 157,
	SMZ_03_05                                = 158,
	SMZ_03_06                                = 159,
	SMZ_03_07                                = 160,
	SMZ_03_08                                = 161,
	SMZ_03_09                                = 162,
	SMZ_03_10                                = 163,
	SMZ_03_11                                = 164,
	SMZ_03_12                                = 165,
	SMZ_03_13                                = 166,
	SMZ_03_14                                = 167,
	SMZ_03_15                                = 168,
	SMZ_03_16                                = 169,
	SMZ_03_17                                = 170,
	SMZ_03_18                                = 171,
	TOR_Ch15_01                              = 172,
	TOR_Ch15_02                              = 173,
	TOR_Ch15_03                              = 174,
	TOR_Ch15_04                              = 175,
	TOR_Ch15_05                              = 176,
	OCR_Ch15_01                              = 177,
	OCR_Ch15_02                              = 178,
	OCR_Ch15_03                              = 179,
	OCR_Ch15_04                              = 180,
	OCR_Ch15_05                              = 181,
	WED_Ch15_01                              = 182,
	Count                                    = 183,
	ENoceMapLocation_MAX                     = 184,
};

// Enum GameNoce.ENoceUpgradeType
// NumValues: 0x0005
enum class ENoceUpgradeType : uint8
{
	Health                                   = 0,
	Sanity                                   = 1,
	Stamina                                  = 2,
	Omamori                                  = 3,
	ENoceUpgradeType_MAX                     = 4,
};

// Enum GameNoce.ENoceClawAlterType
// NumValues: 0x0006
enum class ENoceClawAlterType : uint8
{
	Hand                                     = 0,
	BackMark                                 = 1,
	Mask                                     = 2,
	Hand_Round2                              = 3,
	BackMark_Round3                          = 4,
	ENoceClawAlterType_MAX                   = 5,
};

// Enum GameNoce.ENoceActionLevel
// NumValues: 0x0005
enum class ENoceActionLevel : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	Nightmare                                = 3,
	ENoceActionLevel_MAX                     = 4,
};

// Enum GameNoce.ENocePlayerType
// NumValues: 0x0004
enum class ENocePlayerType : uint8
{
	Invalid                                  = 0,
	FogHina                                  = 1,
	DarkHina                                 = 2,
	ENocePlayerType_MAX                      = 3,
};

// Enum GameNoce.ENoceMapArea
// NumValues: 0x0014
enum class ENoceMapArea : uint8
{
	Invalid                                  = 0,
	FogTown                                  = 1,
	School_1F                                = 2,
	School_2F                                = 3,
	ShimizuHouse_01                          = 4,
	ShimizuHouse_02                          = 5,
	ShimizuHouse_03                          = 6,
	ShimizuHouse_04                          = 7,
	Darkshrine_CH02                          = 8,
	Darkshrine_CH04                          = 9,
	Darkshrine_CH06                          = 10,
	Darkshrine_CH08_B1                       = 11,
	Darkshrine_CH08_B2                       = 12,
	Darkshrine_CH08_PotionRoom               = 13,
	Darkshrine_CH11                          = 14,
	Darkshrine_CH15_01                       = 15,
	Darkshrine_CH15_02                       = 16,
	Darkshrine_CH15_03                       = 17,
	Count                                    = 18,
	ENoceMapArea_MAX                         = 19,
};

// Enum GameNoce.ENoceMapStatus
// NumValues: 0x0005
enum class ENoceMapStatus : uint8
{
	Hidden                                   = 0,
	Appear                                   = 1,
	Visible                                  = 2,
	Disappear                                = 3,
	ENoceMapStatus_MAX                       = 4,
};

// Enum GameNoce.ENocePlayerRestriction
// NumValues: 0x0007
enum class ENocePlayerRestriction : uint8
{
	None                                     = 0,
	ManualSave                               = 1,
	BareHandDodge                            = 2,
	UseFocus                                 = 4,
	UseShortcutItem                          = 8,
	ChangeWeapon                             = 16,
	ENocePlayerRestriction_MAX               = 17,
};

// Enum GameNoce.ENoceStoryEndingBranch
// NumValues: 0x0007
enum class ENoceStoryEndingBranch : uint8
{
	None                                     = 0,
	UsedRedCapsule                           = 1,
	EverHadHairOrnament                      = 2,
	EverOfferHairOrnament                    = 4,
	EverHadSacredSword                       = 8,
	EverExorciseSacredSword                  = 16,
	ENoceStoryEndingBranch_MAX               = 17,
};

// Enum GameNoce.ENoceInventoryType
// NumValues: 0x0008
enum class ENoceInventoryType : uint8
{
	Invalid                                  = 0,
	Weapon                                   = 1,
	Omamori                                  = 2,
	Consumable                               = 3,
	KeyItem                                  = 4,
	Letter                                   = 5,
	Notebook                                 = 6,
	ENoceInventoryType_MAX                   = 7,
};

// Enum GameNoce.ENoceNotebookType
// NumValues: 0x0006
enum class ENoceNotebookType : uint8
{
	Character                                = 0,
	Enemy                                    = 1,
	Info                                     = 2,
	Puzzle                                   = 3,
	Tutorial                                 = 4,
	ENoceNotebookType_MAX                    = 5,
};

// Enum GameNoce.ENoceInputDeviceType
// NumValues: 0x0006
enum class ENoceInputDeviceType : uint8
{
	Invalid                                  = 0,
	KeyboardAndMouse                         = 1,
	XBoxController                           = 2,
	PS4Controller                            = 3,
	PS5Controller                            = 4,
	ENoceInputDeviceType_MAX                 = 5,
};

// Enum GameNoce.ENoceDeathType
// NumValues: 0x000C
enum class ENoceDeathType : uint8
{
	Common                                   = 0,
	Neck                                     = 1,
	Stomach                                  = 2,
	HitFly                                   = 3,
	Ladder                                   = 4,
	Narrow                                   = 5,
	Roar                                     = 6,
	Mucus                                    = 7,
	Flame                                    = 8,
	Headache                                 = 9,
	HardHeadache                             = 10,
	ENoceDeathType_MAX                       = 11,
};

// Enum GameNoce.ENoceWeaponMotionType
// NumValues: 0x000A
enum class ENoceWeaponMotionType : uint8
{
	None                                     = 0,
	Pipe                                     = 1,
	Dagger                                   = 2,
	Axe                                      = 3,
	Claw                                     = 4,
	ClawG                                    = 5,
	Lantern                                  = 6,
	Naginata                                 = 7,
	Katana                                   = 8,
	ENoceWeaponMotionType_MAX                = 9,
};

// Enum GameNoce.ENoceWinceType
// NumValues: 0x0011
enum class ENoceWinceType : uint8
{
	None                                     = 0,
	Addtive                                  = 1,
	Stun                                     = 2,
	KnockBack                                = 3,
	KnockDown                                = 4,
	HitFly                                   = 5,
	Roar                                     = 6,
	Corruption                               = 7,
	KatanaAutoDefense                        = 8,
	Blast                                    = 9,
	Mucus                                    = 10,
	HellModeFullBody                         = 11,
	EventHeadache                            = 12,
	EventHeadacheNoMove                      = 13,
	EventHeadacheSprint                      = 14,
	EventHeadacheSlowRaiseHand               = 15,
	ENoceWinceType_MAX                       = 16,
};

// Enum GameNoce.ENoceBodyPart
// NumValues: 0x0010
enum class ENoceBodyPart : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Chest                                    = 2,
	Stomach                                  = 3,
	Shoulder                                 = 4,
	UpperArm                                 = 5,
	Forearm                                  = 6,
	Hand                                     = 7,
	Thigh                                    = 8,
	Shin                                     = 9,
	Foot                                     = 10,
	UpperBody                                = 11,
	LowerBody                                = 12,
	Unique00                                 = 13,
	Unique01                                 = 14,
	ENoceBodyPart_MAX                        = 15,
};

// Enum GameNoce.ENoceInputAxis
// NumValues: 0x0007
enum class ENoceInputAxis : uint8
{
	MoveForward                              = 0,
	MoveRight                                = 1,
	Turn                                     = 2,
	TurnRate                                 = 3,
	LookUp                                   = 4,
	LookUpRate                               = 5,
	ENoceInputAxis_MAX                       = 6,
};

// Enum GameNoce.ENoceMontageState
// NumValues: 0x0008
enum class ENoceMontageState : uint8
{
	None                                     = 0,
	Attack                                   = 1,
	Dodge                                    = 2,
	Interact                                 = 3,
	Damage                                   = 4,
	Deflect                                  = 5,
	Link                                     = 6,
	ENoceMontageState_MAX                    = 7,
};

// Enum GameNoce.ENoceInputAction
// NumValues: 0x0012
enum class ENoceInputAction : uint8
{
	Dodge                                    = 0,
	LightAttack                              = 1,
	HeavyAttack                              = 2,
	Sprint                                   = 3,
	UTurn                                    = 4,
	Pause                                    = 5,
	Interact                                 = 6,
	Focus                                    = 7,
	Map                                      = 8,
	CameraReset                              = 9,
	Notebook                                 = 10,
	UseItem                                  = 11,
	Equipment                                = 12,
	ExtraSprint                              = 13,
	TransformLB                              = 14,
	TransformRB                              = 15,
	TransformKB                              = 16,
	ENoceInputAction_MAX                     = 17,
};

// Enum GameNoce.ENocePlayerOutfit
// NumValues: 0x0004
enum class ENocePlayerOutfit : uint8
{
	Default                                  = 0,
	PureWhite                                = 1,
	PinkRabbit                               = 2,
	ENocePlayerOutfit_MAX                    = 3,
};

// Enum GameNoce.ENoceUIInputAction
// NumValues: 0x001B
enum class ENoceUIInputAction : uint8
{
	UILeft                                   = 0,
	UIRight                                  = 1,
	UIUp                                     = 2,
	UIDown                                   = 3,
	UILeft2                                  = 4,
	UIRight2                                 = 5,
	UIUp2                                    = 6,
	UIDown2                                  = 7,
	Confirm                                  = 8,
	Cancel                                   = 9,
	UITabLeft                                = 10,
	UITabRight                               = 11,
	UITabLeft2                               = 12,
	UITabRight2                              = 13,
	UIPageUp                                 = 14,
	UIPageDown                               = 15,
	UIAction1                                = 16,
	UIAction2                                = 17,
	MapZoomIn                                = 18,
	MapZoomOut                               = 19,
	MapFloorUp                               = 20,
	MapFloorDown                             = 21,
	Pause                                    = 22,
	Map                                      = 23,
	Notebook                                 = 24,
	Equipment                                = 25,
	ENoceUIInputAction_MAX                   = 26,
};

// Enum GameNoce.ENoceUIRestrictionType
// NumValues: 0x0002
enum class ENoceUIRestrictionType : uint8
{
	HUD                                      = 0,
	ENoceUIRestrictionType_MAX               = 1,
};

// Enum GameNoce.ENoceMiscAchievementType
// NumValues: 0x000B
enum class ENoceMiscAchievementType : uint8
{
	Default                                  = 0,
	ReachEnding                              = 1,
	UpgradeHealth                            = 2,
	UpgradeStamina                           = 3,
	UpgradeSanity                            = 4,
	UpgradeOmamoriSlot                       = 5,
	PlayerTakeDamage                         = 6,
	PlayerTakeCombo                          = 7,
	AdditionalTag                            = 8,
	PlayerDie                                = 9,
	ENoceMiscAchievementType_MAX             = 10,
};

// Enum GameNoce.ENoceAchievementState
// NumValues: 0x0004
enum class ENoceAchievementState : uint8
{
	Ongoing                                  = 0,
	Completed                                = 1,
	Failed                                   = 2,
	ENoceAchievementState_MAX                = 3,
};

// Enum GameNoce.ENoceAchievementType
// NumValues: 0x0005
enum class ENoceAchievementType : uint8
{
	Progress                                 = 0,
	Enemy                                    = 1,
	Inventory                                = 2,
	Custom                                   = 3,
	ENoceAchievementType_MAX                 = 4,
};

// Enum GameNoce.ENoceInventoryAchievementType
// NumValues: 0x0003
enum class ENoceInventoryAchievementType : uint8
{
	Get                                      = 0,
	Use                                      = 1,
	ENoceInventoryAchievementType_MAX        = 2,
};

// Enum GameNoce.ENoceChunkDebugType
// NumValues: 0x0003
enum class ENoceChunkDebugType : uint8
{
	IsChunkInstalled                         = 0,
	IsOwnedDLC                               = 1,
	ENoceChunkDebugType_MAX                  = 2,
};

// Enum GameNoce.ENoceChunkDebugAction
// NumValues: 0x0003
enum class ENoceChunkDebugAction : uint8
{
	Checked                                  = 0,
	Unchecked                                = 1,
	ENoceChunkDebugAction_MAX                = 2,
};

// Enum GameNoce.ENoceConditionHandlerType
// NumValues: 0x0003
enum class ENoceConditionHandlerType : uint8
{
	Immediate                                = 0,
	Sequential                               = 1,
	ENoceConditionHandlerType_MAX            = 2,
};

// Enum GameNoce.ENoceUIInputMode
// NumValues: 0x0004
enum class ENoceUIInputMode : uint8
{
	GameAndUI                                = 0,
	UIOnly                                   = 1,
	GameOnly                                 = 2,
	ENoceUIInputMode_MAX                     = 3,
};

// Enum GameNoce.ENoceInteractIconState
// NumValues: 0x0005
enum class ENoceInteractIconState : uint8
{
	Prompt                                   = 0,
	Hint                                     = 1,
	Hidden                                   = 2,
	Forbit                                   = 3,
	ENoceInteractIconState_MAX               = 4,
};

// Enum GameNoce.ENoceCineEventUserType
// NumValues: 0x0007
enum class ENoceCineEventUserType : uint8
{
	None                                     = 0,
	CS                                       = 1,
	CS_Seamless                              = 2,
	Event                                    = 3,
	WeddingEvent                             = 4,
	LevelEvent                               = 5,
	ENoceCineEventUserType_MAX               = 6,
};

// Enum GameNoce.ENoceEventModeType
// NumValues: 0x0004
enum class ENoceEventModeType : uint8
{
	NONE                                     = 0,
	Default                                  = 1,
	PlaySequenceState                        = 2,
	ENoceEventModeType_MAX                   = 3,
};

// Enum GameNoce.ENoceUIScrollBarVisibility
// NumValues: 0x0006
enum class ENoceUIScrollBarVisibility : uint8
{
	Visible                                  = 0,
	Collapsed                                = 1,
	Hidden                                   = 2,
	Auto                                     = 3,
	AutoCollapsed                            = 4,
	ENoceUIScrollBarVisibility_MAX           = 5,
};

// Enum GameNoce.ENocePickupsConsumableGroupType
// NumValues: 0x0003
enum class ENocePickupsConsumableGroupType : uint8
{
	Consumable_Large                         = 0,
	Consumable_Small                         = 1,
	Consumable_MAX                           = 2,
};

// Enum GameNoce.ENocePickupsWeaponGroupType
// NumValues: 0x0004
enum class ENocePickupsWeaponGroupType : uint8
{
	Weapon_Large                             = 0,
	Weapon_Medium                            = 1,
	Weapon_Small                             = 2,
	Weapon_MAX                               = 3,
};

// Enum GameNoce.ENoceChapterType
// NumValues: 0x0017
enum class ENoceChapterType : uint8
{
	Chapter01                                = 0,
	Chapter02                                = 1,
	Chapter03                                = 2,
	Chapter04                                = 3,
	Chapter05                                = 4,
	Chapter06                                = 5,
	Chapter07                                = 6,
	Chapter08                                = 7,
	Chapter09                                = 8,
	Chapter10                                = 9,
	Chapter11                                = 10,
	Chapter12                                = 11,
	Chapter13                                = 12,
	Chapter14                                = 13,
	Chapter15                                = 14,
	Chapter16A                               = 15,
	Chapter16B                               = 16,
	Chapter16C                               = 17,
	Chapter16D                               = 18,
	Chapter16E                               = 19,
	Num                                      = 20,
	None                                     = 21,
	ENoceChapterType_MAX                     = 22,
};

// Enum GameNoce.ENoceUIPopWindowType
// NumValues: 0x0006
enum class ENoceUIPopWindowType : uint8
{
	Invalid                                  = 0,
	Yes                                      = 1,
	YesNoDefaultY                            = 2,
	YesNoDefaultN                            = 3,
	Custom                                   = 4,
	ENoceUIPopWindowType_MAX                 = 5,
};

// Enum GameNoce.ENoceGameSettingPreset
// NumValues: 0x0007
enum class ENoceGameSettingPreset : uint8
{
	Default                                  = 0,
	Performance                              = 1,
	Balanced                                 = 2,
	Quality                                  = 3,
	Enhanced                                 = 4,
	Custom                                   = 5,
	ENoceGameSettingPreset_MAX               = 6,
};

// Enum GameNoce.ENoceGameSettingAudioDynamicRange
// NumValues: 0x0003
enum class ENoceGameSettingAudioDynamicRange : uint8
{
	Low                                      = 0,
	High                                     = 1,
	ENoceGameSettingAudioDynamicRange_MAX    = 2,
};

// Enum GameNoce.ENoceGameSettingAudioProfileType
// NumValues: 0x0004
enum class ENoceGameSettingAudioProfileType : uint8
{
	Speakers                                 = 0,
	TV                                       = 1,
	Headset                                  = 2,
	ENoceGameSettingAudioProfileType_MAX     = 3,
};

// Enum GameNoce.EColorBlindMode
// NumValues: 0x0005
enum class EColorBlindMode : uint8
{
	Off                                      = 0,
	Deuteranope                              = 1,
	Protanope                                = 2,
	Tritanope                                = 3,
	EColorBlindMode_MAX                      = 4,
};

// Enum GameNoce.ENoceLanguageType
// NumValues: 0x0004
enum class ENoceLanguageType : uint8
{
	English                                  = 0,
	Japanese                                 = 1,
	TraditionalChinese                       = 2,
	ENoceLanguageType_MAX                    = 3,
};

// Enum GameNoce.ENoceInputGamepadType
// NumValues: 0x0007
enum class ENoceInputGamepadType : uint8
{
	Type1                                    = 0,
	Type2                                    = 1,
	Type3                                    = 2,
	Type4                                    = 3,
	Type5                                    = 4,
	Type6                                    = 5,
	ENoceInputGamepadType_MAX                = 6,
};

// Enum GameNoce.ENoceGameSettingSubtitleBackground
// NumValues: 0x0004
enum class ENoceGameSettingSubtitleBackground : uint8
{
	None                                     = 0,
	Transparent                              = 1,
	Solid                                    = 2,
	ENoceGameSettingSubtitleBackground_MAX   = 3,
};

// Enum GameNoce.ENoceGameSettingSubtitleColor
// NumValues: 0x0004
enum class ENoceGameSettingSubtitleColor : uint8
{
	Off                                      = 0,
	On                                       = 1,
	ColorOnlyName                            = 2,
	ENoceGameSettingSubtitleColor_MAX        = 3,
};

// Enum GameNoce.ENoceGameSettingFont
// NumValues: 0x0003
enum class ENoceGameSettingFont : uint8
{
	Default                                  = 0,
	Bold                                     = 1,
	ENoceGameSettingFont_MAX                 = 2,
};

// Enum GameNoce.ENoceGameSettingSize
// NumValues: 0x0004
enum class ENoceGameSettingSize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Default                                  = 2,
	ENoceGameSettingSize_MAX                 = 3,
};

// Enum GameNoce.ENoceUIInitialSettingType
// NumValues: 0x0004
enum class ENoceUIInitialSettingType : uint8
{
	Action                                   = 0,
	Riddle                                   = 1,
	Outfit                                   = 2,
	ENoceUIInitialSettingType_MAX            = 3,
};

// Enum GameNoce.ENoceAchievementSaveType
// NumValues: 0x0003
enum class ENoceAchievementSaveType : uint8
{
	Game                                     = 0,
	System                                   = 1,
	ENoceAchievementSaveType_MAX             = 2,
};

// Enum GameNoce.ENoceEnemyAchievementType
// NumValues: 0x0003
enum class ENoceEnemyAchievementType : uint8
{
	Dead                                     = 0,
	FakeDead                                 = 1,
	ENoceEnemyAchievementType_MAX            = 2,
};

// Enum GameNoce.ENoceActionStatus
// NumValues: 0x0004
enum class ENoceActionStatus : uint8
{
	Processing                               = 0,
	Complete                                 = 1,
	Abort                                    = 2,
	ENoceActionStatus_MAX                    = 3,
};

// Enum GameNoce.ENoceActivityActionType
// NumValues: 0x0006
enum class ENoceActivityActionType : uint8
{
	Start                                    = 0,
	End                                      = 1,
	ChangeAvailability                       = 2,
	ResetAll                                 = 3,
	Resume                                   = 4,
	ENoceActivityActionType_MAX              = 5,
};

// Enum GameNoce.ENoceSpringArmType
// NumValues: 0x0003
enum class ENoceSpringArmType : uint8
{
	Default                                  = 0,
	PreserveDistance                         = 1,
	ENoceSpringArmType_MAX                   = 2,
};

// Enum GameNoce.ENoceDialogHandleType
// NumValues: 0x0005
enum class ENoceDialogHandleType : uint8
{
	Interrupt                                = 0,
	Overlap                                  = 1,
	Queue                                    = 2,
	Drop                                     = 3,
	ENoceDialogHandleType_MAX                = 4,
};

// Enum GameNoce.ENoceEnemyAnimInstanceBoolVar
// NumValues: 0x0009
enum class ENoceEnemyAnimInstanceBoolVar : uint8
{
	IsDamaged                                = 0,
	IsInDamageState                          = 1,
	IsDead                                   = 2,
	IsFakeDead                               = 3,
	IsResurrect                              = 4,
	IsInLinkState                            = 5,
	IsInDownState                            = 6,
	IsInIdleState                            = 7,
	ENoceEnemyAnimInstanceBoolVar_MAX        = 8,
};

// Enum GameNoce.EEnemyGroupSpawnPattern
// NumValues: 0x0003
enum class EEnemyGroupSpawnPattern : uint8
{
	AtOnce                                   = 0,
	SpawnNextByTimer                         = 1,
	EEnemyGroupSpawnPattern_MAX              = 2,
};

// Enum GameNoce.EEnemyGroupTimeUpAction
// NumValues: 0x0003
enum class EEnemyGroupTimeUpAction : uint8
{
	KillSpawnedEnemies                       = 0,
	KeepSpawningExtraTime                    = 1,
	EEnemyGroupTimeUpAction_MAX              = 2,
};

// Enum GameNoce.EEnemyGroupSpawnFacing
// NumValues: 0x0004
enum class EEnemyGroupSpawnFacing : uint8
{
	Zero                                     = 0,
	SameAsSpawner                            = 1,
	FaceToPlayer                             = 2,
	EEnemyGroupSpawnFacing_MAX               = 3,
};

// Enum GameNoce.ENoceAnimCancel
// NumValues: 0x000A
enum class ENoceAnimCancel : uint8
{
	MoveCancel                               = 0,
	AttackCancel                             = 1,
	DodgeCancel                              = 2,
	UTurnCancel                              = 3,
	ClawTransformCancel                      = 4,
	LightAttackCancel                        = 5,
	HeavyAttackCancel                        = 6,
	CounterCancel                            = 7,
	FocusCancel                              = 8,
	ENoceAnimCancel_MAX                      = 9,
};

// Enum GameNoce.ENoceInputOperateType
// NumValues: 0x0004
enum class ENoceInputOperateType : uint8
{
	Pressed                                  = 0,
	Released                                 = 1,
	LongPressed                              = 2,
	ENoceInputOperateType_MAX                = 3,
};

// Enum GameNoce.ENoceAIAlertType
// NumValues: 0x0005
enum class ENoceAIAlertType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Aware                                    = 2,
	Engage                                   = 3,
	ENoceAIAlertType_MAX                     = 4,
};

// Enum GameNoce.ENoceAIAlertChangingType
// NumValues: 0x0006
enum class ENoceAIAlertChangingType : uint8
{
	None                                     = 0,
	IdleToAware                              = 1,
	AwareToEngage                            = 2,
	EngageToAware                            = 3,
	AwareToIdle                              = 4,
	ENoceAIAlertChangingType_MAX             = 5,
};

// Enum GameNoce.ENoceAIFaceToTargetType
// NumValues: 0x0005
enum class ENoceAIFaceToTargetType : uint8
{
	Attack                                   = 0,
	Strafe                                   = 1,
	MoveTo                                   = 2,
	Actor                                    = 3,
	ENoceAIFaceToTargetType_MAX              = 4,
};

// Enum GameNoce.ENoceAIFaceToTargetFaceType
// NumValues: 0x0003
enum class ENoceAIFaceToTargetFaceType : uint8
{
	FaceTo                                   = 0,
	MatchRotTo                               = 1,
	ENoceAIFaceToTargetFaceType_MAX          = 2,
};

// Enum GameNoce.ENoceAttackTraceType
// NumValues: 0x0003
enum class ENoceAttackTraceType : uint8
{
	Sphere                                   = 0,
	Capsule                                  = 1,
	ENoceAttackTraceType_MAX                 = 2,
};

// Enum GameNoce.ENoceTeamType
// NumValues: 0x0005
enum class ENoceTeamType : uint8
{
	UnKnown                                  = 0,
	Neutral                                  = 1,
	Player                                   = 2,
	Enemy                                    = 3,
	ENoceTeamType_MAX                        = 4,
};

// Enum GameNoce.ENocePlayerAnimStateType
// NumValues: 0x001A
enum class ENocePlayerAnimStateType : uint8
{
	None                                     = 0,
	Attack_L                                 = 1,
	Attack_LL                                = 2,
	Attack_LLL                               = 3,
	Attack_H                                 = 4,
	Dodge                                    = 5,
	Counter                                  = 6,
	Deflect_L                                = 7,
	Deflect_H                                = 8,
	Attack_LH                                = 9,
	Attack_LLH                               = 10,
	Attack_HH                                = 11,
	Attack_HHH                               = 12,
	UTurn                                    = 13,
	Attack_LLLL                              = 14,
	Attack_LLLH                              = 15,
	Attack_LLLLH                             = 16,
	FocusAttack                              = 17,
	ClawTransform                            = 18,
	AutoCounter                              = 19,
	ClawAtrackSoul                           = 20,
	Dodge1                                   = 21,
	Damage                                   = 22,
	Damage1                                  = 23,
	Counter1                                 = 24,
	ENocePlayerAnimStateType_MAX             = 25,
};

// Enum GameNoce.ETargetDirectionType
// NumValues: 0x0007
enum class ETargetDirectionType : uint8
{
	Invalid                                  = 0,
	Front                                    = 1,
	L90                                      = 2,
	L180                                     = 3,
	R90                                      = 4,
	R180                                     = 5,
	ETargetDirectionType_MAX                 = 6,
};

// Enum GameNoce.ENoceTimeEffectType
// NumValues: 0x0004
enum class ENoceTimeEffectType : uint8
{
	Global                                   = 0,
	SanityFocus                              = 1,
	EnemyCounterable                         = 2,
	ENoceTimeEffectType_MAX                  = 3,
};

// Enum GameNoce.ENoceHitReactionTwoWayType
// NumValues: 0x0003
enum class ENoceHitReactionTwoWayType : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	ENoceHitReactionTwoWayType_MAX           = 2,
};

// Enum GameNoce.ENoceHitReactionFourWayType
// NumValues: 0x0005
enum class ENoceHitReactionFourWayType : uint8
{
	Front                                    = 0,
	Rignt                                    = 1,
	Back                                     = 2,
	Left                                     = 3,
	ENoceHitReactionFourWayType_MAX          = 4,
};

// Enum GameNoce.ENoceAISpawnerEventType
// NumValues: 0x000B
enum class ENoceAISpawnerEventType : uint8
{
	Spawn                                    = 0,
	EnableThink                              = 1,
	OverridePerception                       = 2,
	OverrideAlert                            = 3,
	Delete                                   = 4,
	Kill                                     = 5,
	EndAICommand                             = 6,
	Teleport                                 = 7,
	TemporaryRemoved                         = 8,
	AttemptRespawn                           = 9,
	ENoceAISpawnerEventType_MAX              = 10,
};

// Enum GameNoce.ENoceAICommandType
// NumValues: 0x000E
enum class ENoceAICommandType : uint8
{
	None                                     = 0,
	Wait                                     = 1,
	MoveTo                                   = 2,
	Guide                                    = 3,
	PlayAnimation                            = 4,
	Delete                                   = 5,
	Kill                                     = 6,
	Teleoprt                                 = 7,
	AlertOverride                            = 8,
	EquipWeapon                              = 9,
	PlayDialog                               = 10,
	MoveOnSpline                             = 11,
	LookAt                                   = 12,
	ENoceAICommandType_MAX                   = 13,
};

// Enum GameNoce.ENoceAICommandExecType
// NumValues: 0x0003
enum class ENoceAICommandExecType : uint8
{
	Once                                     = 0,
	Loop                                     = 1,
	ENoceAICommandExecType_MAX               = 2,
};

// Enum GameNoce.ENoceWeaponType
// NumValues: 0x0011
enum class ENoceWeaponType : uint8
{
	None                                     = 0,
	Pipe                                     = 1,
	Bat                                      = 2,
	Crowbar                                  = 3,
	Dagger                                   = 4,
	Sickle                                   = 5,
	Axe                                      = 6,
	Hammer                                   = 7,
	Claw                                     = 8,
	ClawG                                    = 9,
	Lantern                                  = 10,
	Naginata                                 = 11,
	Katana                                   = 12,
	ToySaber                                 = 13,
	Kaiken                                   = 14,
	KatanaAlter                              = 15,
	ENoceWeaponType_MAX                      = 16,
};

// Enum GameNoce.ENoceItemMotionType
// NumValues: 0x0005
enum class ENoceItemMotionType : uint8
{
	UseItem                                  = 0,
	UseFirstAdd                              = 1,
	UseFood                                  = 2,
	UseWeaponRecover                         = 3,
	ENoceItemMotionType_MAX                  = 4,
};

// Enum GameNoce.ENoceDialogSpeaker
// NumValues: 0x0031
enum class ENoceDialogSpeaker : uint8
{
	None                                     = 0,
	Hinako                                   = 1,
	Hinako_Cine                              = 2,
	HinaGirl                                 = 3,
	HinaPast                                 = 4,
	Shuu                                     = 5,
	Shuu_Cine                                = 6,
	ShuuBoy                                  = 7,
	Koto                                     = 8,
	Koto_Cine                                = 9,
	KotoBoy                                  = 10,
	Rinko                                    = 11,
	Rinko_Cine                               = 12,
	Sakuko                                   = 13,
	Sakuko_Cine                              = 14,
	Miko                                     = 15,
	Junko                                    = 16,
	Junko_Cine                               = 17,
	Doll                                     = 18,
	Fox7                                     = 19,
	Fox9                                     = 20,
	FoxMan                                   = 21,
	HousewifeA                               = 22,
	HousewifeB                               = 23,
	Kanta                                    = 24,
	Kairai                                   = 25,
	Kimie                                    = 26,
	MonsterDad                               = 27,
	MonsterMom                               = 28,
	Radio                                    = 29,
	Saishu                                   = 30,
	Shiromuku                                = 31,
	Tsukumo                                  = 32,
	Unknown                                  = 33,
	Boy                                      = 34,
	MaleYoung                                = 35,
	MaleMidAge                               = 36,
	MaleOld                                  = 37,
	Girl                                     = 38,
	FemaleYoung                              = 39,
	FemaleMidAge                             = 40,
	FemaleOld                                = 41,
	Speaker_5                                = 42,
	Speaker_6                                = 43,
	Speaker_7                                = 44,
	Speaker_8                                = 45,
	MultiSpeaker                             = 46,
	DebugActor                               = 47,
	ENoceDialogSpeaker_MAX                   = 48,
};

// Enum GameNoce.ENoceDialogSpeakerName
// NumValues: 0x002B
enum class ENoceDialogSpeakerName : uint8
{
	None                                     = 0,
	Classmate                                = 1,
	DeliveryMan                              = 2,
	DisciplineMaster                         = 3,
	Doll                                     = 4,
	Fox7                                     = 5,
	Fox9                                     = 6,
	FoxMan                                   = 7,
	Hinako                                   = 8,
	HinaGirl                                 = 9,
	HinaPast                                 = 10,
	HinaFox                                  = 11,
	HouseWifeA                               = 12,
	HouseWifeB                               = 13,
	Junko                                    = 14,
	Kanta                                    = 15,
	Kairai                                   = 16,
	Kimie                                    = 17,
	Kotoyuki                                 = 18,
	KotoBoy                                  = 19,
	Miko                                     = 20,
	MonsterDad                               = 21,
	MonsterMom                               = 22,
	NpcBoy                                   = 23,
	NpcGirl                                  = 24,
	NpcMan                                   = 25,
	NpcPeople                                = 26,
	NpcWoman                                 = 27,
	Policeman                                = 28,
	Radio                                    = 29,
	Rinko                                    = 30,
	Saishu                                   = 31,
	Sakuko                                   = 32,
	Shiromuku                                = 33,
	Shuu                                     = 34,
	ShuuBoy                                  = 35,
	Tsukumo                                  = 36,
	Guests                                   = 37,
	Guests02                                 = 38,
	Guests03                                 = 39,
	DrunkGuests                              = 40,
	Unknown                                  = 41,
	ENoceDialogSpeakerName_MAX               = 42,
};

// Enum GameNoce.ENoceDialogSetType
// NumValues: 0x0003
enum class ENoceDialogSetType : uint8
{
	Random                                   = 0,
	Serial                                   = 1,
	ENoceDialogSetType_MAX                   = 2,
};

// Enum GameNoce.ENoceRiddleLevel
// NumValues: 0x0004
enum class ENoceRiddleLevel : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	ENoceRiddleLevel_MAX                     = 3,
};

// Enum GameNoce.ENoceConstPositionMode
// NumValues: 0x0005
enum class ENoceConstPositionMode : uint8
{
	Once                                     = 0,
	OnceKeep                                 = 1,
	Keep                                     = 2,
	Location                                 = 3,
	ENoceConstPositionMode_MAX               = 4,
};

// Enum GameNoce.ENoceConstPositionType
// NumValues: 0x0003
enum class ENoceConstPositionType : uint8
{
	JackOwnerToTarget                        = 0,
	JackTargetToOwner                        = 1,
	ENoceConstPositionType_MAX               = 2,
};

// Enum GameNoce.ENocePlayerLookAtType
// NumValues: 0x0004
enum class ENocePlayerLookAtType : uint8
{
	Enemy                                    = 0,
	Interact                                 = 1,
	Pickup                                   = 2,
	Max                                      = 3,
};

// Enum GameNoce.ENoceAILookAtType
// NumValues: 0x0003
enum class ENoceAILookAtType : uint8
{
	Player                                   = 0,
	Actor                                    = 1,
	Max                                      = 2,
};

// Enum GameNoce.ENoceTutorialType
// NumValues: 0x0053
enum class ENoceTutorialType : uint8
{
	MovingAndJogging                         = 0,
	OpenMap                                  = 1,
	SpecialMove                              = 2,
	UseConsumableItem                        = 3,
	CheckPoint                               = 4,
	Dodge                                    = 5,
	Escape                                   = 6,
	RiddleObservation                        = 7,
	HotToAttack                              = 8,
	HowToFocus                               = 9,
	SanitySystem                             = 10,
	ChargedAttack                            = 11,
	CounterAttack                            = 12,
	EquipOmamori                             = 13,
	WeaponDurability                         = 14,
	WeaponSwitch                             = 15,
	Mission17                                = 16,
	Mission18                                = 17,
	Mission19                                = 18,
	Mission20                                = 19,
	Mission21                                = 20,
	Mission22                                = 21,
	Mission23                                = 22,
	Mission24                                = 23,
	Mission25                                = 24,
	Mission26                                = 25,
	Mission27                                = 26,
	Mission28                                = 27,
	Mission29                                = 28,
	Mission30                                = 29,
	Mission31                                = 30,
	Mission32                                = 31,
	Mission33                                = 32,
	Mission34                                = 33,
	Mission35                                = 34,
	Mission36                                = 35,
	Mission37                                = 36,
	Mission38                                = 37,
	Mission39                                = 38,
	Mission40                                = 39,
	Mission41                                = 40,
	Mission42                                = 41,
	Mission43                                = 42,
	Mission44                                = 43,
	Mission45                                = 44,
	Mission46                                = 45,
	Mission47                                = 46,
	Mission48                                = 47,
	Mission49                                = 48,
	Mission50                                = 49,
	Mission51                                = 50,
	Mission52                                = 51,
	Mission53                                = 52,
	Mission54                                = 53,
	Mission55                                = 54,
	Mission56                                = 55,
	Mission57                                = 56,
	Mission58                                = 57,
	Mission59                                = 58,
	Mission60                                = 59,
	Mission61                                = 60,
	Mission62                                = 61,
	Mission63                                = 62,
	Mission64                                = 63,
	Mission65                                = 64,
	Mission66                                = 65,
	Mission67                                = 66,
	Mission68                                = 67,
	Mission69                                = 68,
	Mission70                                = 69,
	Mission71                                = 70,
	Mission72                                = 71,
	Mission73                                = 72,
	Mission74                                = 73,
	Mission75                                = 74,
	Mission76                                = 75,
	Mission77                                = 76,
	Mission78                                = 77,
	Mission79                                = 78,
	Mission80                                = 79,
	Num                                      = 80,
	None                                     = 81,
	ENoceTutorialType_MAX                    = 82,
};

// Enum GameNoce.ETutorialStep
// NumValues: 0x0005
enum class ETutorialStep : uint8
{
	Listening                                = 0,
	Start                                    = 1,
	Finish                                   = 2,
	Seeya                                    = 3,
	ETutorialStep_MAX                        = 4,
};

// Enum GameNoce.ENocePauseType
// NumValues: 0x0007
enum class ENocePauseType : uint8
{
	PauseMenu                                = 0,
	Map                                      = 1,
	PickNewItem                              = 2,
	Notebook                                 = 3,
	Equipment                                = 4,
	Others                                   = 5,
	ENocePauseType_MAX                       = 6,
};

// Enum GameNoce.ENoceRoundType
// NumValues: 0x0005
enum class ENoceRoundType : uint8
{
	Round1                                   = 0,
	Round2                                   = 1,
	Round3                                   = 2,
	Round4                                   = 3,
	ENoceRoundType_MAX                       = 4,
};

// Enum GameNoce.ENoceHellModeAnimType
// NumValues: 0x0008
enum class ENoceHellModeAnimType : uint8
{
	Normal                                   = 0,
	PhysicalOnly                             = 1,
	Stun                                     = 2,
	Event                                    = 3,
	EventNoMove                              = 4,
	EventSprint                              = 5,
	EventSlowRaiseHand                       = 6,
	ENoceHellModeAnimType_MAX                = 7,
};

// Enum GameNoce.ENoceProgressType
// NumValues: 0x0008
enum class ENoceProgressType : uint8
{
	Default                                  = 0,
	State                                    = 1,
	Trigger                                  = 2,
	Action                                   = 3,
	Gimmick                                  = 4,
	System                                   = 5,
	Debug                                    = 6,
	ENoceProgressType_MAX                    = 7,
};

// Enum GameNoce.ELinkPriority
// NumValues: 0x0008
enum class ELinkPriority : uint8
{
	HIGHEST                                  = 0,
	BOSS                                     = 1,
	MINION_HIGHEST                           = 2,
	EMBASIC                                  = 3,
	TENTACLE                                 = 4,
	MINION_LOWEST                            = 5,
	LOWEST                                   = 6,
	ELinkPriority_MAX                        = 7,
};

// Enum GameNoce.ENoceJogAnimAction
// NumValues: 0x0008
enum class ENoceJogAnimAction : uint8
{
	None                                     = 0,
	JogStart                                 = 1,
	JogEnd                                   = 2,
	JogTiredEnd                              = 3,
	JogTurn                                  = 4,
	JogToWalk                                = 5,
	JogToWalkAutoWalk                        = 6,
	ENoceJogAnimAction_MAX                   = 7,
};

// Enum GameNoce.ENoceNPCType
// NumValues: 0x000F
enum class ENoceNPCType : uint8
{
	None                                     = 0,
	Dad                                      = 1,
	Doll                                     = 2,
	HinaGirl                                 = 3,
	Junko                                    = 4,
	Koto                                     = 5,
	Maid                                     = 6,
	Mom                                      = 7,
	Rinko                                    = 8,
	Sakuko                                   = 9,
	Scarecrow                                = 10,
	Shiro                                    = 11,
	ShiroFog                                 = 12,
	Shuu                                     = 13,
	ENoceNPCType_MAX                         = 14,
};

// Enum GameNoce.ENoceWorldTransTimeGroup
// NumValues: 0x0004
enum class ENoceWorldTransTimeGroup : uint8
{
	Time_1                                   = 0,
	Time_2                                   = 1,
	Time_3                                   = 2,
	Time_MAX                                 = 3,
};

// Enum GameNoce.ENoceSubtitleType
// NumValues: 0x0003
enum class ENoceSubtitleType : uint8
{
	InGame                                   = 0,
	Cinematic                                = 1,
	ENoceSubtitleType_MAX                    = 2,
};

// Enum GameNoce.ENoceControllerVibrationType
// NumValues: 0x0006
enum class ENoceControllerVibrationType : uint8
{
	None                                     = 0,
	Small                                    = 1,
	Middle                                   = 2,
	Large                                    = 3,
	Touch                                    = 4,
	ENoceControllerVibrationType_MAX         = 5,
};

// Enum GameNoce.ENoceWoundType
// NumValues: 0x0004
enum class ENoceWoundType : uint8
{
	Sharp                                    = 0,
	Blunt                                    = 1,
	None                                     = 99,
	ENoceWoundType_MAX                       = 100,
};

// Enum GameNoce.ENoceAlignment
// NumValues: 0x0004
enum class ENoceAlignment : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Center                                   = 2,
	ENoceAlignment_MAX                       = 3,
};

// Enum GameNoce.ENocePhysType
// NumValues: 0x0005
enum class ENocePhysType : uint8
{
	None                                     = 0,
	RBAN                                     = 1,
	Kawaii                                   = 2,
	Clothing                                 = 3,
	ENocePhysType_MAX                        = 4,
};

// Enum GameNoce.ENoceBattlePositionTier
// NumValues: 0x0005
enum class ENoceBattlePositionTier : uint8
{
	Primary                                  = 0,
	Seccondary                               = 1,
	Tertiary                                 = 2,
	Last                                     = 3,
	ENoceBattlePositionTier_MAX              = 4,
};

// Enum GameNoce.ENoceRagdollStatus
// NumValues: 0x0005
enum class ENoceRagdollStatus : uint8
{
	Deactivate                               = 0,
	Preactivate                              = 1,
	Activate                                 = 2,
	Returning                                = 3,
	ENoceRagdollStatus_MAX                   = 4,
};

// Enum GameNoce.ENoceAbilityInputID
// NumValues: 0x0009
enum class ENoceAbilityInputID : uint8
{
	None                                     = 0,
	Confirm                                  = 1,
	Cancel                                   = 2,
	Sprint                                   = 3,
	Interact                                 = 4,
	ShortcutItem                             = 5,
	ChangeWeapon                             = 6,
	UseItem                                  = 7,
	ENoceAbilityInputID_MAX                  = 8,
};

// Enum GameNoce.ENoceGraphicAASuperSamplingMode
// NumValues: 0x0009
enum class ENoceGraphicAASuperSamplingMode : uint8
{
	None                                     = 0,
	FXAA                                     = 1,
	TAA                                      = 2,
	MSAA                                     = 3,
	TSR                                      = 4,
	AMD_FSR                                  = 5,
	NVIDIA_DLSS                              = 6,
	PSSR                                     = 7,
	ENoceGraphicAASuperSamplingMode_MAX      = 8,
};

// Enum GameNoce.ENoceHitPerformParticleRotationType
// NumValues: 0x0005
enum class ENoceHitPerformParticleRotationType : uint8
{
	None                                     = 0,
	ImpactNormal                             = 1,
	OwnerFoward                              = 2,
	AttackerRelatedValue                     = 3,
	ENoceHitPerformParticleRotationType_MAX  = 4,
};

// Enum GameNoce.ENoceHitPerformPostProcessType
// NumValues: 0x0003
enum class ENoceHitPerformPostProcessType : uint8
{
	None                                     = 0,
	BreakDown                                = 1,
	ENoceHitPerformPostProcessType_MAX       = 2,
};

// Enum GameNoce.ENoceIndicatorEdgeType
// NumValues: 0x0006
enum class ENoceIndicatorEdgeType : uint8
{
	LEFT                                     = 0,
	RIGHT                                    = 1,
	UPPER                                    = 2,
	BOTTOM                                   = 3,
	NONE                                     = 4,
	ENoceIndicatorEdgeType_MAX               = 5,
};

// Enum GameNoce.ENoceInputKeyType
// NumValues: 0x0006
enum class ENoceInputKeyType : uint8
{
	Gameplay                                 = 0,
	GameplayAxis                             = 1,
	UICommon                                 = 2,
	UI                                       = 3,
	Map                                      = 4,
	ENoceInputKeyType_MAX                    = 5,
};

// Enum GameNoce.ENoceItemAttributeType
// NumValues: 0x0005
enum class ENoceItemAttributeType : uint8
{
	Health                                   = 0,
	Stamina                                  = 1,
	Sanity                                   = 2,
	FaithValue                               = 3,
	ENoceItemAttributeType_MAX               = 4,
};

// Enum GameNoce.ENoceItemAttributeCheckType
// NumValues: 0x0006
enum class ENoceItemAttributeCheckType : uint8
{
	Health                                   = 0,
	Sanity                                   = 1,
	MaxSanity                                = 2,
	Weapon                                   = 3,
	ClawTransform                            = 4,
	ENoceItemAttributeCheckType_MAX          = 5,
};

// Enum GameNoce.ENoceItemOfferingEffectType
// NumValues: 0x0004
enum class ENoceItemOfferingEffectType : uint8
{
	Health                                   = 0,
	Stamina                                  = 1,
	Sanity                                   = 2,
	ENoceItemOfferingEffectType_MAX          = 3,
};

// Enum GameNoce.ENoceLevelArea
// NumValues: 0x0003
enum class ENoceLevelArea : uint8
{
	Fog                                      = 0,
	Dark                                     = 1,
	ENoceLevelArea_MAX                       = 2,
};

// Enum GameNoce.ENoceLevelRegion
// NumValues: 0x0014
enum class ENoceLevelRegion : uint8
{
	None                                     = 0,
	Hillside                                 = 1,
	Alleyways                                = 2,
	OldDistrict                              = 3,
	OutskirtField                            = 4,
	Field                                    = 5,
	School                                   = 6,
	Mountain                                 = 7,
	ShimizuHouse                             = 8,
	EntranceHall                             = 9,
	Torii                                    = 10,
	OuterCorridor                            = 11,
	WorshipHall                              = 12,
	Underground                              = 13,
	WeddingHall                              = 14,
	WeddingHallEleven                        = 15,
	TreasureHouse                            = 16,
	Arena                                    = 17,
	DarkArena                                = 18,
	ENoceLevelRegion_MAX                     = 19,
};

// Enum GameNoce.ENoceEnvSubdivision
// NumValues: 0x001F
enum class ENoceEnvSubdivision : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	E                                        = 4,
	F                                        = 5,
	G                                        = 6,
	H                                        = 7,
	I                                        = 8,
	J                                        = 9,
	K                                        = 10,
	L                                        = 11,
	M                                        = 12,
	N                                        = 13,
	O                                        = 14,
	P                                        = 15,
	Q                                        = 16,
	R                                        = 17,
	S                                        = 18,
	T                                        = 19,
	U                                        = 20,
	V                                        = 21,
	W                                        = 22,
	X                                        = 23,
	Y                                        = 24,
	Z                                        = 25,
	AA                                       = 26,
	AB                                       = 27,
	AC                                       = 28,
	AD                                       = 29,
	ENoceEnvSubdivision_MAX                  = 30,
};

// Enum GameNoce.ENoceSweetLightType
// NumValues: 0x0004
enum class ENoceSweetLightType : uint8
{
	Character                                = 0,
	Environment                              = 1,
	Moon                                     = 2,
	ENoceSweetLightType_MAX                  = 3,
};

// Enum GameNoce.ENoceLanternLightType
// NumValues: 0x0004
enum class ENoceLanternLightType : uint8
{
	Point                                    = 0,
	Volume                                   = 1,
	Main                                     = 2,
	ENoceLanternLightType_MAX                = 3,
};

// Enum GameNoce.ENoceLightRigidBodyWireType
// NumValues: 0x0008
enum class ENoceLightRigidBodyWireType : uint8
{
	NONE                                     = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	D                                        = 4,
	E                                        = 5,
	F                                        = 6,
	ENoceLightRigidBodyWireType_MAX          = 7,
};

// Enum GameNoce.ENoceMapLocationGroup
// NumValues: 0x0007
enum class ENoceMapLocationGroup : uint8
{
	Invalid                                  = 0,
	FogTown_01                               = 1,
	FogTown_02                               = 2,
	FogTown_03                               = 3,
	FogTown_04                               = 4,
	FogTown_05                               = 5,
	ENoceMapLocationGroup_MAX                = 6,
};

// Enum GameNoce.ENoceMapIconVisibleType
// NumValues: 0x0008
enum class ENoceMapIconVisibleType : uint8
{
	ShowInteractHint                         = 0,
	Interact                                 = 1,
	WithinDistanceXY                         = 2,
	WithinDistance                           = 3,
	Manual                                   = 4,
	ProgressTag                              = 5,
	CheckConditionMatch                      = 6,
	ENoceMapIconVisibleType_MAX              = 7,
};

// Enum GameNoce.ENoceNavLinkJumpType
// NumValues: 0x0005
enum class ENoceNavLinkJumpType : uint8
{
	None                                     = 0,
	Flat                                     = 1,
	Up                                       = 2,
	Down                                     = 3,
	ENoceNavLinkJumpType_MAX                 = 4,
};

// Enum GameNoce.ENoceOmamoriDrawingType
// NumValues: 0x0004
enum class ENoceOmamoriDrawingType : uint8
{
	None                                     = 0,
	Omamori                                  = 1,
	OmamoriSlot                              = 2,
	ENoceOmamoriDrawingType_MAX              = 3,
};

// Enum GameNoce.ENocePerfTestState
// NumValues: 0x000A
enum class ENocePerfTestState : uint8
{
	InitialLoad                              = 0,
	ExtraCommand                             = 1,
	Check                                    = 2,
	MemReport                                = 3,
	InsightTrace                             = 4,
	FPS_CSV                                  = 5,
	SCREENSHOT                               = 6,
	Finished                                 = 7,
	Shutdown                                 = 8,
	MAX                                      = 9,
};

// Enum GameNoce.ENocePickupsType
// NumValues: 0x0003
enum class ENocePickupsType : uint8
{
	Consumable                               = 0,
	Weapon                                   = 1,
	ENocePickupsType_MAX                     = 2,
};

// Enum GameNoce.ENoceUIGetDLCRewardState
// NumValues: 0x0005
enum class ENoceUIGetDLCRewardState : uint8
{
	ShowNewOmamori                           = 0,
	InventoryNotEnough                       = 1,
	ShowNewConsumables                       = 2,
	End                                      = 3,
	ENoceUIGetDLCRewardState_MAX             = 4,
};

// Enum GameNoce.ETsukumoDefenseState
// NumValues: 0x0004
enum class ETsukumoDefenseState : uint8
{
	InCooldown                               = 0,
	InDefense                                = 1,
	InPause                                  = 2,
	ETsukumoDefenseState_MAX                 = 3,
};

// Enum GameNoce.ENoceUINotebookAnimType
// NumValues: 0x0003
enum class ENoceUINotebookAnimType : uint8
{
	TurnPage                                 = 0,
	ChangeCategory                           = 1,
	ENoceUINotebookAnimType_MAX              = 2,
};

// Enum GameNoce.ENoceNotebookBookmarkType
// NumValues: 0x0009
enum class ENoceNotebookBookmarkType : uint8
{
	Invalid                                  = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	D                                        = 4,
	E                                        = 5,
	F                                        = 6,
	G                                        = 7,
	ENoceNotebookBookmarkType_MAX            = 8,
};

// Enum GameNoce.ENoceNotebookBookmarkSocketType
// NumValues: 0x0006
enum class ENoceNotebookBookmarkSocketType : uint8
{
	Socket1                                  = 0,
	Socket2                                  = 1,
	Socket3                                  = 2,
	Socket4                                  = 3,
	Socket5                                  = 4,
	ENoceNotebookBookmarkSocketType_MAX      = 5,
};

// Enum GameNoce.ENoceUITitleFlowStep
// NumValues: 0x000A
enum class ENoceUITitleFlowStep : uint8
{
	Logo                                     = 0,
	InitialSetting                           = 1,
	Display                                  = 2,
	Brightness                               = 3,
	Contrast                                 = 4,
	Accessibility                            = 5,
	CompilePSO                               = 6,
	Warning                                  = 7,
	MainMenu                                 = 8,
	ENoceUITitleFlowStep_MAX                 = 9,
};

// Enum GameNoce.ENoceUICreditLayoutType
// NumValues: 0x0009
enum class ENoceUICreditLayoutType : uint8
{
	Invalid                                  = 0,
	Name                                     = 1,
	TitleName                                = 2,
	CenterName                               = 3,
	Organization                             = 4,
	Department                               = 5,
	Spacer                                   = 6,
	Logo1                                    = 7,
	ENoceUICreditLayoutType_MAX              = 8,
};

// Enum GameNoce.ENoceUICreditCommandType
// NumValues: 0x0004
enum class ENoceUICreditCommandType : uint8
{
	Wait                                     = 0,
	FadeIn                                   = 1,
	FadeOut                                  = 2,
	ENoceUICreditCommandType_MAX             = 3,
};

// Enum GameNoce.ENoceUICommonMessageType
// NumValues: 0x000D
enum class ENoceUICommonMessageType : uint8
{
	Invalid                                  = 0,
	AddDLC1                                  = 8,
	AddDLC2                                  = 7,
	AddDLC3                                  = 6,
	AddDLC4                                  = 5,
	LostDLC1                                 = 4,
	LostDLC2                                 = 3,
	LostDLC3                                 = 2,
	LostDLC4                                 = 1,
	WaitDownload                             = 11,
	SaveError                                = 12,
	GamepadDisconnected                      = 100,
	ENoceUICommonMessageType_MAX             = 101,
};

// Enum GameNoce.ENoceUIIconSize
// NumValues: 0x0003
enum class ENoceUIIconSize : uint8
{
	BigIconFirst                             = 0,
	SmallIconFirst                           = 1,
	ENoceUIIconSize_MAX                      = 2,
};

// Enum GameNoce.ENoceDataLayerRequestType
// NumValues: 0x0004
enum class ENoceDataLayerRequestType : uint8
{
	Progress                                 = 0,
	Trigger                                  = 1,
	Debug                                    = 2,
	ENoceDataLayerRequestType_MAX            = 3,
};

// Enum GameNoce.ENoceWorldTriggerLevel
// NumValues: 0x0003
enum class ENoceWorldTriggerLevel : uint8
{
	Default                                  = 0,
	DisableAll                               = 1,
	ENoceWorldTriggerLevel_MAX               = 2,
};

// ScriptStruct GameNoce.NoceCustomizeTableRowHandle
// 0x0008 (0x0008 - 0x0000)
struct FNoceCustomizeTableRowHandle
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCustomizeTableRowHandle;

// ScriptStruct GameNoce.NoceDialogDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceDialogDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceDialogDataRowHandle;

// ScriptStruct GameNoce.NoceAICommandDialogInfo
// 0x0008 (0x0008 - 0x0000)
struct FNoceAICommandDialogInfo final
{
public:
	struct FNoceDialogDataRowHandle               DialogRow;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAICommandDialogInfo;

// ScriptStruct GameNoce.NoceAICommandPlayDialogInfo
// 0x0008 (0x0008 - 0x0000)
struct FNoceAICommandPlayDialogInfo final
{
public:
	struct FNoceAICommandDialogInfo               DialogInfo;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAICommandPlayDialogInfo;

// ScriptStruct GameNoce.NoceMapDynamicIconArray
// 0x0010 (0x0010 - 0x0000)
struct FNoceMapDynamicIconArray final
{
public:
	TArray<ENoceDynamicMapIconIndexType>          IndexTypes;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceMapDynamicIconArray;

// ScriptStruct GameNoce.NoceWeaponDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceWeaponDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceWeaponDataRowHandle;

// ScriptStruct GameNoce.NocePickupsWeaponDataRow
// 0x0018 (0x0020 - 0x0008)
struct FNocePickupsWeaponDataRow final : public FTableRowBase
{
public:
	struct FNoceWeaponDataRowHandle               Weapon;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ANoceInteractableBase>      Interactable;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENocePickupsWeaponGroupType                   GroupType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePickupsWeaponDataRow;

// ScriptStruct GameNoce.NoceCineActorSeqEventData_Mat
// 0x0010 (0x0010 - 0x0000)
struct FNoceCineActorSeqEventData_Mat final
{
public:
	TArray<class UMaterialInterface*>             Mats;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCineActorSeqEventData_Mat;

// ScriptStruct GameNoce.NocePickupsDeploymentDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNocePickupsDeploymentDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNocePickupsDeploymentDataRowHandle;

// ScriptStruct GameNoce.NocePickupsPointDeployedData
// 0x0018 (0x0018 - 0x0000)
struct FNocePickupsPointDeployedData final
{
public:
	struct FNocePickupsDeploymentDataRowHandle    DeploymentRowName;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ActionLevelBitmask;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ANoceInteractableBase>      Interactable;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickupsPointDeployedData;

// ScriptStruct GameNoce.NoceAICommandEquipWeaponInfo
// 0x0001 (0x0001 - 0x0000)
struct FNoceAICommandEquipWeaponInfo final
{
public:
	ENoceWeaponType                               WeaponType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAICommandEquipWeaponInfo;

// ScriptStruct GameNoce.NoceBinkPreloadData
// 0x00D0 (0x00D0 - 0x0000)
struct FNoceBinkPreloadData final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBinkMediaPlayer>        EditorModeBinkPlayerSource;                        // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBinkMediaPlayer>        BinkPlayerSource;                                  // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BinkLinkUrl;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBinkSeekEveryFrame;                              // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceBinkPreloadData;

// ScriptStruct GameNoce.NoceSeqPreloadData
// 0x0030 (0x0030 - 0x0000)
struct FNoceSeqPreloadData final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreStreaming;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceSeqPreloadData;

// ScriptStruct GameNoce.NoceSeqOutfitPreloadData
// 0x0010 (0x0010 - 0x0000)
struct FNoceSeqOutfitPreloadData final
{
public:
	TArray<struct FNoceSeqPreloadData>            Preloads;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSeqOutfitPreloadData;

// ScriptStruct GameNoce.NoceSeqDataCmd
// 0x0008 (0x0008 - 0x0000)
struct FNoceSeqDataCmd final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGreaterThan;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AMD_PC_Only;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceSeqDataCmd;

// ScriptStruct GameNoce.NoceSeqData
// 0x01F8 (0x0200 - 0x0008)
struct FNoceSeqData final : public FTableRowBase
{
public:
	ENoceRoundType                                RoundType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndingType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LSAsset;                                           // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceBinkPreloadData                   BinkPreloadData;                                   // 0x0040(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    HinaMeshTypeRowData;                               // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ClawMeshTypeRowData;                               // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         WWISE_AK_EventDelayStartTick;                      // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENocePlayerOutfit, struct FNoceSeqOutfitPreloadData> PlayerOutfitPreload;                   // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FNoceSeqPreloadData>            DefaultPreloads;                                   // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataTable*>                     SoundTables;                                       // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForceEnableMotionBlur;                            // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FNoceSeqDataCmd>   ConsoleCmd;                                        // 0x01B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSeqData;

// ScriptStruct GameNoce.NoceAttackDeflectResult
// 0x0110 (0x0110 - 0x0000)
struct FNoceAttackDeflectResult final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x00F8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsWeaponBreak;                                     // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnviromentDeflect;                               // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicalSurface;                                   // 0x010A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAttackDeflectResult;

// ScriptStruct GameNoce.NoceConsumableDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceConsumableDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceConsumableDataRowHandle;

// ScriptStruct GameNoce.NocePickupsConsumableDeployDataRow
// 0x0010 (0x0018 - 0x0008)
struct FNocePickupsConsumableDeployDataRow final : public FTableRowBase
{
public:
	struct FNoceConsumableDataRowHandle           Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePickupsConsumableDeployDataRow;

// ScriptStruct GameNoce.NocePPVSet
// 0x0030 (0x0030 - 0x0000)
struct FNocePPVSet final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Data;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePPVSet;

// ScriptStruct GameNoce.NoceLevelSubRegionDataLayer
// 0x0070 (0x0070 - 0x0000)
struct FNoceLevelSubRegionDataLayer final
{
public:
	TArray<class UDataLayerAsset*>                ExtraSubDataLayers;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                SubdivisionDataLayers;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UDataLayerAsset*, int32>           ExtraSubdivisionDataLayers;                        // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLevelSubRegionDataLayer;

// ScriptStruct GameNoce.NoceLevelRegionDataLayer
// 0x0060 (0x0068 - 0x0008)
struct FNoceLevelRegionDataLayer final : public FTableRowBase
{
public:
	ENoceLevelRegion                              Region;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceLevelArea                                Area;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortName;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        ParentDataLayer;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        EnvDataLayer;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                EnvSubDataLayer;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceLevelSubRegionDataLayer>   EnvSubdivisionDataLayers;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        RVTDataLayer;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLevelRegionDataLayer;

// ScriptStruct GameNoce.NoceMapGeneralIconData
// 0x0038 (0x0038 - 0x0000)
struct FNoceMapGeneralIconData final
{
public:
	ENoceMapIconType                              IconType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIconRotate;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Yaw;                                               // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixedPixelSize;                                  // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IconSize;                                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceMapGeneralIconData;

// ScriptStruct GameNoce.ConsumableItemJumpSetting
// 0x000C (0x000C - 0x0000)
struct FConsumableItemJumpSetting final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FConsumableItemJumpSetting;

// ScriptStruct GameNoce.NocePickPreviewData
// 0x000C (0x000C - 0x0000)
struct FNocePickPreviewData final
{
public:
	ENoceInventoryType                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickPreviewData;

// ScriptStruct GameNoce.NoceAchievementSetting
// 0x0048 (0x0050 - 0x0008)
struct FNoceAchievementSetting final : public FTableRowBase
{
public:
	class FName                                   AchievementName;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RequireRecords;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RequireAllRecords;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnwantedRecords;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DevDescription;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlatformAchievementName;                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAchievementSetting;

// ScriptStruct GameNoce.NoceChapterJumpDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceChapterJumpDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceChapterJumpDataRowHandle;

// ScriptStruct GameNoce.NoceAILookAtSetting
// 0x0020 (0x0020 - 0x0000)
struct FNoceAILookAtSetting final
{
public:
	ENoceAILookAtType                             TargetType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLookDistance;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDeadZone;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadZoneAngle;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAILookAtSetting;

// ScriptStruct GameNoce.NoceSkyDomeSetting
// 0x01B8 (0x01C0 - 0x0008)
struct FNoceSkyDomeSetting final : public FTableRowBase
{
public:
	struct FLinearColor                           ColorMultiply;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissiveIntensity;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HorizonColor;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonGradient;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonHeight;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Skybox;                                            // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomRotator;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalDistribution;                            // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiseSky;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                FlowMap;                                           // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlowIntensity;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlowSpeed;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WindDirection;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindIntensity;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_RandomGleam;                                   // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                RandomGleam_GleamMask;                             // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RandomGleam_ColorMultiply;                         // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_GleamMaskCompared;                     // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_LightContrast;                         // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_LightBoost;                            // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_DeShowRate;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_Jitter;                                // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_Tilling;                               // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_GleamSpeed;                            // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomGleam_RandomGleamSpeed;                      // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RandomLight_Seed;                                  // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Sun;                                           // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunAlpha;                                          // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                CloudMask;                                         // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItIsSun;                                           // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunColor;                                          // 0x0154(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                SunMap;                                            // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunPosation;                                       // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunSize;                                           // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x01A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSkyDomeSetting;

// ScriptStruct GameNoce.NocePickupsWeaponDeployDataRow
// 0x0010 (0x0018 - 0x0008)
struct FNocePickupsWeaponDeployDataRow final : public FTableRowBase
{
public:
	struct FNoceWeaponDataRowHandle               Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePickupsWeaponDeployDataRow;

// ScriptStruct GameNoce.NocePickupsDeploySubDataRow
// 0x0028 (0x0030 - 0x0008)
struct FNocePickupsDeploySubDataRow final : public FTableRowBase
{
public:
	int32                                         ActionLevelBitmask;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNocePickupsConsumableDeployDataRow> Consumables;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNocePickupsWeaponDeployDataRow> Weapons;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickupsDeploySubDataRow;

// ScriptStruct GameNoce.NoceNotebookByRecord
// 0x0030 (0x0038 - 0x0008)
struct FNoceNotebookByRecord final : public FTableRowBase
{
public:
	TArray<class FName>                           RequireRecords;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NeedRecordNum;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NotebookID;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENoceNotebookType                             NotebookType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookByRecord;

// ScriptStruct GameNoce.NoceActionToKeyTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FNoceActionToKeyTableRow final : public FTableRowBase
{
public:
	TArray<ENoceInputKeyType>                     Types;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   GamepadKey;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ExtraGamepadKey;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   MouseKeyboardKey;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ExtraMouseKeyboardKey;                             // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   HiddenMouseKeyboardKey;                            // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceActionToKeyTableRow;

// ScriptStruct GameNoce.NoceNotebookHintIDData
// 0x0008 (0x0008 - 0x0000)
struct FNoceNotebookHintIDData final
{
public:
	int32                                         IDIndex;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceNotebookType                             Type;                                              // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookHintIDData;

// ScriptStruct GameNoce.NocePickupsDeploymentInfo
// 0x0008 (0x0008 - 0x0000)
struct FNocePickupsDeploymentInfo final
{
public:
	int32                                         ActionLevelBitmask;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickupsDeploymentInfo;

// ScriptStruct GameNoce.NocePickupsDeploymentInfoList
// 0x0010 (0x0010 - 0x0000)
struct FNocePickupsDeploymentInfoList final
{
public:
	TArray<struct FNocePickupsDeploymentInfo>     ActionLevelDeploymentList;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickupsDeploymentInfoList;

// ScriptStruct GameNoce.NocePrepRoomPickupsRuleInfo
// 0x0018 (0x0018 - 0x0000)
struct FNocePrepRoomPickupsRuleInfo final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePickupsPoint*                      PickupsPoint;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ANoceInteractableBase>      Interactable;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePrepRoomPickupsRuleInfo;

// ScriptStruct GameNoce.NocePrepRoomPickupsRuleList
// 0x0020 (0x0020 - 0x0000)
struct FNocePrepRoomPickupsRuleList final
{
public:
	TArray<struct FNocePrepRoomPickupsRuleInfo>   PrepRoomConsumablePickupsRuleList;                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNocePrepRoomPickupsRuleInfo>   PrepRoomWeaponPickupsRuleList;                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePrepRoomPickupsRuleList;

// ScriptStruct GameNoce.NoceAttackHitResult
// 0x0178 (0x0178 - 0x0000)
struct FNoceAttackHitResult final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ComboName;                                         // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackerToHitterAngle;                             // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceBodyPart                                 BodyPart;                                          // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BodyPartGroup;                                     // 0x0114(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloseHitLocation;                                  // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttackDirection;                                   // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthDamage;                                      // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceDamage;                                       // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSanityDamage;                                   // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSanityDamageToHealthDamageRatio;                // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaDamage;                                     // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceWince;                                      // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWinceType                                WinceType;                                         // 0x0165(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvertWinceDirection;                            // 0x0166(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167[0x1];                                      // 0x0167(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponName;                                        // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWeaponMotionType                         WeaponMotionType;                                  // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDeathType                                TriggerDeathType;                                  // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForDeflect;                                      // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAttackHitResult;

// ScriptStruct GameNoce.NoceUITutorialPopWindowPageData
// 0x0030 (0x0030 - 0x0000)
struct FNoceUITutorialPopWindowPageData final
{
public:
	struct FSoftObjectPath                        Image;                                             // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUITutorialPopWindowPageData;

// ScriptStruct GameNoce.NoceRecordBase
// 0x0048 (0x0050 - 0x0008)
struct FNoceRecordBase : public FTableRowBase
{
public:
	class FName                                   RecordName;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RiddleLevelBit;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionLevelBit;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundBitmask;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              TimeLimit;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ValidProgress;                                     // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          InheritToNextRound;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceRecordBase;

// ScriptStruct GameNoce.NoceCustomRecord
// 0x0020 (0x0070 - 0x0050)
struct FNoceCustomRecord final : public FNoceRecordBase
{
public:
	ENoceMiscAchievementType                      MiscType;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Key;                                               // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCustomRecord;

// ScriptStruct GameNoce.NoceSkyLightDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceSkyLightDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceSkyLightDataRowHandle;

// ScriptStruct GameNoce.NoceSkyLightProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceSkyLightProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSkyLightDataRowHandle             DataRow;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSkyLightProgress;

// ScriptStruct GameNoce.NoceUIPopWindowTypeData
// 0x0028 (0x0028 - 0x0000)
struct FNoceUIPopWindowTypeData final
{
public:
	TArray<class FText>                           ButtonTexts;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ButtonActionNames;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultIndex;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUIPopWindowTypeData;

// ScriptStruct GameNoce.NoceInventoryRecord
// 0x0038 (0x0088 - 0x0050)
struct FNoceInventoryRecord final : public FNoceRecordBase
{
public:
	int32                                         InventoryTypeBit;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotebookType;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceInventoryAchievementType                 EventType;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LetterGroup;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemName;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Unique;                                            // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInventoryRecord;

// ScriptStruct GameNoce.NoceAIActorPerceptionInfo
// 0x0020 (0x0020 - 0x0000)
struct FNoceAIActorPerceptionInfo final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAIStimulus>                    LastSensedStimuli;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bIsHostile : 1;                                    // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAIActorPerceptionInfo;

// ScriptStruct GameNoce.NoceAISenseInfo
// 0x0048 (0x0048 - 0x0000)
struct FNoceAISenseInfo final
{
public:
	struct FNoceAIActorPerceptionInfo             ActorInfo;                                         // 0x0000(0x0020)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 StimuliValues;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	float                                         HateValue;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAISenseInfo;

// ScriptStruct GameNoce.RigidBodyReference
// 0x0000 (0x0010 - 0x0010)
struct FRigidBodyReference final : public FAnimNodeReference
{
};
DUMPER7_ASSERTS_FRigidBodyReference;

// ScriptStruct GameNoce.NoceEnemyRecord
// 0x0038 (0x0088 - 0x0050)
struct FNoceEnemyRecord final : public FNoceRecordBase
{
public:
	TArray<class FName>                           EnemyType;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           WeaponType;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActorTags;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceEnemyRecord;

// ScriptStruct GameNoce.NoceCharPrecachingPSOMats
// 0x0010 (0x0010 - 0x0000)
struct FNoceCharPrecachingPSOMats final
{
public:
	TArray<class UMaterialInterface*>             Mats;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCharPrecachingPSOMats;

// ScriptStruct GameNoce.NoceProgressRecord
// 0x0010 (0x0060 - 0x0050)
struct FNoceProgressRecord final : public FNoceRecordBase
{
public:
	struct FGameplayTag                           StartProgress;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TargetProgress;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceProgressRecord;

// ScriptStruct GameNoce.NoceSSFSDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceSSFSDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceSSFSDataRowHandle;

// ScriptStruct GameNoce.NocePickupsRateDataRow
// 0x0010 (0x0018 - 0x0008)
struct FNocePickupsRateDataRow final : public FTableRowBase
{
public:
	TSubclassOf<class ANoceInteractableBase>      Interactable;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePickupsRateDataRow;

// ScriptStruct GameNoce.NoceRecordStatus
// 0x0038 (0x0038 - 0x0000)
struct FNoceRecordStatus final
{
public:
	class FName                                   RecordName;                                        // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceAchievementType                          Type;                                              // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InheritToNextRound;                                // 0x0009(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasStarted;                                        // 0x000A(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompleted;                                       // 0x000B(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasFailed;                                         // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              StartGameTime;                                     // 0x0010(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              EndGameTime;                                       // 0x0018(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCount;                                      // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetCount;                                       // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UniqueNames;                                       // 0x0028(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceRecordStatus;

// ScriptStruct GameNoce.NoceAICommandPlayAnimInfo
// 0x0028 (0x0028 - 0x0000)
struct FNoceAICommandPlayAnimInfo final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceAICommandDialogInfo               DialogInfo;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableBattleBGM;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAICommandPlayAnimInfo;

// ScriptStruct GameNoce.NoceChunkDataRow
// 0x0050 (0x0058 - 0x0008)
struct FNoceChunkDataRow final : public FTableRowBase
{
public:
	int32                                         SteamChunkID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EpicStoreChunkID;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PS5ChunkID;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XboxChunkID;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamDLCID;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EpicStoreDLCID;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PS5DLCID;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxDLCID;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceChunkDataRow;

// ScriptStruct GameNoce.NoceInventoryData
// 0x0004 (0x0004 - 0x0000)
struct FNoceInventoryData
{
public:
	int32                                         IDIndex;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInventoryData;

// ScriptStruct GameNoce.NoceAICommandMoveToInfo
// 0x0020 (0x0020 - 0x0000)
struct FNoceAICommandMoveToInfo final
{
public:
	class AActor*                                 MoveToTarget;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideMoveStopDistance;                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveStopDistance;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceRun;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAdjustWalkSpeed;                               // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceAICommandDialogInfo               DialogInfo;                                        // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAICommandMoveToInfo;

// ScriptStruct GameNoce.NoceCineActorSeqStopData
// 0x0005 (0x0005 - 0x0000)
struct FNoceCineActorSeqStopData final
{
public:
	bool                                          bDestroyWhenSequenceStop;                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAI;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollision;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMovement;                                   // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePushOffset;                                 // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCineActorSeqStopData;

// ScriptStruct GameNoce.NoceInventoryWeapon
// 0x0004 (0x0008 - 0x0004)
struct FNoceInventoryWeapon final : public FNoceInventoryData
{
public:
	float                                         Durability;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInventoryWeapon;

// ScriptStruct GameNoce.NocePickupsConsumableDataRow
// 0x0018 (0x0020 - 0x0008)
struct FNocePickupsConsumableDataRow final : public FTableRowBase
{
public:
	struct FNoceConsumableDataRowHandle           Consumable;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ANoceInteractableBase>      Interactable;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENocePickupsConsumableGroupType               GroupType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePickupsConsumableDataRow;

// ScriptStruct GameNoce.NocePickupsDeployDataRow
// 0x0030 (0x0038 - 0x0008)
struct FNocePickupsDeployDataRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  ProgressTag;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FNocePickupsDeploySubDataRow>   SubDatas;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickupsDeployDataRow;

// ScriptStruct GameNoce.AISpawnerEndAICommand
// 0x0002 (0x0002 - 0x0000)
struct FAISpawnerEndAICommand final
{
public:
	bool                                          EndAllCommands;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetBrainToActive;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FAISpawnerEndAICommand;

// ScriptStruct GameNoce.NoceFaithItemRecord
// 0x0010 (0x0010 - 0x0000)
struct FNoceFaithItemRecord final
{
public:
	class FName                                   RowNameID;                                         // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PickupActorName;                                   // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceFaithItemRecord;

// ScriptStruct GameNoce.AISpawnerAlertOverride
// 0x0008 (0x0008 - 0x0000)
struct FAISpawnerAlertOverride final
{
public:
	float                                         Alertness;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockAlertness;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FAISpawnerAlertOverride;

// ScriptStruct GameNoce.SanitySetting
// 0x0040 (0x0040 - 0x0000)
struct FSanitySetting final
{
public:
	float                                         Sanity;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftClassPath>                 SpawnEnemy;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ANoceAISpawner*>                 SpawnEnemySpawner;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEnemyNum;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnNumMin;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnNumMax;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnIntervalMin;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnIntervalMax;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickTimerWhenReachSpawnMax;                        // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFindPlayer;                                   // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FSanitySetting;

// ScriptStruct GameNoce.SanitySpawnProbabilitySetting
// 0x0008 (0x0008 - 0x0000)
struct FSanitySpawnProbabilitySetting final
{
public:
	float                                         Probability;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuaranteeTimes;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSanitySpawnProbabilitySetting;

// ScriptStruct GameNoce.SanitySpawnVolumeSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FSanitySpawnVolumeSetting final
{
public:
	TArray<struct FSanitySetting>                 SanitySettings;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseProbability;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSanitySpawnProbabilitySetting         ProbabilitySetting;                                // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              SpawnEQS;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpawnRangeMin;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpawnRangeMax;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockDistToAnother;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeleteDistance;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeoAudioPostEventParam                SpawnAudioEvent;                                   // 0x0040(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSanitySpawnVolumeSetting;

// ScriptStruct GameNoce.NoceSavePointUpgradeListItemData
// 0x0070 (0x0070 - 0x0000)
struct FNoceSavePointUpgradeListItemData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultBG;                                         // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImageMask;                                         // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImageBrush;                                        // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSavePointUpgradeListItemData;

// ScriptStruct GameNoce.NoceSavePointUpgradeUIData
// 0x0080 (0x0080 - 0x0000)
struct FNoceSavePointUpgradeUIData final
{
public:
	struct FNoceSavePointUpgradeListItemData      ListItemData;                                      // 0x0000(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PopWindowText;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSavePointUpgradeUIData;

// ScriptStruct GameNoce.NoceDynamicPickupsSubDataRow
// 0x0028 (0x0030 - 0x0008)
struct FNoceDynamicPickupsSubDataRow final : public FTableRowBase
{
public:
	int32                                         ActionLevelBitmask;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNocePickupsRateDataRow>        ConsumableRates;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNocePickupsRateDataRow>        WeaponRates;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDynamicPickupsSubDataRow;

// ScriptStruct GameNoce.NoceDynamicPickupsDataRow
// 0x0030 (0x0038 - 0x0008)
struct FNoceDynamicPickupsDataRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  ProgressTag;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FNoceDynamicPickupsSubDataRow>  SubDatas;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDynamicPickupsDataRow;

// ScriptStruct GameNoce.NoceActivityIDList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FNoceActivityIDList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceActivityIDList;

// ScriptStruct GameNoce.NoceNotebookTutorialContentRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookTutorialContentRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookTutorialContentRowHandle;

// ScriptStruct GameNoce.NoceBaseRecord
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FNoceBaseRecord
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceBaseRecord;

// ScriptStruct GameNoce.HitPerformComboParticleRotationMapUnit
// 0x0050 (0x0050 - 0x0000)
struct FHitPerformComboParticleRotationMapUnit final
{
public:
	TMap<class FName, struct FRotator>            HitPerformComboParticleRotationMap;                // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FHitPerformComboParticleRotationMapUnit;

// ScriptStruct GameNoce.NoceObjectRecord
// 0x0018 (0x0028 - 0x0010)
struct FNoceObjectRecord : public FNoceBaseRecord
{
public:
	class UClass*                                 Class;                                             // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceObjectRecord;

// ScriptStruct GameNoce.NoceCineCompPackageMats
// 0x0010 (0x0010 - 0x0000)
struct FNoceCineCompPackageMats final
{
public:
	TArray<class UMaterialInterface*>             Mats;                                              // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCineCompPackageMats;

// ScriptStruct GameNoce.NoceComponentRecord
// 0x0068 (0x0090 - 0x0028)
struct FNoceComponentRecord final : public FNoceObjectRecord
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CompTransform;                                     // 0x0030(0x0060)(BlueprintVisible, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceComponentRecord;

// ScriptStruct GameNoce.NoceActorRecord
// 0x0078 (0x00A0 - 0x0028)
struct FNoceActorRecord : public FNoceObjectRecord
{
public:
	bool                                          HiddenInGame;                                      // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExistForever;                                      // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0030(0x0060)(BlueprintVisible, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoceComponentRecord>           ComponentRecords;                                  // 0x0090(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceActorRecord;

// ScriptStruct GameNoce.NoceNotebookCharacterContentRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookCharacterContentRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookCharacterContentRowHandle;

// ScriptStruct GameNoce.NoceDynamicPickupsSaveData
// 0x0028 (0x0028 - 0x0000)
struct FNoceDynamicPickupsSaveData final
{
public:
	class FName                                   AttachParentName;                                  // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceChapterType                              ChapterType;                                       // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ANoceInteractableBase>      InteractableClass;                                 // 0x0010(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANocePickupsPoint*                      AttachParent;                                      // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANoceInteractableBase*                  Interactable;                                      // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDynamicPickupsSaveData;

// ScriptStruct GameNoce.EnemyGroupSpawnVFXSetting
// 0x0028 (0x0028 - 0x0000)
struct FEnemyGroupSpawnVFXSetting final
{
public:
	struct FSoftObjectPath                        NiagaraSystem;                                     // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideEnemyOnSpawn;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnhideTime;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FEnemyGroupSpawnVFXSetting;

// ScriptStruct GameNoce.EnemyGroupSpawnInfo
// 0x0058 (0x0058 - 0x0000)
struct FEnemyGroupSpawnInfo final
{
public:
	bool                                          IsMainEnemy;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         SpawnEnemy;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnemyGroupSpawnVFXSetting             SpawnVFX;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SpawnTime;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FEnemyGroupSpawnInfo;

// ScriptStruct GameNoce.NoceDynamicPickupsRuleInfo
// 0x0070 (0x0070 - 0x0000)
struct FNoceDynamicPickupsRuleInfo final
{
public:
	struct FGameplayTagContainer                  ProgressTag;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceConsumableDataRowHandle>   TargetConsumables;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InventoryConsumableMinCount;                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NearbyConsumableMinCount;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConsumableMinHealth;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConsumableCoolDown;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConsumableSearchDistance;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConsumableMinDistance;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventUsedConsumableMaxCount;                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMinDurability;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NearbyWeaponMinCount;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponCoolDown;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSearchDistance;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMinDistance;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventUsedWeaponMaxCount;                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDynamicPickupsRuleInfo;

// ScriptStruct GameNoce.NoceEndActivityInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FNoceEndActivityInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceEndActivityInfo;

// ScriptStruct GameNoce.NoceActivityHistory
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FNoceActivityHistory final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceActivityHistory;

// ScriptStruct GameNoce.NoceActorRefDepotData
// 0x0010 (0x0010 - 0x0000)
struct FNoceActorRefDepotData final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceActorRefDepotData;

// ScriptStruct GameNoce.NocePreloadInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FNocePreloadInstanceData final
{
public:
	TArray<class UTexture*>                       StremaingTextures;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePreloadInstanceData;

// ScriptStruct GameNoce.NoceAINoiseEvent
// 0x0048 (0x0048 - 0x0000)
struct FNoceAINoiseEvent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NoiseLocation;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAINoiseEvent;

// ScriptStruct GameNoce.AISpawnerGameplayTagTrigger
// 0x0018 (0x0018 - 0x0000)
struct FAISpawnerGameplayTagTrigger final
{
public:
	struct FGameplayTag                           SpawnTag;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DeleteTag;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KillTag;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FAISpawnerGameplayTagTrigger;

// ScriptStruct GameNoce.NoceAISenseWeight
// 0x0010 (0x0010 - 0x0000)
struct FNoceAISenseWeight final
{
public:
	TSubclassOf<class UAISense>                   Sense;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAISenseWeight;

// ScriptStruct GameNoce.NoceAIAlertStateSetting
// 0x0010 (0x0010 - 0x0000)
struct FNoceAIAlertStateSetting final
{
public:
	float                                         MaxAlert;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DistanceMultiplier;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAIAlertStateSetting;

// ScriptStruct GameNoce.NoceAIFaceToTargetInfo
// 0x0028 (0x0028 - 0x0000)
struct FNoceAIFaceToTargetInfo final
{
public:
	ENoceAIFaceToTargetType                       TargetType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceAIFaceToTargetFaceType                   FaceType;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAIFaceToTargetInfo;

// ScriptStruct GameNoce.AISpawnerPerceptionOverride
// 0x0010 (0x0010 - 0x0000)
struct FAISpawnerPerceptionOverride final
{
public:
	TSubclassOf<class UAISense>                   SenseClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FAISpawnerPerceptionOverride;

// ScriptStruct GameNoce.NoceAISpawnerEvent
// 0x0028 (0x0028 - 0x0000)
struct FNoceAISpawnerEvent final
{
public:
	ENoceAISpawnerEventType                       EventType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableThink;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAISpawnerPerceptionOverride>   PerceptionOverrides;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAISpawnerAlertOverride                AlertOverride;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAISpawnerEndAICommand                 EndAICommand;                                      // 0x0020(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAISpawnerEvent;

// ScriptStruct GameNoce.NoceAICommandMoveOnSplineInfo
// 0x0010 (0x0010 - 0x0000)
struct FNoceAICommandMoveOnSplineInfo final
{
public:
	class AActor*                                 TargetSpline;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceRun;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAdjustWalkSpeed;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceAICommandMoveOnSplineInfo;

// ScriptStruct GameNoce.NoceAICommandEnableLookAt
// 0x0028 (0x0028 - 0x0000)
struct FNoceAICommandEnableLookAt final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceAILookAtSetting                   LookAtSetting;                                     // 0x0008(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAICommandEnableLookAt;

// ScriptStruct GameNoce.NoceAICommand
// 0x00A8 (0x00A8 - 0x0000)
struct FNoceAICommand final
{
public:
	ENoceAICommandType                            CommandType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoEnd;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceAICommandMoveToInfo               MoveToInfo;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 GuideManager;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceAICommandPlayAnimInfo             PlayAnimInfo;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAISpawnerAlertOverride                AlertnessInfo;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceAICommandEquipWeaponInfo          EquipWeaponInfo;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceAICommandPlayDialogInfo           PlayDialogInfo;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceAICommandMoveOnSplineInfo         MoveOnSplineInfo;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceAICommandEnableLookAt             LookAtInfo;                                        // 0x0080(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAICommand;

// ScriptStruct GameNoce.SpawnerContainer
// 0x0010 (0x0010 - 0x0000)
struct FSpawnerContainer final
{
public:
	TArray<class ANoceAISpawner*>                 Entries;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSpawnerContainer;

// ScriptStruct GameNoce.NoceProjLaunchData
// 0x0058 (0x0058 - 0x0000)
struct FNoceProjLaunchData
{
public:
	float                                         LaunchTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartPosOffset;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPosOffset;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotOffset;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetupHomingTarget;                                 // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceProjLaunchData;

// ScriptStruct GameNoce.NoceProjLaunchData_CustomArc
// 0x0008 (0x0060 - 0x0058)
struct FNoceProjLaunchData_CustomArc final : public FNoceProjLaunchData
{
public:
	float                                         ArcParam;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceProjLaunchData_CustomArc;

// ScriptStruct GameNoce.NoceProjLaunchData_Suggest
// 0x0008 (0x0060 - 0x0058)
struct FNoceProjLaunchData_Suggest final : public FNoceProjLaunchData
{
public:
	float                                         OverrideLaunchSpeed;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FavorHighArc;                                      // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceProjLaunchData_Suggest;

// ScriptStruct GameNoce.NoceProjLaunchData_MovingTarget
// 0x0008 (0x0060 - 0x0058)
struct FNoceProjLaunchData_MovingTarget final : public FNoceProjLaunchData
{
public:
	float                                         TimeToTarget;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceProjLaunchData_MovingTarget;

// ScriptStruct GameNoce.NoceAnalyticsDataRow
// 0x0010 (0x0018 - 0x0008)
struct FNoceAnalyticsDataRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           StartSessionProgress;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EndSessionProgress;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAnalyticsDataRow;

// ScriptStruct GameNoce.NoceApplyGESetByCaller
// 0x0018 (0x0018 - 0x0000)
struct FNoceApplyGESetByCaller final
{
public:
	struct FGameplayTag                           SetByCallerTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceApplyGESetByCaller;

// ScriptStruct GameNoce.AttachmentSetting
// 0x0018 (0x0018 - 0x0000)
struct FAttachmentSetting final
{
public:
	class AActor*                                 AttachmentActor;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               LocationRule;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               RotationRule;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               ScaleRule;                                         // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FAttachmentSetting;

// ScriptStruct GameNoce.AttackTraceInfo
// 0x0020 (0x0020 - 0x0000)
struct FAttackTraceInfo final
{
public:
	bool                                          UseSocketInWeapon;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAttachedMesh;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachedMeshTag;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceAttackTraceType                          AttackTraceType;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FAttackTraceInfo;

// ScriptStruct GameNoce.NoceHitResult
// 0x0100 (0x0100 - 0x0000)
struct FNoceHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsForDeflect;                                      // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceHitResult;

// ScriptStruct GameNoce.BattleDialogLineSetting
// 0x0008 (0x0008 - 0x0000)
struct FBattleDialogLineSetting final
{
public:
	class FName                                   DialogRowName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FBattleDialogLineSetting;

// ScriptStruct GameNoce.BattleDialogHealthSetting
// 0x0010 (0x0010 - 0x0000)
struct FBattleDialogHealthSetting final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleDialogLineSetting               DialogLine;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Triggered;                                         // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FBattleDialogHealthSetting;

// ScriptStruct GameNoce.BattleDialogDamageSetting
// 0x0008 (0x0008 - 0x0000)
struct FBattleDialogDamageSetting final
{
public:
	struct FBattleDialogLineSetting               DialogLine;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FBattleDialogDamageSetting;

// ScriptStruct GameNoce.BodyPartGroupAngleSetting
// 0x0008 (0x0008 - 0x0000)
struct FBodyPartGroupAngleSetting final
{
public:
	float                                         MinAngle;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FBodyPartGroupAngleSetting;

// ScriptStruct GameNoce.BodyPartGroup
// 0x0058 (0x0058 - 0x0000)
struct FBodyPartGroup final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Health;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ENoceBodyPart>                         BodyParts;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CheckAngle;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyPartGroupAngleSetting             AngleSetting;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsBothDamage;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageMultiplier;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceMultiplier;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityMultiplier;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceDeflect;                                    // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeflectMultiplier;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeflectDamageMultiplier;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeflectWinceMultiplier;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeflectDurabilityMultiplier;                       // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            BreakEffect;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaySkipDeflectTraceOnHit;                         // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FBodyPartGroup;

// ScriptStruct GameNoce.BodyPartData
// 0x0001 (0x0001 - 0x0000)
struct FBodyPartData final
{
public:
	ENoceBodyPart                                 BodyPart;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FBodyPartData;

// ScriptStruct GameNoce.OmamoriJumpSetting
// 0x000C (0x000C - 0x0000)
struct FOmamoriJumpSetting final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoEquip;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FOmamoriJumpSetting;

// ScriptStruct GameNoce.NoceNotebookEnemyContentRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookEnemyContentRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookEnemyContentRowHandle;

// ScriptStruct GameNoce.NoceNotebookInfoContentRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookInfoContentRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookInfoContentRowHandle;

// ScriptStruct GameNoce.NoceNotebookPuzzleContentRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookPuzzleContentRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookPuzzleContentRowHandle;

// ScriptStruct GameNoce.NoceChapterJumpSettingTableRow
// 0x0108 (0x0110 - 0x0008)
struct FNoceChapterJumpSettingTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           JumpTag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllowRound;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           WeaponMain;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           WeaponDark;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseFogWeaponInventory;                             // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OmamoriSlotNum;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOmamoriJumpSetting>            Omamori;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KeyItem;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookCharacterContentRowHandle> CharacterNotebook;                         // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookEnemyContentRowHandle> EnemyNotebook;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookInfoContentRowHandle> InfoNotebook;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookPuzzleContentRowHandle> PuzzleNotebook;                               // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookTutorialContentRowHandle> TutorialNotebook;                           // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Letter;                                            // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FConsumableItemJumpSetting>     ConsumableItem;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ViewedItem;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENoceMapLocation                              MapStartLocation;                                  // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceMapLocation                              MapEndLocation;                                    // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllWeaponFog;                                      // 0x00E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllWeaponDark;                                     // 0x00E3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllOmamori;                                        // 0x00E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllKeyItem;                                        // 0x00E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllNotebook;                                       // 0x00E6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllLetter;                                         // 0x00E7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllConsumable;                                     // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSavePointOffering;                           // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSavePointFixWeapon;                          // 0x00EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSavePointUpgrade;                            // 0x00EB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaithValue;                                        // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyHealthLevel;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyStaminaLevel;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuySanityLevel;                                    // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearAllTutorial;                                  // 0x00FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENoceTutorialType>                     TutorialCompleted;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceChapterJumpSettingTableRow;

// ScriptStruct GameNoce.NoceCharMeshData
// 0x0090 (0x0098 - 0x0008)
struct FNoceCharMeshData final : public FTableRowBase
{
public:
	class FString                                 PartName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceClearMesh;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Mesh;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> Materials;                           // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCharMeshData;

// ScriptStruct GameNoce.NoceCharMeshDataRow
// 0x00B8 (0x00C0 - 0x0008)
struct FNoceCharMeshDataRow final : public FTableRowBase
{
public:
	struct FNoceCharMeshData                      Body;                                              // 0x0008(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FNoceCharMeshData>              Attachments;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCharMeshDataRow;

// ScriptStruct GameNoce.NoceRagdollMeshSetting
// 0x0020 (0x0020 - 0x0000)
struct FNoceRagdollMeshSetting final
{
public:
	class FString                                 MeshName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          OverridePhyAsset;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          OriginalPhyAsset;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceRagdollMeshSetting;

// ScriptStruct GameNoce.NoceCharPrecachingPSOData
// 0x0100 (0x0100 - 0x0000)
struct FNoceCharPrecachingPSOData final
{
public:
	TMap<class FName, struct FNoceCharPrecachingPSOMats> BodyPrecachingMats;                         // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FNoceCharPrecachingPSOMats> HeadPrecachingMats;                         // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FNoceCharPrecachingPSOMats> HairPrecachingMats;                         // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceCharPrecachingPSOData;

// ScriptStruct GameNoce.NoceChunkDebugData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FNoceChunkDebugData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceChunkDebugData;

// ScriptStruct GameNoce.NoceCineEventData
// 0x0005 (0x0005 - 0x0000)
struct FNoceCineEventData final
{
public:
	bool                                          bHiddenInGame;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreStreamTextures;                                // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeAfterDOFMat;                                // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldTransDissolve;                               // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWorldTransTimeGroup                      TimeGroup;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCineEventData;

// ScriptStruct GameNoce.NoceCommonUINavigateSet
// 0x0048 (0x0048 - 0x0000)
struct FNoceCommonUINavigateSet final
{
public:
	int32                                         SourceIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NavigateLeft;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NavigateRight;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NavigateUp;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NavigateDown;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceCommonUINavigateSet;

// ScriptStruct GameNoce.NoceUICustomGridNavigationSetting
// 0x0040 (0x0040 - 0x0000)
struct FNoceUICustomGridNavigationSetting final
{
public:
	TArray<int32>                                 UpIndex;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DownIndex;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RightIndex;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LeftIndex;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUICustomGridNavigationSetting;

// ScriptStruct GameNoce.ExportCutscenePivotDataType
// 0x0010 (0x0010 - 0x0000)
struct FExportCutscenePivotDataType final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          Actors;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FExportCutscenePivotDataType;

// ScriptStruct GameNoce.NoceDarknessDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceDarknessDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceDarknessDataRowHandle;

// ScriptStruct GameNoce.NoceDarknessProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceDarknessProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceDarknessDataRowHandle             SanityMax;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDarknessProgress;

// ScriptStruct GameNoce.NoceDebugLine
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FNoceDebugLine final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDebugLine;

// ScriptStruct GameNoce.NoceHitPerformUnit
// 0x0088 (0x0088 - 0x0000)
struct FNoceHitPerformUnit final
{
public:
	bool                                          ParticleAffectedByHitStop;                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayParticleAttatched;                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceHitPerformParticleRotationType           ParticleRotationType;                              // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        NiagaraSystem;                                     // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               AudioTriggerId;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageHitSwitch;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ForceFeedbackEffect;                               // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ShakeClass;                                        // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceHitPerformPostProcessType                PostProcessType;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitStopTimeDilation;                               // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopTimeDuration;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWoundType                                WoundType;                                         // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceHitPerformUnit;

// ScriptStruct GameNoce.NoceDeflectPerformSetting
// 0x00D8 (0x00D8 - 0x0000)
struct FNoceDeflectPerformSetting final
{
public:
	struct FNoceHitPerformUnit                    EnviromentDefaultUnit;                             // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FNoceHitPerformUnit> EnviromentPhysicalSurfaceUnitMap;             // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDeflectPerformSetting;

// ScriptStruct GameNoce.NoceDialogLine
// 0x0058 (0x0060 - 0x0008)
struct FNoceDialogLine final : public FTableRowBase
{
public:
	class FText                                   LineText;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ENoceDialogSpeaker                            Speaker;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDialogSpeakerName                        OverrideSpeakerName;                               // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostDialogPadding;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInstant;                                         // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImportant;                                       // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanOverlap;                                        // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockTags;                                         // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 VoiceID;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogLine;

// ScriptStruct GameNoce.NoceDialogAnimSetting
// 0x0058 (0x0058 - 0x0000)
struct FNoceDialogAnimSetting final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ENoceLanguageType, struct FSoftObjectPath> FacialMontage;                                   // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogAnimSetting;

// ScriptStruct GameNoce.NoceDialogSetElement
// 0x0070 (0x0070 - 0x0000)
struct FNoceDialogSetElement final
{
public:
	struct FDataTableRowHandle                    Line;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceDialogAnimSetting                 AnimSetting;                                       // 0x0018(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogSetElement;

// ScriptStruct GameNoce.NoceDialogSet
// 0x0020 (0x0028 - 0x0008)
struct FNoceDialogSet final : public FTableRowBase
{
public:
	TArray<struct FNoceDialogSetElement>          Lines;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENoceDialogSetType                            Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInstant;                                         // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImportant;                                       // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanOverlap;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolDownTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDialogSet;

// ScriptStruct GameNoce.NoceDialogSpeakerDataRow
// 0x0008 (0x0010 - 0x0008)
struct FNoceDialogSpeakerDataRow final : public FTableRowBase
{
public:
	ENoceDialogSpeaker                            SpeakerType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDialogSpeakerName                        DefaultName;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDialogSpeakerDataRow;

// ScriptStruct GameNoce.NoceDialogSpeakerNameDataRow
// 0x0028 (0x0030 - 0x0008)
struct FNoceDialogSpeakerNameDataRow final : public FTableRowBase
{
public:
	ENoceDialogSpeakerName                        SpeakerName;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CinePostfix;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   NameText;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogSpeakerNameDataRow;

// ScriptStruct GameNoce.NoceSelfTalkDataRow
// 0x0088 (0x0090 - 0x0008)
struct FNoceSelfTalkDataRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  Progress;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HasAdditionalTags;                                 // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithOutAdditionalTags;                             // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         EndingBitmask;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundBitmask;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownTimeMin;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownTimeMax;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingTime;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayRandom;                                        // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceDialogDataRowHandle>       Dialogs;                                           // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSelfTalkDataRow;

// ScriptStruct GameNoce.NoceDialogDuration
// 0x0008 (0x0010 - 0x0008)
struct FNoceDialogDuration final : public FTableRowBase
{
public:
	float                                         DurationJP;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationEN;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogDuration;

// ScriptStruct GameNoce.NoceDialogStyle
// 0x0008 (0x0010 - 0x0008)
struct FNoceDialogStyle final : public FTableRowBase
{
public:
	bool                                          UseItalic;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDialogStyle;

// ScriptStruct GameNoce.NoceDialogRequestSingle
// 0x00D8 (0x00D8 - 0x0000)
struct FNoceDialogRequestSingle final
{
public:
	class FName                                   TagOrId;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RandomSetId;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceDialogLine                        LineData;                                          // 0x0010(0x0060)(Edit, EditConst, NativeAccessSpecifierPublic)
	ENoceDialogSpeaker                            Speaker;                                           // 0x0070(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainTime;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSerial;                                          // 0x0078(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImportant;                                       // 0x0079(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceDialogAnimSetting                 AnimSetting;                                       // 0x0080(0x0058)(Edit, EditConst, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogRequestSingle;

// ScriptStruct GameNoce.NoceDialogCooldown
// 0x000C (0x000C - 0x0000)
struct FNoceDialogCooldown final
{
public:
	class FName                                   TagOrId;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogCooldown;

// ScriptStruct GameNoce.NoceDialogSerialSet
// 0x0038 (0x0038 - 0x0000)
struct FNoceDialogSerialSet final
{
public:
	class FName                                   TagOrId;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaitingList;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNoceDialogAnimSetting>         AnimSettingList;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   CurrentPlaying;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RandomSetId;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogSerialSet;

// ScriptStruct GameNoce.NoceDialogSpeakerInfo
// 0x0010 (0x0010 - 0x0000)
struct FNoceDialogSpeakerInfo final
{
public:
	TArray<class AActor*>                         SpeakerActors;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDialogSpeakerInfo;

// ScriptStruct GameNoce.NoceDialogPlayingAudioEvent
// 0x0018 (0x0018 - 0x0000)
struct FNoceDialogPlayingAudioEvent final
{
public:
	class UObject*                                AudioEvent;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDialogPlayingAudioEvent;

// ScriptStruct GameNoce.NoceDirLightDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceDirLightDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceDirLightDataRowHandle;

// ScriptStruct GameNoce.NoceDirLightProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceDirLightProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceDirLightDataRowHandle             DataRow;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDirLightProgress;

// ScriptStruct GameNoce.NoceEnemyComboSetting
// 0x0040 (0x0040 - 0x0000)
struct FNoceEnemyComboSetting final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackFloatRate;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wince;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceFloatRate;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSanity;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSanityFloatRate;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSanityToAttackRatio;                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stamina;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaFloatRate;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceWince;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWinceType                                WinceType;                                         // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvertWinceDirection;                            // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannelingAttack;                                // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDeathType                                DeathType;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            DebuffEffect;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeAxeDefensed;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeKatanaDefensed;                               // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckJustDodge;                                    // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInvincible;                                   // 0x003B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckOmamoriKagami;                                // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckSuperArmor;                                   // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckJustDodgeCounterDistance;                     // 0x003E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceEnemyComboSetting;

// ScriptStruct GameNoce.EnemyGroupSpawnTimeUpActionSetting
// 0x0008 (0x0008 - 0x0000)
struct FEnemyGroupSpawnTimeUpActionSetting final
{
public:
	EEnemyGroupTimeUpAction                       TimeUpAction;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FEnemyGroupSpawnTimeUpActionSetting;

// ScriptStruct GameNoce.EnemyGroupUnitContent
// 0x0030 (0x0030 - 0x0000)
struct FEnemyGroupUnitContent final
{
public:
	bool                                          IsMainEnemy;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         SpawnEnemy;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnNum;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FEnemyGroupUnitContent;

// ScriptStruct GameNoce.EnemyGroupSettingUnit
// 0x0010 (0x0010 - 0x0000)
struct FEnemyGroupSettingUnit final
{
public:
	TArray<struct FEnemyGroupUnitContent>         UnitContent;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FEnemyGroupSettingUnit;

// ScriptStruct GameNoce.EnemyGroupSetting
// 0x0020 (0x0020 - 0x0000)
struct FEnemyGroupSetting final
{
public:
	EEnemyGroupSpawnPattern                       SpawnPattern;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnInterval;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnedNumLimit;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEnemyGroupSettingUnit>         GroupUnits;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FEnemyGroupSetting;

// ScriptStruct GameNoce.EnemyGroupSpawnHintSound
// 0x0078 (0x0078 - 0x0000)
struct FEnemyGroupSpawnHintSound final
{
public:
	float                                         TriggerTimeBeforeEnd;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNeoAudioPostEventParam                SoundToPlay;                                       // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FEnemyGroupSpawnHintSound;

// ScriptStruct GameNoce.EnemyGroupSpawnSetting
// 0x0098 (0x0098 - 0x0000)
struct FEnemyGroupSpawnSetting final
{
public:
	struct FGameplayTag                           TriggerTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DefeatTag;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupTimeEasy;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupTimeHard;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEnemyGroupSpawnHintSound>      HintSounds;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GroupTimeUpTag;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnemyGroupSpawnTimeUpActionSetting    TimeUpActionSetting;                               // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EEnemyGroupSpawnFacing                        SpawnFacing;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              EnvQuery;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnemyGroupSpawnVFXSetting             SpawnVFX;                                          // 0x0050(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnemyGroupSetting                     GroupSetting;                                      // 0x0078(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FEnemyGroupSpawnSetting;

// ScriptStruct GameNoce.NoceEnvRequest
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FNoceEnvRequest final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceEnvRequest;

// ScriptStruct GameNoce.NocePPVInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FNocePPVInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePPVInfo;

// ScriptStruct GameNoce.NoceFogNiagaraRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceFogNiagaraRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceFogNiagaraRowHandle;

// ScriptStruct GameNoce.NoceFogNiagaraProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceFogNiagaraProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceFogNiagaraRowHandle               DataRow;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceFogNiagaraProgress;

// ScriptStruct GameNoce.NoceHeightFogDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceHeightFogDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceHeightFogDataRowHandle;

// ScriptStruct GameNoce.NoceExpFogProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceExpFogProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceHeightFogDataRowHandle            SanityMax;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceExpFogProgress;

// ScriptStruct GameNoce.NoceFootStepVFXUnit
// 0x0028 (0x0028 - 0x0000)
struct FNoceFootStepVFXUnit final
{
public:
	bool                                          RotateByCharacterVelocity;                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateByImpactNormal;                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        NiagaraSystem;                                     // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceFootStepVFXUnit;

// ScriptStruct GameNoce.NoceFootStepVFXSurfaceTypeMap
// 0x0050 (0x0050 - 0x0000)
struct FNoceFootStepVFXSurfaceTypeMap final
{
public:
	TMap<EPhysicalSurface, struct FNoceFootStepVFXUnit> SurfaceTypeMap;                              // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceFootStepVFXSurfaceTypeMap;

// ScriptStruct GameNoce.NoceRandomForceVectorData
// 0x0108 (0x0108 - 0x0000)
struct FNoceRandomForceVectorData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomVectorIndex;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Intensity;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Interval;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Frequency;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                min_0;                                             // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                max_0;                                             // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Exponent;                                          // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositiveMultiply;                                  // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NegativeMultiply;                                  // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DirectionMultiply;                                 // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceRandomForceVectorData;

// ScriptStruct GameNoce.NoceProgressHistory
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FNoceProgressHistory final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceProgressHistory;

// ScriptStruct GameNoce.NoceUIGeneralHintData
// 0x0030 (0x0030 - 0x0000)
struct FNoceUIGeneralHintData final
{
public:
	bool                                          IsTutorial;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HintText;                                          // 0x0008(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	ENoceNotebookType                             NotebookType;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NotebookID;                                        // 0x001C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAddNotebook;                                     // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUIGeneralHintData;

// ScriptStruct GameNoce.NoceHideActorSectionParams
// 0x0010 (0x0010 - 0x0000)
struct FNoceHideActorSectionParams final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          TargetActors;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceHideActorSectionParams;

// ScriptStruct GameNoce.NoceHideActorSectionTemplate
// 0x0010 (0x0030 - 0x0020)
struct FNoceHideActorSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FNoceHideActorSectionParams            Params;                                            // 0x0020(0x0010)(NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceHideActorSectionTemplate;

// ScriptStruct GameNoce.NoceWincePerformUnit
// 0x0038 (0x0038 - 0x0000)
struct FNoceWincePerformUnit final
{
public:
	bool                                          ParticleAffectedByHitStop;                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayParticleAttatched;                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        NiagaraSystem;                                     // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               AudioTriggerId;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HitStopTimeDilation;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopTimeDuration;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceWincePerformUnit;

// ScriptStruct GameNoce.NoceHitPerformSetting
// 0x00F8 (0x00F8 - 0x0000)
struct FNoceHitPerformSetting final
{
public:
	struct FNoceHitPerformUnit                    DefaultHitPerformUnit;                             // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FNoceHitPerformUnit> BodyPartGroupHitPerformUnitMap;                    // 0x0088(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        HitMoveCurve;                                      // 0x00D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceHitPerformSetting;

// ScriptStruct GameNoce.HitPerformSettingMapUnit
// 0x0050 (0x0050 - 0x0000)
struct FHitPerformSettingMapUnit final
{
public:
	TMap<class FName, struct FNoceHitPerformSetting> HitPerformSettingMap;                           // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FHitPerformSettingMapUnit;

// ScriptStruct GameNoce.HitPerformComboMapUnit
// 0x0050 (0x0050 - 0x0000)
struct FHitPerformComboMapUnit final
{
public:
	TMap<class FName, class FName>                HitPerformComboMap;                                // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FHitPerformComboMapUnit;

// ScriptStruct GameNoce.NoceLocationInfoDataDowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceLocationInfoDataDowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceLocationInfoDataDowHandle;

// ScriptStruct GameNoce.NoceInputGamepadTypeData
// 0x0038 (0x0038 - 0x0000)
struct FNoceInputGamepadTypeData final
{
public:
	ENoceInputGamepadType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   GamepadKey;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ExtraGamepadKey;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInputGamepadTypeData;

// ScriptStruct GameNoce.NoceInputGamepadTypeDataTableRow
// 0x0010 (0x0018 - 0x0008)
struct FNoceInputGamepadTypeDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FNoceInputGamepadTypeData>      Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInputGamepadTypeDataTableRow;

// ScriptStruct GameNoce.NoceInputMultiActionExtraGamepadData
// 0x0018 (0x0018 - 0x0000)
struct FNoceInputMultiActionExtraGamepadData final
{
public:
	ENoceInputGamepadType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GamepadActions;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInputMultiActionExtraGamepadData;

// ScriptStruct GameNoce.NoceInputMultiActionTableRow
// 0x0030 (0x0038 - 0x0008)
struct FNoceInputMultiActionTableRow final : public FTableRowBase
{
public:
	TArray<class FName>                           GamepadActions;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceInputMultiActionExtraGamepadData> ExtraGamepadActions;                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KeyboardActions;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInputMultiActionTableRow;

// ScriptStruct GameNoce.NoceInputQueueLongPressedUnit
// 0x0008 (0x0008 - 0x0000)
struct FNoceInputQueueLongPressedUnit final
{
public:
	ENoceInputAction                              InputAction;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OperateValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInputQueueLongPressedUnit;

// ScriptStruct GameNoce.NoceInputQueueUnit
// 0x0028 (0x0028 - 0x0000)
struct FNoceInputQueueUnit final
{
public:
	ENoceInputAction                              InputAction;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceInputOperateType                         InputOperate;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OperateValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMultipleLongPressedInputs;                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceInputQueueLongPressedUnit> MultipleLongPressedInputs;                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENocePlayerAnimStateType                      AnimStateWhenInputMatched;                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceInputQueueUnit;

// ScriptStruct GameNoce.NoceVolumetricFogDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceVolumetricFogDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceVolumetricFogDataRowHandle;

// ScriptStruct GameNoce.NoceWeaponData
// 0x0210 (0x0218 - 0x0008)
struct FNoceWeaponData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DescriptionDurability;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Thumbnail;                                         // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ThumbnailDurability;                               // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImageDurability;                                   // 0x0098(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ShortcutImage;                                     // 0x00B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ShortcutSelectImage;                               // 0x00D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ShortcutDurability;                                // 0x00F8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ShortcutSelectDurability;                          // 0x0118(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        RepairHaloImage;                                   // 0x0138(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GroundMeshActor;                                   // 0x0158(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         HandMeshActor;                                     // 0x0178(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        WeaponInfo;                                        // 0x0198(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRoundWeaponInfoMap;                             // 0x01B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENoceRoundType, struct FSoftObjectPath>  RoundWeaponInfoMap;                                // 0x01C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          CanBeBroken;                                       // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeBrokenInShiromukuRevive2;                     // 0x0211(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanDiscard;                                        // 0x0212(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanFocusAttack;                                    // 0x0213(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFocusAttackWhenFullCharged;                     // 0x0214(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCostDurability;                                 // 0x0215(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextRoundRemoveViewed;                             // 0x0216(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217[0x1];                                      // 0x0217(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceWeaponData;

// ScriptStruct GameNoce.NoceOmamoriData
// 0x0088 (0x0090 - 0x0008)
struct FNoceOmamoriData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HiddenDescription;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Thumbnail;                                         // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                 GameplayEffects;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceOmamoriData;

// ScriptStruct GameNoce.NoceUIDurabilityImageData
// 0x0088 (0x0088 - 0x0000)
struct FNoceUIDurabilityImageData final
{
public:
	int32                                         MaxDurabilityNum;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        BG;                                                // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Shadow;                                            // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Bar;                                               // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BGBar;                                             // 0x0068(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIDurabilityImageData;

// ScriptStruct GameNoce.NoceOfferingEffectData
// 0x0018 (0x0018 - 0x0000)
struct FNoceOfferingEffectData final
{
public:
	ENoceItemOfferingEffectType                   Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceOfferingEffectData;

// ScriptStruct GameNoce.NoceConsumableData
// 0x00D0 (0x00D8 - 0x0008)
struct FNoceConsumableData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HiddenDescription;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Thumbnail;                                         // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         MeshActor;                                         // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                 GameplayEffects;                                   // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENoceItemMotionType                           ItemMotionType;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceItemAttributeType                        ItemAttributeType;                                 // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemAttributeCheckType;                            // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaithValue;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceOfferingEffectData>        OfferingEffects;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStackNum;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponDurabilityRecoverRatio;                      // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceConsumableData;

// ScriptStruct GameNoce.NoceTeleportRequest
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FNoceTeleportRequest final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceTeleportRequest;

// ScriptStruct GameNoce.NoceKeyItemData
// 0x0078 (0x0080 - 0x0008)
struct FNoceKeyItemData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HiddenDescription;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Thumbnail;                                         // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoPickupWindow;                                    // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextRoundRemoved;                                  // 0x007D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceKeyItemData;

// ScriptStruct GameNoce.NoceLetterGroupData
// 0x0048 (0x0050 - 0x0008)
struct FNoceLetterGroupData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Thumbnail;                                         // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceLetterGroupData;

// ScriptStruct GameNoce.NoceTutorialDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceTutorialDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceTutorialDataRowHandle;

// ScriptStruct GameNoce.NoceLetterGroupDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceLetterGroupDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceLetterGroupDataRowHandle;

// ScriptStruct GameNoce.NoceLetterData
// 0x0050 (0x0058 - 0x0008)
struct FNoceLetterData final : public FTableRowBase
{
public:
	struct FNoceLetterGroupDataRowHandle          GroupId;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FText>                           Content;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextRoundRemoved;                                  // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceLetterData;

// ScriptStruct GameNoce.NoceUIEndingConditionData
// 0x0020 (0x0020 - 0x0000)
struct FNoceUIEndingConditionData final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<ENoceEndingType>                       VisibleAfterClearedEndings;                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIEndingConditionData;

// ScriptStruct GameNoce.NoceInventoryConsumable
// 0x0004 (0x0008 - 0x0004)
struct FNoceInventoryConsumable final : public FNoceInventoryData
{
public:
	int32                                         Quantity;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceInventoryConsumable;

// ScriptStruct GameNoce.NoceChapterInfoTableRow
// 0x0020 (0x0028 - 0x0008)
struct FNoceChapterInfoTableRow final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ENoceChapterType                              ChapterType;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ChapterTag;                                        // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceChapterInfoTableRow;

// ScriptStruct GameNoce.NoceNotebookCategoryData
// 0x0080 (0x0088 - 0x0008)
struct FNoceNotebookCategoryData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ENoceNotebookBookmarkType                     BookmarkType;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceNotebookBookmarkSocketType               SocketType;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        DefaultTexture;                                    // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectTexture;                                     // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectAddTexture;                                  // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingLeft;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookCategoryData;

// ScriptStruct GameNoce.NoceNotebookCharacterNameRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookCharacterNameRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookCharacterNameRowHandle;

// ScriptStruct GameNoce.NoceNotebookCharacterPageData
// 0x0050 (0x0058 - 0x0008)
struct FNoceNotebookCharacterPageData final : public FTableRowBase
{
public:
	struct FNoceNotebookCharacterNameRowHandle    Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         Widget;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceNotebookCharacterContentRowHandle Content1;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookCharacterContentRowHandle Content2;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookCharacterContentRowHandle Content3;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookCharacterContentRowHandle Content4;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PageTextureIndex;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookCharacterPageData;

// ScriptStruct GameNoce.NoceUIChooseSkinData
// 0x00E8 (0x00E8 - 0x0000)
struct FNoceUIChooseSkinData final
{
public:
	ENocePlayerOutfit                             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CharImage;                                         // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ChooseImage;                                       // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ChooseMiniImage;                                   // 0x0068(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GarnishBGImage;                                    // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GarnishAddImage;                                   // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CharLineImage;                                     // 0x00C8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIChooseSkinData;

// ScriptStruct GameNoce.NoceNotebookEnemyNameRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookEnemyNameRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookEnemyNameRowHandle;

// ScriptStruct GameNoce.NoceNotebookEnemyPageData
// 0x0050 (0x0058 - 0x0008)
struct FNoceNotebookEnemyPageData final : public FTableRowBase
{
public:
	struct FNoceNotebookEnemyNameRowHandle        Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         Widget;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceNotebookEnemyContentRowHandle     Content1;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookEnemyContentRowHandle     Content2;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookEnemyContentRowHandle     Content3;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookEnemyContentRowHandle     Content4;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PageTextureIndex;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookEnemyPageData;

// ScriptStruct GameNoce.NoceTutorialSettingData
// 0x0080 (0x0088 - 0x0008)
struct FNoceTutorialSettingData final : public FTableRowBase
{
public:
	ENoceTutorialType                             TutorialType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SimpleText;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   InstructorClass;                                   // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceTutorialType                             PreviousTutorial;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayStartSec;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoFinishSec;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayCloseHintSec;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookTutorialContentRowHandle> NotebookArray;                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookEnemyContentRowHandle> NotebookEnemy;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookCharacterContentRowHandle> NotebookCharacter;                         // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceTutorialSettingData;

// ScriptStruct GameNoce.NoceNotebookInfoNameRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookInfoNameRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookInfoNameRowHandle;

// ScriptStruct GameNoce.NoceNotebookInfoPageData
// 0x0050 (0x0058 - 0x0008)
struct FNoceNotebookInfoPageData final : public FTableRowBase
{
public:
	struct FNoceNotebookInfoNameRowHandle         Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         Widget;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceNotebookInfoContentRowHandle      Content1;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookInfoContentRowHandle      Content2;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookInfoContentRowHandle      Content3;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookInfoContentRowHandle      Content4;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PageTextureIndex;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookInfoPageData;

// ScriptStruct GameNoce.NoceInputActionRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceInputActionRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceInputActionRowHandle;

// ScriptStruct GameNoce.NoceUIGuideData
// 0x0018 (0x0018 - 0x0000)
struct FNoceUIGuideData final
{
public:
	struct FNoceInputActionRowHandle              InputActionName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIGuideData;

// ScriptStruct GameNoce.NoceUIGuideDataTableRow
// 0x0020 (0x0028 - 0x0008)
struct FNoceUIGuideDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FNoceUIGuideData>               Guides;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceUIGuideData>               LeftGuides;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIGuideDataTableRow;

// ScriptStruct GameNoce.NoceNotebookPuzzleNameRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookPuzzleNameRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookPuzzleNameRowHandle;

// ScriptStruct GameNoce.NoceNotebookPuzzlePageData
// 0x0048 (0x0050 - 0x0008)
struct FNoceNotebookPuzzlePageData final : public FTableRowBase
{
public:
	int32                                         RiddleLevelBitmask;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceNotebookPuzzleNameRowHandle       Category;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         Widget;                                            // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookPuzzleContentRowHandle> Contents;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageTextureIndex;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookPuzzlePageData;

// ScriptStruct GameNoce.NoceUIKeyBindingFixedData
// 0x0028 (0x0030 - 0x0008)
struct FNoceUIKeyBindingFixedData final : public FTableRowBase
{
public:
	class FText                                   OptionNameText;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNoceInputActionRowHandle              ActionName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           InvalidKeys;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIKeyBindingFixedData;

// ScriptStruct GameNoce.NoceNotebookTutorialNameRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookTutorialNameRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookTutorialNameRowHandle;

// ScriptStruct GameNoce.NoceNotebookTutorialPageData
// 0x0050 (0x0058 - 0x0008)
struct FNoceNotebookTutorialPageData final : public FTableRowBase
{
public:
	struct FNoceNotebookTutorialNameRowHandle     Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         Widget;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceNotebookTutorialContentRowHandle  Content1;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookTutorialContentRowHandle  Content2;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookTutorialContentRowHandle  Content3;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceNotebookTutorialContentRowHandle  Content4;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PageTextureIndex;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookTutorialPageData;

// ScriptStruct GameNoce.NoceDynamicMapIconData
// 0x0002 (0x0002 - 0x0000)
struct FNoceDynamicMapIconData final
{
public:
	ENoceDynamicMapIconChapterType                ChapterType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDynamicMapIconIndexType                  IndexType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDynamicMapIconData;

// ScriptStruct GameNoce.NoceMissionHintTableRow
// 0x00C0 (0x00C8 - 0x0008)
struct FNoceMissionHintTableRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  ProgressTagContainer;                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          NeedMatchExact;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalProgressTagContainer;                    // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          NeedMatchAllAdditional;                            // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedAdditionalNum;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<ENoceDynamicMapIconType>               AddMapIconList;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ENoceDynamicMapIconType>               RemoveMapIconList;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceDynamicMapIconData>        AddDynamicMapIconList;                             // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceDynamicMapIconData>        RemoveDynamicMapIconList;                          // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ActivityObjectId;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CompleteActivityObjectIdList;                      // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceMissionHintTableRow;

// ScriptStruct GameNoce.NoceNotebookContentData
// 0x0038 (0x0040 - 0x0008)
struct FNoceNotebookContentData final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowUpdate;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookContentData;

// ScriptStruct GameNoce.NoceUIPCInputImageTableRow
// 0x0020 (0x0028 - 0x0008)
struct FNoceUIPCInputImageTableRow final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        KeyboardAndMouse;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIPCInputImageTableRow;

// ScriptStruct GameNoce.NoceNotebookMultiContentData
// 0x0028 (0x0030 - 0x0008)
struct FNoceNotebookMultiContentData final : public FTableRowBase
{
public:
	TArray<class FText>                           Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                Image;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NextRoundRemoved;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceNotebookMultiContentData;

// ScriptStruct GameNoce.NoceExpandInventoryData
// 0x0008 (0x0010 - 0x0008)
struct FNoceExpandInventoryData final : public FTableRowBase
{
public:
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceExpandInventoryData;

// ScriptStruct GameNoce.NoceSweetLightDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceSweetLightDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceSweetLightDataRowHandle;

// ScriptStruct GameNoce.NoceLanternProgress
// 0x0038 (0x0038 - 0x0000)
struct FNoceLanternProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           LanternPointDataRow;                               // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           LanternVolumeDataRow;                              // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           LanternMainDataRow;                                // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLanternProgress;

// ScriptStruct GameNoce.NoceUIKeyItemEmaData
// 0x0020 (0x0028 - 0x0008)
struct FNoceUIKeyItemEmaData final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        Texture;                                           // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIKeyItemEmaData;

// ScriptStruct GameNoce.NoceExpFogSetting
// 0x00D0 (0x00D8 - 0x0008)
struct FNoceExpFogSetting final : public FTableRowBase
{
public:
	float                                         FogDensity;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringLuminance;                          // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           InscatteringColorCubemap;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InscatteringColorCubemapAngle;                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InscatteringTextureTint;                           // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullyDirectionalInscatteringColorDistance;         // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonDirectionalInscatteringColorDistance;           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringLuminance;                  // 0x0064(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStaticLightingScatteringIntensity;    // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogStartDistance;                        // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyAtmosphereAmbientContributionColorScale;        // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyInSightDistance;                              // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceExpFogSetting;

// ScriptStruct GameNoce.NoceVolumetricFogSetting
// 0x00C8 (0x00D0 - 0x0008)
struct FNoceVolumetricFogSetting final : public FTableRowBase
{
public:
	struct FLinearColor                           LightColor;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Emissive;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extinction;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogPower;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                VolumeTex;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasicFogPow;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasicFog_Size;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BasicFog_Speed;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFogPow;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFog_Size;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NoiseFog_Speed;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexturePower;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend_MaxDistance;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blend_MinDistance;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BlendColor;                                        // 0x008C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendScale;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearFade_FogCope;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearFade_Length;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearFade_Offset;                                   // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog_HighPower;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog_HighScale;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DarkColor;                                         // 0x00B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorShadow;                                       // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorShadowPow;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceVolumetricFogSetting;

// ScriptStruct GameNoce.NoceDirectionalLightSetting
// 0x0058 (0x0060 - 0x0008)
struct FNoceDirectionalLightSetting final : public FTableRowBase
{
public:
	struct FRotator                               Rotation;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IndirectLightingIntensity;                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDynamicShadowCascades;                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistributionExponent;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionFraction;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFadeoutFraction;                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDirectionalLightSetting;

// ScriptStruct GameNoce.NoceSpotLightSetting
// 0x0040 (0x0048 - 0x0008)
struct FNoceSpotLightSetting final : public FTableRowBase
{
public:
	bool                                          Enable;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InnerConeAngle;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftSourceRadius;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x002C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLightFadeFlickerWhenLocked;                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceSpotLightSetting;

// ScriptStruct GameNoce.NoceSkyLightSetting
// 0x0060 (0x0068 - 0x0008)
struct FNoceSkyLightSetting final : public FTableRowBase
{
public:
	bool                                          bRealTimeCapture;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityScale;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTextureCube>            Cubemap;                                           // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CubemapResolution;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceSkyLightSetting;

// ScriptStruct GameNoce.NoceUILyricCreditData
// 0x0018 (0x0020 - 0x0008)
struct FNoceUILyricCreditData final : public FTableRowBase
{
public:
	ENoceUICreditCommandType                      CommandType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeUntilNextCommand;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUILyricCreditData;

// ScriptStruct GameNoce.NoceSkyAtmosphereSetting
// 0x0090 (0x0098 - 0x0008)
struct FNoceSkyAtmosphereSetting final : public FTableRowBase
{
public:
	float                                         BottomRadius;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GroundAlbedo;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringFactor;                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighScatteringScale;                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x004C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherAbsorptionScale;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherAbsorption;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmittanceMinLightElevationAngle;               // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPerspectiveStartDepth;                       // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSkyAtmosphereSetting;

// ScriptStruct GameNoce.WaveEnemySetting
// 0x0010 (0x0010 - 0x0000)
struct FWaveEnemySetting final
{
public:
	class ANoceAISpawner*                         Spawner;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDelay;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FWaveEnemySetting;

// ScriptStruct GameNoce.WaveSpawnWaveElement
// 0x0018 (0x0018 - 0x0000)
struct FWaveSpawnWaveElement final
{
public:
	int32                                         KilledNumToNextWave;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWaveEnemySetting>              WaveEnemies;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FWaveSpawnWaveElement;

// ScriptStruct GameNoce.WaveSpawnSetting
// 0x0020 (0x0020 - 0x0000)
struct FWaveSpawnSetting final
{
public:
	uint8                                         ActionLevel;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxEnemyNum;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceRevivalTime;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWaveSpawnWaveElement>          Waves;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FWaveSpawnSetting;

// ScriptStruct GameNoce.NoceDarknessSetting
// 0x0020 (0x0028 - 0x0008)
struct FNoceDarknessSetting final : public FTableRowBase
{
public:
	float                                         Alpha;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DarknessColor;                                     // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeContrast;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectOffset;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDarknessSetting;

// ScriptStruct GameNoce.NoceSSFSSetting
// 0x0008 (0x0010 - 0x0008)
struct FNoceSSFSSetting final : public FTableRowBase
{
public:
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSSFSSetting;

// ScriptStruct GameNoce.NoceUIFontMaterialStruct
// 0x0028 (0x0028 - 0x0000)
struct FNoceUIFontMaterialStruct final
{
public:
	TSoftObjectPtr<class UObject>                 FontMaterial;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIFontMaterialStruct;

// ScriptStruct GameNoce.NoceWindSetting
// 0x0040 (0x0048 - 0x0008)
struct FNoceWindSetting final : public FTableRowBase
{
public:
	float                                         WindSpeed;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCurveFloat*>                    WindSpeedCurves;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               WindDirection;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WindDirectionChange_Min;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirectionChange_Max;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAudioLevel;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchTime;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceWindSetting;

// ScriptStruct GameNoce.NoceLanternNiagaraSetting
// 0x0050 (0x0058 - 0x0008)
struct FNoceLanternNiagaraSetting final : public FTableRowBase
{
public:
	bool                                          UseFlickerLight;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlickerMagnitude;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlickerOffset;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlickeSpeed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance_Min;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Distance_Min_Color;                                // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance_Max;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Distance_Max_Color;                                // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance_Max_Size;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDistance;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDistanceFade;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceLanternNiagaraSetting;

// ScriptStruct GameNoce.NoceUIImageCreditData
// 0x0028 (0x0030 - 0x0008)
struct FNoceUIImageCreditData final : public FTableRowBase
{
public:
	ENoceUICreditCommandType                      CommandType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeUntilNextCommand;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIImageCreditData;

// ScriptStruct GameNoce.NoceFogNiagaraSetting
// 0x0080 (0x0088 - 0x0008)
struct FNoceFogNiagaraSetting final : public FTableRowBase
{
public:
	struct FLinearColor                           EnvParFogColor;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvParFogSpawn;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvParFogActivate;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvParFogFlowSpeed;                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllFog_Alpha;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllFog_Speed;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllFog_LinearSwitchNPC_1on;                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AllFog_LinearForceAxis;                            // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HellBlend_Alpha;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HellBlend_Speed;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HellBlend_LinearSwitchNPC_1on;                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HellBlend_LinearForceAxis;                         // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HellSpeedReplace_1on;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HellNoiseFogEdge_Speed;                            // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HellNoiseFog_Speed;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceFogNiagaraSetting;

// ScriptStruct GameNoce.NoceLumenTranslucencySetting
// 0x0008 (0x0010 - 0x0008)
struct FNoceLumenTranslucencySetting final : public FTableRowBase
{
public:
	int32                                         NumPasses;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRayIntensity;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLumenTranslucencySetting;

// ScriptStruct GameNoce.NoceFastTravelPoint
// 0x0020 (0x0028 - 0x0008)
struct FNoceFastTravelPoint final : public FTableRowBase
{
public:
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldTriggerGateway;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceFastTravelPoint;

// ScriptStruct GameNoce.NoceLightFadeParameter
// 0x0008 (0x0008 - 0x0000)
struct FNoceLightFadeParameter final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLightFadeParameter;

// ScriptStruct GameNoce.NoceLightFadeFullSetting
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FNoceLightFadeFullSetting final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceLightFadeFullSetting;

// ScriptStruct GameNoce.NoceRadioSetting
// 0x0040 (0x0040 - 0x0000)
struct FNoceRadioSetting final
{
public:
	int32                                         RoundBitmask;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceDialogDataRowHandle               DialogRow;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceDialogDataRowHandle               EndingDialogRow;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NoiseScaleFactor;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceRadioSetting;

// ScriptStruct GameNoce.NoceWeaponInfoSetting
// 0x0018 (0x0018 - 0x0000)
struct FNoceWeaponInfoSetting final
{
public:
	float                                         DurabilityRatioRange;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeflectRatio;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackMultiplier;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraAttackMultiplier;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceMultiplier;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowOnUI;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceWeaponInfoSetting;

// ScriptStruct GameNoce.NoceRadioDialogDelayData
// 0x0010 (0x0010 - 0x0000)
struct FNoceRadioDialogDelayData final
{
public:
	struct FNoceDialogDataRowHandle               DialogRow;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceRadioDialogDelayData;

// ScriptStruct GameNoce.NoceEnvSubSetting
// 0x0004 (0x0004 - 0x0000)
struct FNoceEnvSubSetting final
{
public:
	int32                                         SubdivisionBitmask;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceEnvSubSetting;

// ScriptStruct GameNoce.NoceDataLayerRequest
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FNoceDataLayerRequest final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceDataLayerRequest;

// ScriptStruct GameNoce.NoceLevelAreaSetting
// 0x0040 (0x0040 - 0x0000)
struct FNoceLevelAreaSetting final
{
public:
	EDataLayerRuntimeState                        Env;                                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDataLayerRuntimeState>                Subs;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceEnvSubSetting>             Subdivision;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDataLayerRuntimeState>                Extras;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        RVT;                                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceLevelAreaSetting;

// ScriptStruct GameNoce.WorldTriggerTableRow
// 0x00F0 (0x00F8 - 0x0008)
struct FWorldTriggerTableRow final : public FTableRowBase
{
public:
	TMap<ENoceLevelRegion, struct FNoceLevelAreaSetting> RuntimeStateMap;                            // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class UDataLayerAsset*, EDataLayerRuntimeState> ExtraStateLayers;                           // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FName>        ChapterAlters;                                     // 0x00A8(0x0050)(Edit, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FWorldTriggerTableRow;

// ScriptStruct GameNoce.ProgressCondition
// 0x0080 (0x0080 - 0x0000)
struct FProgressCondition final
{
public:
	struct FGameplayTagContainer                  ProgressCondition;                                 // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ExactProgress;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  NeedAdditionalTag;                                 // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          NeedAllAddTag;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedAddTagNum;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithoutAdditionalTag;                              // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          WithoutAllTag;                                     // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndingBitmask;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundBitmask;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FProgressCondition;

// ScriptStruct GameNoce.NoceLightRigidBodyWireData
// 0x0048 (0x0048 - 0x0000)
struct FNoceLightRigidBodyWireData final
{
public:
	float                                         WindSpeed;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           WireMesh;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLightRigidBodyWireData;

// ScriptStruct GameNoce.NoceLightSavableData
// 0x00A0 (0x00A0 - 0x0000)
struct FNoceLightSavableData final
{
public:
	bool                                          bSaved;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Save_Intensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_IndirectLightingIntensity;                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_VolumetricScatteringIntensity;                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Save_LightColor;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_Temperature;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bUseTemperature;                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Save_LightFunctionScale;                           // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_LightFunctionFadeDistance;                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_LightFunctionDisabledBrightness;              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bAffectDynamicIndirectLighting;               // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bAffectTranslucentLighting;                   // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bTransmission;                                // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bEnableLightShaftBloom;                       // 0x0043(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_BloomScale;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_BloomThreshold;                               // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_BloomMaxBrightness;                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Save_BloomTint;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bUseIESBrightness;                            // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Save_IESBrightnessScale;                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_ShadowBias;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_ShadowSlopeBias;                              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_SpecularScale;                                // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bForceCachedShadowsForMovablePrimitives;      // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bChannel0;                                    // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bChannel1;                                    // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bChannel2;                                    // 0x006B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save_bUseInverseSquaredFalloff;                    // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Save_LightFalloffExponent;                         // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_SourceRadius;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_SoftSourceRadius;                             // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_SourceLength;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_AttenuationRadius;                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Save_IntensityUnits;                               // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Save_InnerConeAngle;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_OuterConeAngle;                               // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_SourceWidth;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_SourceHeight;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_BarnDoorAngle;                                // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Save_BarnDoorLength;                               // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLightSavableData;

// ScriptStruct GameNoce.LinkConstPositionData
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FLinkConstPositionData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FLinkConstPositionData;

// ScriptStruct GameNoce.NoceWinceTypePrioritySetting
// 0x0004 (0x0004 - 0x0000)
struct FNoceWinceTypePrioritySetting final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceWinceTypePrioritySetting;

// ScriptStruct GameNoce.NoceLumenTranslucencyDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceLumenTranslucencyDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceLumenTranslucencyDataRowHandle;

// ScriptStruct GameNoce.NoceLumenTranslucencyProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceLumenTranslucencyProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceLumenTranslucencyDataRowHandle    Data;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLumenTranslucencyProgress;

// ScriptStruct GameNoce.NoceMapLocationGroupData
// 0x0028 (0x0028 - 0x0000)
struct FNoceMapLocationGroupData final
{
public:
	ENoceMapLocationGroup                         Group;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              WorldCenterPos;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HalfRange;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceMapLocationGroupData;

// ScriptStruct GameNoce.NoceAreaData
// 0x00E0 (0x00E0 - 0x0000)
struct FNoceAreaData final
{
public:
	ENoceMapArea                                  Area;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceMapArea                                  ScaleArea;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldCenterPos;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              HalfRange;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMultiFloor;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FloorName;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              FloorHeightRange;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ENoceMapArea>                          FloorAreas;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WorldToTextureFactor;                              // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScale;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPlayerScale;                                // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPlayerScale;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayerScale;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconScale;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ForceShowTag;                                      // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ForceHideTag;                                      // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FNoceMapLocationGroupData>      LocationGroupDatas;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceAreaData;

// ScriptStruct GameNoce.NoceMapTabData
// 0x0018 (0x0018 - 0x0000)
struct FNoceMapTabData final
{
public:
	TArray<class UNoceMapAreaWidget*>             Widgets;                                           // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CurrentIndex;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceMapTabData;

// ScriptStruct GameNoce.NoceMoonLightProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceMoonLightProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           SanityMax;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceMoonLightProgress;

// ScriptStruct GameNoce.NoceNavLinkJumpSetting
// 0x000C (0x000C - 0x0000)
struct FNoceNavLinkJumpSetting final
{
public:
	float                                         DurationMultipiler;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMultipiler;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceMultipiler;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceNavLinkJumpSetting;

// ScriptStruct GameNoce.NoceNoteSectionParams
// 0x0010 (0x0010 - 0x0000)
struct FNoceNoteSectionParams final
{
public:
	class FText                                   MainText;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceNoteSectionParams;

// ScriptStruct GameNoce.NoceNoteSectionTemplate
// 0x0010 (0x0030 - 0x0020)
struct FNoceNoteSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FNoceNoteSectionParams                 Params;                                            // 0x0020(0x0010)(NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceNoteSectionTemplate;

// ScriptStruct GameNoce.NoceLanternNiagaraRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceLanternNiagaraRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceLanternNiagaraRowHandle;

// ScriptStruct GameNoce.NoceNPCLanternProgress
// 0x0030 (0x0030 - 0x0000)
struct FNoceNPCLanternProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           LanternLightDataRow;                               // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceLanternNiagaraRowHandle           NiagaraDataRow;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceNPCLanternProgress;

// ScriptStruct GameNoce.NoceCharacterRecord
// 0x0020 (0x00C0 - 0x00A0)
struct FNoceCharacterRecord final : public FNoceActorRecord
{
public:
	float                                         Health;                                            // 0x00A0(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor;                                             // 0x00A4(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LogicalName;                                       // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Alive;                                             // 0x00B0(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceCharacterRecord;

// ScriptStruct GameNoce.NoceInheritedAIRecord
// 0x0010 (0x0010 - 0x0000)
struct FNoceInheritedAIRecord final
{
public:
	class FName                                   InheritedTag;                                      // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthRatio;                                       // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDead;                                             // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceInheritedAIRecord;

// ScriptStruct GameNoce.NoceOmamoriDrawingInfo
// 0x000C (0x000C - 0x0000)
struct FNoceOmamoriDrawingInfo final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceOmamoriDrawingInfo;

// ScriptStruct GameNoce.NoceOmamoriDrawingInfoList
// 0x0010 (0x0010 - 0x0000)
struct FNoceOmamoriDrawingInfoList final
{
public:
	TArray<struct FNoceOmamoriDrawingInfo>        OmamoriList;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceOmamoriDrawingInfoList;

// ScriptStruct GameNoce.NocePickMessageData
// 0x000C (0x000C - 0x0000)
struct FNocePickMessageData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceInventoryType                            Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePickMessageData;

// ScriptStruct GameNoce.NocePickupCategoryElement
// 0x0010 (0x0010 - 0x0000)
struct FNocePickupCategoryElement final
{
public:
	TArray<class FName>                           PickupNames;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePickupCategoryElement;

// ScriptStruct GameNoce.NoceDynamicPickupsRuleList
// 0x0010 (0x0010 - 0x0000)
struct FNoceDynamicPickupsRuleList final
{
public:
	TArray<struct FNoceDynamicPickupsRuleInfo>    DynamicPickupsRuleList;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceDynamicPickupsRuleList;

// ScriptStruct GameNoce.NocePrepRoomPickupsRuleData
// 0x0050 (0x0050 - 0x0000)
struct FNocePrepRoomPickupsRuleData final
{
public:
	TMap<ENoceActionLevel, struct FNocePrepRoomPickupsRuleList> PrepRoomRuleData;                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePrepRoomPickupsRuleData;

// ScriptStruct GameNoce.NocePlayerComboSetting
// 0x0034 (0x0034 - 0x0000)
struct FNocePlayerComboSetting final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraAttack;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackFloatRate;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wince;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraWince;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceFloatRate;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceWince;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWinceType                                WinceType;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvertWinceDirection;                            // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurabilityCost;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceNotDeflect;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoAimDistance;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimSearchRadius;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimSearchHalfAngle;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannelingAttack;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceWeaponNotBreak;                             // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePlayerComboSetting;

// ScriptStruct GameNoce.GamepadHoldingActionBlockKeysUnit
// 0x0010 (0x0010 - 0x0000)
struct FGamepadHoldingActionBlockKeysUnit final
{
public:
	TArray<struct FKey>                           BlockKeys;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FGamepadHoldingActionBlockKeysUnit;

// ScriptStruct GameNoce.GamepadHoldingActionBlockKeysSetting
// 0x0050 (0x0050 - 0x0000)
struct FGamepadHoldingActionBlockKeysSetting final
{
public:
	TMap<class FName, struct FGamepadHoldingActionBlockKeysUnit> HoldingActionUnitMap;               // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FGamepadHoldingActionBlockKeysSetting;

// ScriptStruct GameNoce.NocePlayerStaminaTableRow
// 0x0008 (0x0010 - 0x0008)
struct FNocePlayerStaminaTableRow final : public FTableRowBase
{
public:
	float                                         PlayerStamina;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNocePlayerStaminaTableRow;

// ScriptStruct GameNoce.NoceControllerForceFeedbackEffect
// 0x0008 (0x0008 - 0x0000)
struct FNoceControllerForceFeedbackEffect final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceControllerForceFeedbackEffect;

// ScriptStruct GameNoce.NoceControllerHapticEffect
// 0x0070 (0x0070 - 0x0000)
struct FNoceControllerHapticEffect final
{
public:
	struct FNeoAudioPostEventParam                HapticEffect;                                      // 0x0000(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceControllerHapticEffect;

// ScriptStruct GameNoce.NoceControllerVibrationSetting
// 0x0088 (0x0088 - 0x0000)
struct FNoceControllerVibrationSetting final
{
public:
	ENoceControllerVibrationType                  VibrationType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseForceFeedback;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceControllerForceFeedbackEffect     ForceFeedbackSetting;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseHaptic;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceControllerHapticEffect            HapticEffectSetting;                               // 0x0018(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceControllerVibrationSetting;

// ScriptStruct GameNoce.NocePreloadAssetData
// 0x0060 (0x0068 - 0x0008)
struct FNocePreloadAssetData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugString;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePreloadAssetData;

// ScriptStruct GameNoce.TempDataStorage
// 0x0070 (0x0070 - 0x0000)
struct FTempDataStorage final
{
public:
	class FName                                   TempDataName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatData;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntergerData;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringData;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorData;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotatorData;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  RotationData;                                      // 0x0050(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FTempDataStorage;

// ScriptStruct GameNoce.NoceUINotebookAnimCacheData
// 0x0020 (0x0020 - 0x0000)
struct FNoceUINotebookAnimCacheData final
{
public:
	ENoceUINotebookAnimType                       AnimType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeft;                                            // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedBookmark;                                      // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceNotebookBookmarkType                     BookmarkType;                                      // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceNotebookBookmarkSocketType               SocketType;                                        // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceNotebookPage*                      LeftWidget;                                        // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceNotebookPage*                      RightWidget;                                       // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUINotebookAnimCacheData;

// ScriptStruct GameNoce.SanityForceSpawnSetting
// 0x00C0 (0x00C0 - 0x0000)
struct FSanityForceSpawnSetting final
{
public:
	TArray<struct FGameplayTag>                   ForceSpawnTags;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSanitySpawnVolumeSetting              SpawnSetting;                                      // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSanityForceSpawnSetting;

// ScriptStruct GameNoce.NoceSavePointOmamoriUpgradeData
// 0x0018 (0x0018 - 0x0000)
struct FNoceSavePointOmamoriUpgradeData final
{
public:
	ENoceRoundType                                round;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AddOmamoriSlotCosts;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSavePointOmamoriUpgradeData;

// ScriptStruct GameNoce.NoceUICreditData
// 0x0030 (0x0038 - 0x0008)
struct FNoceUICreditData final : public FTableRowBase
{
public:
	ENoceUICreditLayoutType                       LayoutType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text1;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text2;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Space;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUICreditData;

// ScriptStruct GameNoce.NoceUIMappingTextStyle
// 0x0088 (0x0090 - 0x0008)
struct FNoceUIMappingTextStyle final : public FTableRowBase
{
public:
	bool                                          OverwriteText;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          OverwriteColor;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverwriteOutline;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFontOutlineSettings                   OutlineSetting;                                    // 0x0038(0x0028)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverwriteMaterial;                                 // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Material;                                          // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIMappingTextStyle;

// ScriptStruct GameNoce.NoceSeqDataRow
// 0x0018 (0x0020 - 0x0008)
struct FNoceSeqDataRow final : public FTableRowBase
{
public:
	TArray<struct FNoceSeqData>                   Datas;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ProgressTag;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSeqDataRow;

// ScriptStruct GameNoce.NoceSkyAtmosphereDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceSkyAtmosphereDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceSkyAtmosphereDataRowHandle;

// ScriptStruct GameNoce.NoceSkyAtmosphereProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceSkyAtmosphereProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSkyAtmosphereDataRowHandle        DataRow;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSkyAtmosphereProgress;

// ScriptStruct GameNoce.NoceSkyDomeDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceSkyDomeDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceSkyDomeDataRowHandle;

// ScriptStruct GameNoce.NoceSkyDomeProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceSkyDomeProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSkyDomeDataRowHandle              DataRow;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSkyDomeProgress;

// ScriptStruct GameNoce.NoceSpeakerDataHolderAssetSetting
// 0x0018 (0x0018 - 0x0000)
struct FNoceSpeakerDataHolderAssetSetting final
{
public:
	ENoceDialogSpeaker                            Speaker;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDataTable*>                     DialogTable;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSpeakerDataHolderAssetSetting;

// ScriptStruct GameNoce.NoceSSFSProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceSSFSProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSSFSDataRowHandle                 Data;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSSFSProgress;

// ScriptStruct GameNoce.NoceSubtitleSectionParams
// 0x0020 (0x0020 - 0x0000)
struct FNoceSubtitleSectionParams final
{
public:
	ENoceDialogSpeakerName                        SpeakerName;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MainText;                                          // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          UseItalic;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysShow;                                        // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ValidVOLanguageBitmask;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSubtitleSectionParams;

// ScriptStruct GameNoce.NoceSubtitleSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FNoceSubtitleSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FNoceSubtitleSectionParams             Params;                                            // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	int32                                         SectionRangeLowerBound;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionRangeUpperBound;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSubtitleSectionTemplate;

// ScriptStruct GameNoce.NoceSubtitleDisplay
// 0x0038 (0x0038 - 0x0000)
struct FNoceSubtitleDisplay final
{
public:
	class FText                                   PrefixText;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFromTrack;                                       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectionLowerBound;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionUpperBound;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDialogSpeakerName                        SpeakerName;                                       // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceSubtitleDisplay;

// ScriptStruct GameNoce.NoceSweetLightProgress
// 0x0030 (0x0030 - 0x0000)
struct FNoceSweetLightProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           CharacterDataRow;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoceSweetLightDataRowHandle           EnvironmentDataRow;                                // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSweetLightProgress;

// ScriptStruct GameNoce.NoceSystemMessageData
// 0x0040 (0x0040 - 0x0000)
struct FNoceSystemMessageData final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Arg0;                                              // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Arg1;                                              // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Arg2;                                              // 0x0030(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceSystemMessageData;

// ScriptStruct GameNoce.NoceInputActionToKeyRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceInputActionToKeyRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceInputActionToKeyRowHandle;

// ScriptStruct GameNoce.NoceInputIconRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceInputIconRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceInputIconRowHandle;

// ScriptStruct GameNoce.NoceOmamoriDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceOmamoriDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceOmamoriDataRowHandle;

// ScriptStruct GameNoce.NoceKeyItemDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceKeyItemDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceKeyItemDataRowHandle;

// ScriptStruct GameNoce.NoceKeyItemEmaDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceKeyItemEmaDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceKeyItemEmaDataRowHandle;

// ScriptStruct GameNoce.NoceLetterDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceLetterDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceLetterDataRowHandle;

// ScriptStruct GameNoce.NoceNotebookContentRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceNotebookContentRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceNotebookContentRowHandle;

// ScriptStruct GameNoce.NoceWindDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceWindDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceWindDataRowHandle;

// ScriptStruct GameNoce.NoceHinaCharMeshTypeDataRowHandle
// 0x0000 (0x0008 - 0x0008)
struct FNoceHinaCharMeshTypeDataRowHandle final : public FNoceCustomizeTableRowHandle
{
};
DUMPER7_ASSERTS_FNoceHinaCharMeshTypeDataRowHandle;

// ScriptStruct GameNoce.NoceUIControllerWidgetTypeData
// 0x0150 (0x0150 - 0x0000)
struct FNoceUIControllerWidgetTypeData final
{
public:
	class FText                                   LeftTriggerText;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LeftShoulderText;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DPadText1;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNoceInputIconRowHandle                DPadIcon1;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   DPadText2;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNoceInputIconRowHandle                DPadIcon2;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   DPadText3;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNoceInputIconRowHandle                DPadIcon3;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   DPadText4;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNoceInputIconRowHandle                DPadIcon4;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   LeftStickText1;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LeftStickText2;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LeftStickText3;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RightStickText1;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RightStickText2;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FaceTopText;                                       // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FaceLeftText;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FaceRightText;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FaceBottomText;                                    // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SpecialLeftText;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SpecialRightText;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RightTriggerText;                                  // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RightShoulderText;                                 // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIControllerWidgetTypeData;

// ScriptStruct GameNoce.NoceUIEndingData
// 0x0078 (0x0078 - 0x0000)
struct FNoceUIEndingData final
{
public:
	ENoceEndingType                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CompleteTexture;                                   // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CompleteBGTexture;                                 // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoceUIEndingConditionData>     Conditions;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIEndingData;

// ScriptStruct GameNoce.NoceUIDurabilityTextData
// 0x0018 (0x0018 - 0x0000)
struct FNoceUIDurabilityTextData final
{
public:
	float                                         MaxDurabilityRatio;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIDurabilityTextData;

// ScriptStruct GameNoce.NoceUIInputImageTableRow
// 0x0040 (0x0048 - 0x0008)
struct FNoceUIInputImageTableRow final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        XBoxController;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        PS5Controller;                                     // 0x0028(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIInputImageTableRow;

// ScriptStruct GameNoce.NoceLocationInfoTableRow
// 0x0050 (0x0058 - 0x0008)
struct FNoceLocationInfoTableRow final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectImage;                                       // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceLocationInfoTableRow;

// ScriptStruct GameNoce.NoceWidgetPathTableRow
// 0x0020 (0x0028 - 0x0008)
struct FNoceWidgetPathTableRow final : public FTableRowBase
{
public:
	struct FSoftClassPath                         WidgetPath;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceWidgetPathTableRow;

// ScriptStruct GameNoce.NoceUIKeyMappingImageStruct
// 0x0028 (0x0028 - 0x0000)
struct FNoceUIKeyMappingImageStruct final
{
public:
	TSoftObjectPtr<class UObject>                 ResourceObject;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIKeyMappingImageStruct;

// ScriptStruct GameNoce.NoceUINotebookPageTextureData
// 0x0068 (0x0068 - 0x0000)
struct FNoceUINotebookPageTextureData final
{
public:
	struct FSoftObjectPath                        BaseColorTexture;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        RoughTexture;                                      // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        NormalTexture;                                     // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OppositePageNum;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUINotebookPageTextureData;

// ScriptStruct GameNoce.NoceUIOptionCategoryData
// 0x0028 (0x0028 - 0x0000)
struct FNoceUIOptionCategoryData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIOptionCategoryData;

// ScriptStruct GameNoce.NoceUIPictureCreditData
// 0x0028 (0x0030 - 0x0008)
struct FNoceUIPictureCreditData final : public FTableRowBase
{
public:
	ENoceUICreditCommandType                      CommandType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeUntilNextCommand;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Picture;                                           // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUIPictureCreditData;

// ScriptStruct GameNoce.NoceUITextCreditData
// 0x0030 (0x0038 - 0x0008)
struct FNoceUITextCreditData final : public FTableRowBase
{
public:
	ENoceUICreditCommandType                      CommandType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeUntilNextCommand;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JobText;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameText;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNeobards;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUITextCreditData;

// ScriptStruct GameNoce.NoceUICreditDTData
// 0x0020 (0x0028 - 0x0008)
struct FNoceUICreditDTData final : public FTableRowBase
{
public:
	TArray<struct FSoftObjectPath>                DataTables;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Speeds;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceUICreditDTData;

// ScriptStruct GameNoce.NoceUINotebookCategoryData
// 0x0080 (0x0080 - 0x0000)
struct FNoceUINotebookCategoryData final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultTexture;                                    // 0x0018(0x0020)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectTexture;                                     // 0x0038(0x0020)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SelectAddTexture;                                  // 0x0058(0x0020)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingLeft;                                       // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FNoceUINotebookCategoryData;

// ScriptStruct GameNoce.NocePPVSanitySet
// 0x0040 (0x0040 - 0x0000)
struct FNocePPVSanitySet final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SanityMin;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SanityMax;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNocePPVSanitySet;

// ScriptStruct GameNoce.NoceVolumetricFogProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceVolumetricFogProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceVolumetricFogDataRowHandle        SanityMax;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceVolumetricFogProgress;

// ScriptStruct GameNoce.WaveSpawnQueueElement
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FWaveSpawnQueueElement final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FWaveSpawnQueueElement;

// ScriptStruct GameNoce.NoceWeaponInfoOverride
// 0x0018 (0x0018 - 0x0000)
struct FNoceWeaponInfoOverride final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraAttack;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wince;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraWince;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceWince;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceWinceType                                WinceType;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurabilityCost;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceWeaponInfoOverride;

// ScriptStruct GameNoce.NoceWindProgress
// 0x0028 (0x0028 - 0x0000)
struct FNoceWindProgress final
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceWindDataRowHandle                 DataRow;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FNoceWindProgress;

// ScriptStruct GameNoce.ProgressDataLayerTableRow
// 0x0120 (0x0128 - 0x0008)
struct FProgressDataLayerTableRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  ProgressTags;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   ExactProgressTags;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x0038(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          AllAdditionalTags;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedAdditionalTagNum;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithOutAdditionalTags;                             // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          WithoutAllAdditionalTags;                          // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoundBitmask;                                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                ActivateDataLayerAsset;                            // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                LoadedDataLayerAsset;                              // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                EasyRiddleDataLayerAsset;                          // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                NormalRiddleDataLayerAsset;                        // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                HardRiddleDataLayerAsset;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                EndingADataLayerAsset;                             // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                EndingBDataLayerAsset;                             // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                EndingCDataLayerAsset;                             // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                EndingDDataLayerAsset;                             // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                UnloadDataLayerAsset;                              // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FProgressDataLayerTableRow;

}

