#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_InteractDoor

#include "Basic.hpp"

#include "BPI_InteractDoor_classes.hpp"
#include "BPI_InteractDoor_parameters.hpp"


namespace SDK
{

// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_UseFigerAdd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_UseFigerAdd(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_UseFigerAdd");

	Params::BPI_InteractDoor_C_BPI_UseFigerAdd Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_ReturnToIdle
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractDoor_C::BPI_ReturnToIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_ReturnToIdle");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_OpenDoorHalf
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_OpenDoorHalf(double InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_OpenDoorHalf");

	Params::BPI_InteractDoor_C_BPI_OpenDoorHalf Parms{};

	Parms.InPlayRate = InPlayRate;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_OpenDoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_OpenDoor(double InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_OpenDoor");

	Params::BPI_InteractDoor_C_BPI_OpenDoor Parms{};

	Parms.InPlayRate = InPlayRate;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_IsShojiDoor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsShoji                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_IsShojiDoor(bool* IsShoji)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_IsShojiDoor");

	Params::BPI_InteractDoor_C_BPI_IsShojiDoor Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsShoji != nullptr)
		*IsShoji = Parms.IsShoji;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_IsDoorReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutReady                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_IsDoorReady(bool* OutReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_IsDoorReady");

	Params::BPI_InteractDoor_C_BPI_IsDoorReady Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutReady != nullptr)
		*OutReady = Parms.OutReady;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_IsDamageLimitHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_IsDamageLimitHealth(bool* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_IsDamageLimitHealth");

	Params::BPI_InteractDoor_C_BPI_IsDamageLimitHealth Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_GetShojiHandMaker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutUseHandeIK                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         OutMaker                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_GetShojiHandMaker(bool* OutUseHandeIK, struct FVector* OutMaker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_GetShojiHandMaker");

	Params::BPI_InteractDoor_C_BPI_GetShojiHandMaker Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutUseHandeIK != nullptr)
		*OutUseHandeIK = Parms.OutUseHandeIK;

	if (OutMaker != nullptr)
		*OutMaker = std::move(Parms.OutMaker);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_GetMotionWarpMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WarpTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLantern                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         OutVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_InteractDoor_C::BPI_GetMotionWarpMarker(class FName WarpTarget, bool IsLantern, struct FVector* OutVector, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_GetMotionWarpMarker");

	Params::BPI_InteractDoor_C_BPI_GetMotionWarpMarker Parms{};

	Parms.WarpTarget = WarpTarget;
	Parms.IsLantern = IsLantern;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_GetCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_InteractDoor_C::BPI_GetCameraRotation(struct FRotator* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_GetCameraRotation");

	Params::BPI_InteractDoor_C_BPI_GetCameraRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_GetAnimID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  OutAnimID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_GetAnimID(int32* OutAnimID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_GetAnimID");

	Params::BPI_InteractDoor_C_BPI_GetAnimID Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutAnimID != nullptr)
		*OutAnimID = Parms.OutAnimID;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_ForceOpenDoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AnimStartTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_ForceOpenDoor(double AnimStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_ForceOpenDoor");

	Params::BPI_InteractDoor_C_BPI_ForceOpenDoor Parms{};

	Parms.AnimStartTime = AnimStartTime;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_ForceCloseDoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AnimStartTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_ForceCloseDoor(double AnimStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_ForceCloseDoor");

	Params::BPI_InteractDoor_C_BPI_ForceCloseDoor Parms{};

	Parms.AnimStartTime = AnimStartTime;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_Door_IsOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsOpen                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_Door_IsOpen(bool* IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_Door_IsOpen");

	Params::BPI_InteractDoor_C_BPI_Door_IsOpen Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsOpen != nullptr)
		*IsOpen = Parms.IsOpen;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_Door_AutoUseCameraMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_Door_AutoUseCameraMode(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_Door_AutoUseCameraMode");

	Params::BPI_InteractDoor_C_BPI_Door_AutoUseCameraMode Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_DoMotionWarp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_DoMotionWarp(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_DoMotionWarp");

	Params::BPI_InteractDoor_C_BPI_DoMotionWarp Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_InteractDoor.BPI_InteractDoor_C.BPI_CloseDoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InPlayRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractDoor_C::BPI_CloseDoor(double InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractDoor_C", "BPI_CloseDoor");

	Params::BPI_InteractDoor_C_BPI_CloseDoor Parms{};

	Parms.InPlayRate = InPlayRate;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

