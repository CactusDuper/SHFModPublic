#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ExamineBase

#include "Basic.hpp"

#include "BPI_ExamineBase_classes.hpp"
#include "BPI_ExamineBase_parameters.hpp"


namespace SDK
{

// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_CanTriggerFound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_CanTriggerFound(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_CanTriggerFound");

	Params::BPI_ExamineBase_C_BPI_Examine_CanTriggerFound Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_GetGuide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            ExamineGuide                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_GetGuide(class FName* ExamineGuide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_GetGuide");

	Params::BPI_ExamineBase_C_BPI_Examine_GetGuide Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ExamineGuide != nullptr)
		*ExamineGuide = Parms.ExamineGuide;
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_GetGuideInTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            InTargetGuide                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_GetGuideInTarget(class FName* InTargetGuide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_GetGuideInTarget");

	Params::BPI_ExamineBase_C_BPI_Examine_GetGuideInTarget Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (InTargetGuide != nullptr)
		*InTargetGuide = Parms.InTargetGuide;
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_GetHidePlayerPref
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   HideAfterBlendIn                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 HideDelay                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_GetHidePlayerPref(bool* HideAfterBlendIn, double* HideDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_GetHidePlayerPref");

	Params::BPI_ExamineBase_C_BPI_Examine_GetHidePlayerPref Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (HideAfterBlendIn != nullptr)
		*HideAfterBlendIn = Parms.HideAfterBlendIn;

	if (HideDelay != nullptr)
		*HideDelay = Parms.HideDelay;
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_GetPostProcessComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent**           PostProcessComp                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_GetPostProcessComp(class UPostProcessComponent** PostProcessComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_GetPostProcessComp");

	Params::BPI_ExamineBase_C_BPI_Examine_GetPostProcessComp Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (PostProcessComp != nullptr)
		*PostProcessComp = Parms.PostProcessComp;
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_IsBlendInCameraWithFade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsFade                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_IsBlendInCameraWithFade(bool* IsFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_IsBlendInCameraWithFade");

	Params::BPI_ExamineBase_C_BPI_Examine_IsBlendInCameraWithFade Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsFade != nullptr)
		*IsFade = Parms.IsFade;
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnCameraInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ForwardValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RightValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_OnCameraInput(double ForwardValue, double RightValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnCameraInput");

	Params::BPI_ExamineBase_C_BPI_Examine_OnCameraInput Parms{};

	Parms.ForwardValue = ForwardValue;
	Parms.RightValue = RightValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnExamineEnd
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_OnExamineEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnExamineEnd");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnExamineSucceed
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_OnExamineSucceed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnExamineSucceed");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnExamineTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_OnExamineTick(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnExamineTick");

	Params::BPI_ExamineBase_C_BPI_Examine_OnExamineTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnLeaveTriggerState
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_OnLeaveTriggerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnLeaveTriggerState");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnZoomPressed
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_OnZoomPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnZoomPressed");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_OnZoomReleased
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_OnZoomReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_OnZoomReleased");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_PerformSuccess
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_PerformSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_PerformSuccess");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_PreEntry
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_PreEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_PreEntry");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_ShowCameraInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ACameraActor*                     CameraActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_ShowCameraInfo(const class FString& Message, class ACameraActor* CameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_ShowCameraInfo");

	Params::BPI_ExamineBase_C_BPI_Examine_ShowCameraInfo Parms{};

	Parms.Message = std::move(Message);
	Parms.CameraActor = CameraActor;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_ToggleDrawDebug
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_ToggleDrawDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_ToggleDrawDebug");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_TransferInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceUIInputAction                      InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPressed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ExamineBase_C::BPI_Examine_TransferInput(ENoceUIInputAction InputType, bool IsPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_TransferInput");

	Params::BPI_ExamineBase_C_BPI_Examine_TransferInput Parms{};

	Parms.InputType = InputType;
	Parms.IsPressed = IsPressed;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_ExamineBase.BPI_ExamineBase_C.BPI_Examine_TriggerTargetFound
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ExamineBase_C::BPI_Examine_TriggerTargetFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ExamineBase_C", "BPI_Examine_TriggerTargetFound");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

