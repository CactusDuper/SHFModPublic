#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NoteB_Book

#include "Basic.hpp"

#include "WBP_NoteB_Book_classes.hpp"
#include "WBP_NoteB_Book_parameters.hpp"


namespace SDK
{

// Function WBP_NoteB_Book.WBP_NoteB_Book_C.AddBookmarks
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceNotebookBookmarkType               BookmarkType_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         SocketType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::AddBookmarks(ENoceNotebookBookmarkType BookmarkType_0, ENoceNotebookBookmarkSocketType SocketType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "AddBookmarks");

	Params::WBP_NoteB_Book_C_AddBookmarks Parms{};

	Parms.BookmarkType_0 = BookmarkType_0;
	Parms.SocketType_0 = SocketType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.AddPage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLeft                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const ENoceNotebookType                 Type                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSoftClassPath&            Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FName>&                    Contents                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   TextStartIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ImageStartIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PageTextureIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            FirstContent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>*                    NewContents                                            (Parm, OutParm)

void UWBP_NoteB_Book_C::AddPage(bool IsLeft, const ENoceNotebookType Type, const struct FSoftClassPath& Widget, TArray<class FName>& Contents, int32 TextStartIndex, int32 ImageStartIndex, int32 PageTextureIndex, class FName* FirstContent, TArray<class FName>* NewContents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "AddPage");

	Params::WBP_NoteB_Book_C_AddPage Parms{};

	Parms.IsLeft = IsLeft;
	Parms.Type = Type;
	Parms.Widget = std::move(Widget);
	Parms.Contents = std::move(Contents);
	Parms.TextStartIndex = TextStartIndex;
	Parms.ImageStartIndex = ImageStartIndex;
	Parms.PageTextureIndex = PageTextureIndex;

	UObject::ProcessEvent(Func, &Parms);

	Contents = std::move(Parms.Contents);

	if (FirstContent != nullptr)
		*FirstContent = Parms.FirstContent;

	if (NewContents != nullptr)
		*NewContents = std::move(Parms.NewContents);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.CanSelectNext
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_NoteB_Book_C::CanSelectNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "CanSelectNext");

	Params::WBP_NoteB_Book_C_CanSelectNext Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.CanSelectPrevious
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_NoteB_Book_C::CanSelectPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "CanSelectPrevious");

	Params::WBP_NoteB_Book_C_CanSelectPrevious Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.ClearBookmarks
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::ClearBookmarks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "ClearBookmarks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.ClearWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLeft                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::ClearWidget(bool IsLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "ClearWidget");

	Params::WBP_NoteB_Book_C_ClearWidget Parms{};

	Parms.IsLeft = IsLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.DrawWidgetRT
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceDraw                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::DrawWidgetRT(bool ForceDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "DrawWidgetRT");

	Params::WBP_NoteB_Book_C_DrawWidgetRT Parms{};

	Parms.ForceDraw = ForceDraw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.ExecuteUbergraph_WBP_NoteB_Book
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::ExecuteUbergraph_WBP_NoteB_Book(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "ExecuteUbergraph_WBP_NoteB_Book");

	Params::WBP_NoteB_Book_C_ExecuteUbergraph_WBP_NoteB_Book Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.HideGuide
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::HideGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "HideGuide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_NoteB_Book_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.OnInputDeviceChanged
// (Event, Protected, BlueprintEvent)

void UWBP_NoteB_Book_C::OnInputDeviceChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "OnInputDeviceChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.OnUpdatePageText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::OnUpdatePageText(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "OnUpdatePageText");

	Params::WBP_NoteB_Book_C_OnUpdatePageText Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshArrowDisable
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::RefreshArrowDisable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshArrowDisable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PreviousIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::RefreshCategory(int32 PreviousIndex, int32 NextIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshCategory");

	Params::WBP_NoteB_Book_C_RefreshCategory Parms{};

	Parms.PreviousIndex = PreviousIndex;
	Parms.NextIndex = NextIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshCharaterPage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::RefreshCharaterPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshCharaterPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshEnemyPage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::RefreshEnemyPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshEnemyPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshInfoPage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::RefreshInfoPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshInfoPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshPuzzlePage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::RefreshPuzzlePage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshPuzzlePage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.RefreshTutorialPage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::RefreshTutorialPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "RefreshTutorialPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SelectNext
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::SelectNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SelectNext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SelectPrevious
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::SelectPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SelectPrevious");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetAllCharacterPages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNoceNotebookCharacterPageData>&AllPages                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    GotIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    NewIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   DefaultPage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkType               InBookmarkType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         InSocketType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::SetAllCharacterPages(TArray<struct FNoceNotebookCharacterPageData>& AllPages, TArray<class FName>& GotIDs, TArray<class FName>& NewIDs, int32 DefaultPage, ENoceNotebookBookmarkType InBookmarkType, ENoceNotebookBookmarkSocketType InSocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetAllCharacterPages");

	Params::WBP_NoteB_Book_C_SetAllCharacterPages Parms{};

	Parms.AllPages = std::move(AllPages);
	Parms.GotIDs = std::move(GotIDs);
	Parms.NewIDs = std::move(NewIDs);
	Parms.DefaultPage = DefaultPage;
	Parms.InBookmarkType = InBookmarkType;
	Parms.InSocketType = InSocketType;

	UObject::ProcessEvent(Func, &Parms);

	AllPages = std::move(Parms.AllPages);
	GotIDs = std::move(Parms.GotIDs);
	NewIDs = std::move(Parms.NewIDs);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetAllEnemyPages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNoceNotebookEnemyPageData>&AllPages                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    GotIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    NewIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   DefaultPage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkType               InBookmarkType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         InSocketType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::SetAllEnemyPages(TArray<struct FNoceNotebookEnemyPageData>& AllPages, TArray<class FName>& GotIDs, TArray<class FName>& NewIDs, int32 DefaultPage, ENoceNotebookBookmarkType InBookmarkType, ENoceNotebookBookmarkSocketType InSocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetAllEnemyPages");

	Params::WBP_NoteB_Book_C_SetAllEnemyPages Parms{};

	Parms.AllPages = std::move(AllPages);
	Parms.GotIDs = std::move(GotIDs);
	Parms.NewIDs = std::move(NewIDs);
	Parms.DefaultPage = DefaultPage;
	Parms.InBookmarkType = InBookmarkType;
	Parms.InSocketType = InSocketType;

	UObject::ProcessEvent(Func, &Parms);

	AllPages = std::move(Parms.AllPages);
	GotIDs = std::move(Parms.GotIDs);
	NewIDs = std::move(Parms.NewIDs);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetAllInfoPages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNoceNotebookInfoPageData>&AllPages                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    GotIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    NewIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   DefaultPage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkType               InBookmarkType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         InSocketType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::SetAllInfoPages(TArray<struct FNoceNotebookInfoPageData>& AllPages, TArray<class FName>& GotIDs, TArray<class FName>& NewIDs, int32 DefaultPage, ENoceNotebookBookmarkType InBookmarkType, ENoceNotebookBookmarkSocketType InSocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetAllInfoPages");

	Params::WBP_NoteB_Book_C_SetAllInfoPages Parms{};

	Parms.AllPages = std::move(AllPages);
	Parms.GotIDs = std::move(GotIDs);
	Parms.NewIDs = std::move(NewIDs);
	Parms.DefaultPage = DefaultPage;
	Parms.InBookmarkType = InBookmarkType;
	Parms.InSocketType = InSocketType;

	UObject::ProcessEvent(Func, &Parms);

	AllPages = std::move(Parms.AllPages);
	GotIDs = std::move(Parms.GotIDs);
	NewIDs = std::move(Parms.NewIDs);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetAllPuzzlePages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNoceNotebookPuzzlePageData>&AllPages                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    GotIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    NewIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   DefaultPage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkType               InBookmarkType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         InSocketType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::SetAllPuzzlePages(TArray<struct FNoceNotebookPuzzlePageData>& AllPages, TArray<class FName>& GotIDs, TArray<class FName>& NewIDs, int32 DefaultPage, ENoceNotebookBookmarkType InBookmarkType, ENoceNotebookBookmarkSocketType InSocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetAllPuzzlePages");

	Params::WBP_NoteB_Book_C_SetAllPuzzlePages Parms{};

	Parms.AllPages = std::move(AllPages);
	Parms.GotIDs = std::move(GotIDs);
	Parms.NewIDs = std::move(NewIDs);
	Parms.DefaultPage = DefaultPage;
	Parms.InBookmarkType = InBookmarkType;
	Parms.InSocketType = InSocketType;

	UObject::ProcessEvent(Func, &Parms);

	AllPages = std::move(Parms.AllPages);
	GotIDs = std::move(Parms.GotIDs);
	NewIDs = std::move(Parms.NewIDs);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetAllTutorialPages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNoceNotebookTutorialPageData>&AllPages                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    GotIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    NewIDs                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   DefaultPage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const bool                              InNeedBookmark                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkType               InBookmarkType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         InSocketType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::SetAllTutorialPages(TArray<struct FNoceNotebookTutorialPageData>& AllPages, TArray<class FName>& GotIDs, TArray<class FName>& NewIDs, int32 DefaultPage, const bool InNeedBookmark, ENoceNotebookBookmarkType InBookmarkType, ENoceNotebookBookmarkSocketType InSocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetAllTutorialPages");

	Params::WBP_NoteB_Book_C_SetAllTutorialPages Parms{};

	Parms.AllPages = std::move(AllPages);
	Parms.GotIDs = std::move(GotIDs);
	Parms.NewIDs = std::move(NewIDs);
	Parms.DefaultPage = DefaultPage;
	Parms.InNeedBookmark = InNeedBookmark;
	Parms.InBookmarkType = InBookmarkType;
	Parms.InSocketType = InSocketType;

	UObject::ProcessEvent(Func, &Parms);

	AllPages = std::move(Parms.AllPages);
	GotIDs = std::move(Parms.GotIDs);
	NewIDs = std::move(Parms.NewIDs);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::SetEnable(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetEnable");

	Params::WBP_NoteB_Book_C_SetEnable Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SetupContentPageData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookType                       Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TArray<class FText>&              Texts                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<struct FSoftObjectPath>&   Images                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<bool>&                     Visibles                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<bool>&                     News                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<bool>&                           News2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_NoteB_Book_C::SetupContentPageData(class FName Name_0, ENoceNotebookType Type, const TArray<class FText>& Texts, const TArray<struct FSoftObjectPath>& Images, const TArray<bool>& Visibles, const TArray<bool>& News, TArray<bool>& News2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SetupContentPageData");

	Params::WBP_NoteB_Book_C_SetupContentPageData Parms{};

	Parms.Name_0 = Name_0;
	Parms.Type = Type;
	Parms.Texts = std::move(Texts);
	Parms.Images = std::move(Images);
	Parms.Visibles = std::move(Visibles);
	Parms.News = std::move(News);
	Parms.News2 = std::move(News2);

	UObject::ProcessEvent(Func, &Parms);

	News2 = std::move(Parms.News2);

	return Parms.ReturnValue;
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.SwitchPreviousPages
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::SwitchPreviousPages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "SwitchPreviousPages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "Tick");

	Params::WBP_NoteB_Book_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.UpdateAllPageText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalPageNum                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkType               InBookmarkType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType         InSocketType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::UpdateAllPageText(int32 TotalPageNum, ENoceNotebookBookmarkType InBookmarkType, ENoceNotebookBookmarkSocketType InSocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "UpdateAllPageText");

	Params::WBP_NoteB_Book_C_UpdateAllPageText Parms{};

	Parms.TotalPageNum = TotalPageNum;
	Parms.InBookmarkType = InBookmarkType;
	Parms.InSocketType = InSocketType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.UpdateBookmarks
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NoteB_Book_C::UpdateBookmarks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "UpdateBookmarks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.UpdateGuide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CategoryGuide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CategoryPagesGuide                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::UpdateGuide(class FName CategoryGuide, class FName CategoryPagesGuide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "UpdateGuide");

	Params::WBP_NoteB_Book_C_UpdateGuide Parms{};

	Parms.CategoryGuide = CategoryGuide;
	Parms.CategoryPagesGuide = CategoryPagesGuide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NoteB_Book.WBP_NoteB_Book_C.UpdateInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInputEvent&               InputEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool*                                   IsTriggered                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NoteB_Book_C::UpdateInput(const struct FInputEvent& InputEvent, const struct FKey& Key, bool* IsTriggered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NoteB_Book_C", "UpdateInput");

	Params::WBP_NoteB_Book_C_UpdateInput Parms{};

	Parms.InputEvent = std::move(InputEvent);
	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (IsTriggered != nullptr)
		*IsTriggered = Parms.IsTriggered;
}

}

