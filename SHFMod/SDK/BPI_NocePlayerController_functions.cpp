#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NocePlayerController

#include "Basic.hpp"

#include "BPI_NocePlayerController_classes.hpp"
#include "BPI_NocePlayerController_parameters.hpp"


namespace SDK
{

// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_EnableLineOfSight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_EnableLineOfSight(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_EnableLineOfSight");

	Params::BPI_NocePlayerController_C_BPI_EnableLineOfSight Parms{};

	Parms.InValue = InValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_EndCounterableHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerController_C::BPI_EndCounterableHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_EndCounterableHint");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleBreakDown
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerController_C::BPI_HandleBreakDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleBreakDown");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleEndHPWarnings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InSourceFormEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_HandleEndHPWarnings(bool InSourceFormEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleEndHPWarnings");

	Params::BPI_NocePlayerController_C_BPI_HandleEndHPWarnings Parms{};

	Parms.InSourceFormEvent = InSourceFormEvent;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleHellModeSpiritAttack
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerController_C::BPI_HandleHellModeSpiritAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleHellModeSpiritAttack");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleJustDodge
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerController_C::BPI_HandleJustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleJustDodge");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleSanityFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_HandleSanityFocus(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleSanityFocus");

	Params::BPI_NocePlayerController_C_BPI_HandleSanityFocus Parms{};

	Parms.InValue = InValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleSanityWeak
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_HandleSanityWeak(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleSanityWeak");

	Params::BPI_NocePlayerController_C_BPI_HandleSanityWeak Parms{};

	Parms.InValue = InValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleShiromukuRevive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_HandleShiromukuRevive(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleShiromukuRevive");

	Params::BPI_NocePlayerController_C_BPI_HandleShiromukuRevive Parms{};

	Parms.InValue = InValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_HandleStartHPWarnings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InPlayTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InSourceFormEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_HandleStartHPWarnings(double InPlayTime, bool InSourceFormEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_HandleStartHPWarnings");

	Params::BPI_NocePlayerController_C_BPI_HandleStartHPWarnings Parms{};

	Parms.InPlayTime = InPlayTime;
	Parms.InSourceFormEvent = InSourceFormEvent;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_PlayControllerVibrationByData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForceFeedbackEffect*             ForceFeedbackEffect                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FNeoAudioPostEventParam&   HapticEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_NocePlayerController_C::BPI_PlayControllerVibrationByData(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FNeoAudioPostEventParam& HapticEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_PlayControllerVibrationByData");

	Params::BPI_NocePlayerController_C_BPI_PlayControllerVibrationByData Parms{};

	Parms.ForceFeedbackEffect = ForceFeedbackEffect;
	Parms.HapticEffect = std::move(HapticEffect);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_PlayControllerVibrationByType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceControllerVibrationType            VibrationType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_PlayControllerVibrationByType(ENoceControllerVibrationType VibrationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_PlayControllerVibrationByType");

	Params::BPI_NocePlayerController_C_BPI_PlayControllerVibrationByType Parms{};

	Parms.VibrationType = VibrationType;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_StartCounterableHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InAlpha                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InBlend                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InJitterScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InJitterSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InOverlayColor_ColorShiftBlend                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InOverlayColorRatio                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              InOverlayColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_StartCounterableHint(double InAlpha, double InBlend, double InJitterScale, double InJitterSpeed, double InOverlayColor_ColorShiftBlend, double InOverlayColorRatio, const struct FLinearColor& InOverlayColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_StartCounterableHint");

	Params::BPI_NocePlayerController_C_BPI_StartCounterableHint Parms{};

	Parms.InAlpha = InAlpha;
	Parms.InBlend = InBlend;
	Parms.InJitterScale = InJitterScale;
	Parms.InJitterSpeed = InJitterSpeed;
	Parms.InOverlayColor_ColorShiftBlend = InOverlayColor_ColorShiftBlend;
	Parms.InOverlayColorRatio = InOverlayColorRatio;
	Parms.InOverlayColor = std::move(InOverlayColor);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_SwitchControlledPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       InPlayerCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InResetWeapon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InWeaponName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFullReocver                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InDestroyOldCharacter                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_SwitchControlledPlayer(class ACharacter* InPlayerCharacter, bool InResetWeapon, class FName InWeaponName, bool InFullReocver, bool InDestroyOldCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_SwitchControlledPlayer");

	Params::BPI_NocePlayerController_C_BPI_SwitchControlledPlayer Parms{};

	Parms.InPlayerCharacter = InPlayerCharacter;
	Parms.InResetWeapon = InResetWeapon;
	Parms.InWeaponName = InWeaponName;
	Parms.InFullReocver = InFullReocver;
	Parms.InDestroyOldCharacter = InDestroyOldCharacter;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_UseHIna
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InResetWeapon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFullRecover                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_UseHIna(bool InResetWeapon, bool InFullRecover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_UseHIna");

	Params::BPI_NocePlayerController_C_BPI_UseHIna Parms{};

	Parms.InResetWeapon = InResetWeapon;
	Parms.InFullRecover = InFullRecover;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_UseHinaClaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InResetWeapon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFullRecover                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_UseHinaClaw(bool InResetWeapon, bool InFullRecover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_UseHinaClaw");

	Params::BPI_NocePlayerController_C_BPI_UseHinaClaw Parms{};

	Parms.InResetWeapon = InResetWeapon;
	Parms.InFullRecover = InFullRecover;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerController.BPI_NocePlayerController_C.BPI_UseHinaClawDevLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InResetWeapon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFullRecover                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerController_C::BPI_UseHinaClawDevLevel(bool InResetWeapon, bool InFullRecover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerController_C", "BPI_UseHinaClawDevLevel");

	Params::BPI_NocePlayerController_C_BPI_UseHinaClawDevLevel Parms{};

	Parms.InResetWeapon = InResetWeapon;
	Parms.InFullRecover = InFullRecover;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

