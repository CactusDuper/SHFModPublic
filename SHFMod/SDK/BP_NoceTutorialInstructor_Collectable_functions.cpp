#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceTutorialInstructor_Collectable

#include "Basic.hpp"

#include "BP_NoceTutorialInstructor_Collectable_classes.hpp"
#include "BP_NoceTutorialInstructor_Collectable_parameters.hpp"


namespace SDK
{

// Function BP_NoceTutorialInstructor_Collectable.BP_NoceTutorialInstructor_Collectable_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_Collectable_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Collectable_C", "ReceiveEndPlay");

	Params::BP_NoceTutorialInstructor_Collectable_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceTutorialInstructor_Collectable.BP_NoceTutorialInstructor_Collectable_C.On Add Collectable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceInventoryType                      ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_Collectable_C::On_Add_Collectable(ENoceInventoryType ItemType, class FName ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Collectable_C", "On Add Collectable");

	Params::BP_NoceTutorialInstructor_Collectable_C_On_Add_Collectable Parms{};

	Parms.ItemType = ItemType;
	Parms.ItemName = ItemName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceTutorialInstructor_Collectable.BP_NoceTutorialInstructor_Collectable_C.IsStartCondition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NoceTutorialInstructor_Collectable_C::IsStartCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Collectable_C", "IsStartCondition");

	Params::BP_NoceTutorialInstructor_Collectable_C_IsStartCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NoceTutorialInstructor_Collectable.BP_NoceTutorialInstructor_Collectable_C.ExecuteUbergraph_BP_NoceTutorialInstructor_Collectable
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_Collectable_C::ExecuteUbergraph_BP_NoceTutorialInstructor_Collectable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Collectable_C", "ExecuteUbergraph_BP_NoceTutorialInstructor_Collectable");

	Params::BP_NoceTutorialInstructor_Collectable_C_ExecuteUbergraph_BP_NoceTutorialInstructor_Collectable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceTutorialInstructor_Collectable.BP_NoceTutorialInstructor_Collectable_C.CheckUsingGimmick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NoceTutorialInstructor_Collectable_C::CheckUsingGimmick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_Collectable_C", "CheckUsingGimmick");

	UObject::ProcessEvent(Func, nullptr);
}

}

