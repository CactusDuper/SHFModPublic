#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NocePlayerCharacter

#include "Basic.hpp"

#include "BPI_NocePlayerCharacter_classes.hpp"
#include "BPI_NocePlayerCharacter_parameters.hpp"


namespace SDK
{

// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyBattleStatusTimerTick
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ApplyBattleStatusTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyBattleStatusTimerTick");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyBattling
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ApplyBattling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyBattling");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              CameraMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceSet                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_ApplyCameraMode(const struct FGameplayTag& CameraMode, bool WithInterpolation, bool ForceSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyCameraMode");

	Params::BPI_NocePlayerCharacter_C_BPI_ApplyCameraMode Parms{};

	Parms.CameraMode = std::move(CameraMode);
	Parms.WithInterpolation = WithInterpolation;
	Parms.ForceSet = ForceSet;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyCameraReset
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ApplyCameraReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyCameraReset");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyClawGInSequence
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ApplyClawGInSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyClawGInSequence");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyClawGStatusTimerTickInSequence
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ApplyClawGStatusTimerTickInSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyClawGStatusTimerTickInSequence");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyCustomCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              CameraMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_ApplyCustomCamera(const struct FGameplayTag& CameraMode, bool WithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyCustomCamera");

	Params::BPI_NocePlayerCharacter_C_BPI_ApplyCustomCamera Parms{};

	Parms.CameraMode = std::move(CameraMode);
	Parms.WithInterpolation = WithInterpolation;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ApplyDamageWithReaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InHealthDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InWinceDamage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InMaxSanityDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InStaminaDamage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InMaxSanityDamageToHealthDamageRatio                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForceWince                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceDeathType                          InDeathType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckInvincible_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHealthDamageEffectedByDamageRatio                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHealthDamageApplyGutsCheck                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsLimitHealth                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckOmamoriKagami                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckSuperArmor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_ApplyDamageWithReaction(double InHealthDamage, double InWinceDamage, double InMaxSanityDamage, double InStaminaDamage, double InMaxSanityDamageToHealthDamageRatio, bool IsForceWince, ENoceWinceType InWinceType, ENoceDeathType InDeathType, bool InCheckInvincible_, bool InHealthDamageEffectedByDamageRatio, bool InHealthDamageApplyGutsCheck, bool InIsLimitHealth, bool InCheckOmamoriKagami, bool InCheckSuperArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ApplyDamageWithReaction");

	Params::BPI_NocePlayerCharacter_C_BPI_ApplyDamageWithReaction Parms{};

	Parms.InHealthDamage = InHealthDamage;
	Parms.InWinceDamage = InWinceDamage;
	Parms.InMaxSanityDamage = InMaxSanityDamage;
	Parms.InStaminaDamage = InStaminaDamage;
	Parms.InMaxSanityDamageToHealthDamageRatio = InMaxSanityDamageToHealthDamageRatio;
	Parms.IsForceWince = IsForceWince;
	Parms.InWinceType = InWinceType;
	Parms.InDeathType = InDeathType;
	Parms.InCheckInvincible_ = InCheckInvincible_;
	Parms.InHealthDamageEffectedByDamageRatio = InHealthDamageEffectedByDamageRatio;
	Parms.InHealthDamageApplyGutsCheck = InHealthDamageApplyGutsCheck;
	Parms.InIsLimitHealth = InIsLimitHealth;
	Parms.InCheckOmamoriKagami = InCheckOmamoriKagami;
	Parms.InCheckSuperArmor = InCheckSuperArmor;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ClearWalkToLocationTimerHandle
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ClearWalkToLocationTimerHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ClearWalkToLocationTimerHandle");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DebugPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeathType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DeathDir                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_DebugPlayerDeath(int32 DeathType, int32 DeathDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DebugPlayerDeath");

	Params::BPI_NocePlayerCharacter_C_BPI_DebugPlayerDeath Parms{};

	Parms.DeathType = DeathType;
	Parms.DeathDir = DeathDir;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DebugPlayerInvincbile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_DebugPlayerInvincbile(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DebugPlayerInvincbile");

	Params::BPI_NocePlayerCharacter_C_BPI_DebugPlayerInvincbile Parms{};

	Parms.InEnable = InEnable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DebugPlayerNoCostStamina
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_DebugPlayerNoCostStamina(bool InEable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DebugPlayerNoCostStamina");

	Params::BPI_NocePlayerCharacter_C_BPI_DebugPlayerNoCostStamina Parms{};

	Parms.InEable = InEable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DebugPlayerNoStaminaTiredTimerTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_DebugPlayerNoStaminaTiredTimerTick(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DebugPlayerNoStaminaTiredTimerTick");

	Params::BPI_NocePlayerCharacter_C_BPI_DebugPlayerNoStaminaTiredTimerTick Parms{};

	Parms.InEnable = InEnable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DebugSetNoCostClawTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_DebugSetNoCostClawTransform(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DebugSetNoCostClawTransform");

	Params::BPI_NocePlayerCharacter_C_BPI_DebugSetNoCostClawTransform Parms{};

	Parms.InEnable = InEnable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DebugTogglePlayerInvincible
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_DebugTogglePlayerInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DebugTogglePlayerInvincible");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_DropWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_DropWeapon(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_DropWeapon");

	Params::BPI_NocePlayerCharacter_C_BPI_DropWeapon Parms{};

	Parms.Impulse = std::move(Impulse);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_EnableForceStay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_EnableForceStay(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_EnableForceStay");

	Params::BPI_NocePlayerCharacter_C_BPI_EnableForceStay Parms{};

	Parms.InEnable = InEnable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_EnableMaterialsClaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_EnableMaterialsClaw(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_EnableMaterialsClaw");

	Params::BPI_NocePlayerCharacter_C_BPI_EnableMaterialsClaw Parms{};

	Parms.InEnable = InEnable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_EnableMaterialsClawG
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_EnableMaterialsClawG(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_EnableMaterialsClawG");

	Params::BPI_NocePlayerCharacter_C_BPI_EnableMaterialsClawG Parms{};

	Parms.InEnable = InEnable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_EndFaceTargetCameraMode
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_EndFaceTargetCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_EndFaceTargetCameraMode");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_EndWeddingCameraMode
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_EndWeddingCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_EndWeddingCameraMode");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_GetAudioProbeLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_GetAudioProbeLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_GetAudioProbeLocation");

	Params::BPI_NocePlayerCharacter_C_BPI_GetAudioProbeLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_GetCameraViewRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NocePlayerCharacter_C::BPI_GetCameraViewRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_GetCameraViewRotation");

	Params::BPI_NocePlayerCharacter_C_BPI_GetCameraViewRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_GetCounterAutoAimSearchInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutHalfAngle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_GetCounterAutoAimSearchInfo(double* OutRadius, double* OutHalfAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_GetCounterAutoAimSearchInfo");

	Params::BPI_NocePlayerCharacter_C_BPI_GetCounterAutoAimSearchInfo Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;

	if (OutHalfAngle != nullptr)
		*OutHalfAngle = Parms.OutHalfAngle;
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_HandleDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAttackHitResult&      InAttackHitResult                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void IBPI_NocePlayerCharacter_C::BPI_HandleDamage(const struct FNoceAttackHitResult& InAttackHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_HandleDamage");

	Params::BPI_NocePlayerCharacter_C_BPI_HandleDamage Parms{};

	Parms.InAttackHitResult = std::move(InAttackHitResult);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_HandleOnSlopeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsOnSlope                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_HandleOnSlopeChanged(bool InIsOnSlope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_HandleOnSlopeChanged");

	Params::BPI_NocePlayerCharacter_C_BPI_HandleOnSlopeChanged Parms{};

	Parms.InIsOnSlope = InIsOnSlope;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_InRealBattleStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_InRealBattleStatus(bool* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_InRealBattleStatus");

	Params::BPI_NocePlayerCharacter_C_BPI_InRealBattleStatus Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_LockInputWithDuration
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAcceptAction                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAcceptAxis                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAcceptUIAction                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAcceptCamera                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InToken                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_LockInputWithDuration(bool InAcceptAction, bool InAcceptAxis, bool InAcceptUIAction, bool InAcceptCamera, class FName InToken, double InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_LockInputWithDuration");

	Params::BPI_NocePlayerCharacter_C_BPI_LockInputWithDuration Parms{};

	Parms.InAcceptAction = InAcceptAction;
	Parms.InAcceptAxis = InAcceptAxis;
	Parms.InAcceptUIAction = InAcceptUIAction;
	Parms.InAcceptCamera = InAcceptCamera;
	Parms.InToken = InToken;
	Parms.InDuration = InDuration;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_RemoveBattling
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_RemoveBattling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_RemoveBattling");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ResetCustomCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_ResetCustomCamera(bool WithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ResetCustomCamera");

	Params::BPI_NocePlayerCharacter_C_BPI_ResetCustomCamera Parms{};

	Parms.WithInterpolation = WithInterpolation;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ResetToPreviousCamera
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NocePlayerCharacter_C::BPI_ResetToPreviousCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ResetToPreviousCamera");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_SetCameraViewRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NocePlayerCharacter_C::BPI_SetCameraViewRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_SetCameraViewRotation");

	Params::BPI_NocePlayerCharacter_C_BPI_SetCameraViewRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_SetClawFurWPOIntensityForCutscene
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_SetClawFurWPOIntensityForCutscene(double InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_SetClawFurWPOIntensityForCutscene");

	Params::BPI_NocePlayerCharacter_C_BPI_SetClawFurWPOIntensityForCutscene Parms{};

	Parms.InValue = InValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_SetCollisionResponseIgnorePawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ignore                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_SetCollisionResponseIgnorePawn(bool Ignore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_SetCollisionResponseIgnorePawn");

	Params::BPI_NocePlayerCharacter_C_BPI_SetCollisionResponseIgnorePawn Parms{};

	Parms.Ignore = Ignore;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_SetPlayerIdleVarInt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IdleVarInt                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_SetPlayerIdleVarInt(int32 IdleVarInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_SetPlayerIdleVarInt");

	Params::BPI_NocePlayerCharacter_C_BPI_SetPlayerIdleVarInt Parms{};

	Parms.IdleVarInt = IdleVarInt;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_SetPlayerIdleVarTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  OverwriteIdleVarTime                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_SetPlayerIdleVarTime(double OverwriteIdleVarTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_SetPlayerIdleVarTime");

	Params::BPI_NocePlayerCharacter_C_BPI_SetPlayerIdleVarTime Parms{};

	Parms.OverwriteIdleVarTime = OverwriteIdleVarTime;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_ShowCloth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_ShowCloth(class FName InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_ShowCloth");

	Params::BPI_NocePlayerCharacter_C_BPI_ShowCloth Parms{};

	Parms.InValue = InValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_StartFaceTargetCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InTargetActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_StartFaceTargetCameraMode(class AActor* InTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_StartFaceTargetCameraMode");

	Params::BPI_NocePlayerCharacter_C_BPI_StartFaceTargetCameraMode Parms{};

	Parms.InTargetActor = InTargetActor;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_StartFaceTargetCameraModeWithRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NocePlayerCharacter_C::BPI_StartFaceTargetCameraModeWithRotation(const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_StartFaceTargetCameraModeWithRotation");

	Params::BPI_NocePlayerCharacter_C_BPI_StartFaceTargetCameraModeWithRotation Parms{};

	Parms.InRotation = std::move(InRotation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_StartRunTo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRunToRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  InRunToDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_StartRunTo(const struct FRotator& InRunToRotation, double InRunToDuration, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_StartRunTo");

	Params::BPI_NocePlayerCharacter_C_BPI_StartRunTo Parms{};

	Parms.InRunToRotation = std::move(InRunToRotation);
	Parms.InRunToDuration = InRunToDuration;
	Parms.InLimitInput = InLimitInput;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_StartWeddingCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NocePlayerCharacter_C::BPI_StartWeddingCameraMode(const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_StartWeddingCameraMode");

	Params::BPI_NocePlayerCharacter_C_BPI_StartWeddingCameraMode Parms{};

	Parms.InRotation = std::move(InRotation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_StopWalking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_StopWalking(bool IsStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_StopWalking");

	Params::BPI_NocePlayerCharacter_C_BPI_StopWalking Parms{};

	Parms.IsStop = IsStop;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_SwitchWeaponAudioType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InSwitchValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_SwitchWeaponAudioType(const struct FGameplayTag& InSwitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_SwitchWeaponAudioType");

	Params::BPI_NocePlayerCharacter_C_BPI_SwitchWeaponAudioType Parms{};

	Parms.InSwitchValue = std::move(InSwitchValue);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_TestHellModeDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNoceHellModeDataAsset*           InHellModeDataAsset                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_TestHellModeDamage(class UNoceHellModeDataAsset* InHellModeDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_TestHellModeDamage");

	Params::BPI_NocePlayerCharacter_C_BPI_TestHellModeDamage Parms{};

	Parms.InHellModeDataAsset = InHellModeDataAsset;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_WalkToLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStartDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InTargetLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCameraLerpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_WalkToLocation(double InStartDelayTime, const struct FVector& InTargetLocation, double InCameraLerpTime, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_WalkToLocation");

	Params::BPI_NocePlayerCharacter_C_BPI_WalkToLocation Parms{};

	Parms.InStartDelayTime = InStartDelayTime;
	Parms.InTargetLocation = std::move(InTargetLocation);
	Parms.InCameraLerpTime = InCameraLerpTime;
	Parms.InLimitInput = InLimitInput;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C.BPI_WalkToWithCameraRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStartDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  InCameraRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   InWalkToLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCameraLerpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NocePlayerCharacter_C::BPI_WalkToWithCameraRotation(double InStartDelayTime, const struct FRotator& InCameraRotation, const struct FVector& InWalkToLocation, double InCameraLerpTime, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NocePlayerCharacter_C", "BPI_WalkToWithCameraRotation");

	Params::BPI_NocePlayerCharacter_C_BPI_WalkToWithCameraRotation Parms{};

	Parms.InStartDelayTime = InStartDelayTime;
	Parms.InCameraRotation = std::move(InCameraRotation);
	Parms.InWalkToLocation = std::move(InWalkToLocation);
	Parms.InCameraLerpTime = InCameraLerpTime;
	Parms.InLimitInput = InLimitInput;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

