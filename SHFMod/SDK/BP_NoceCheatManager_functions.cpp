#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceCheatManager

#include "Basic.hpp"

#include "BP_NoceCheatManager_classes.hpp"
#include "BP_NoceCheatManager_parameters.hpp"


namespace SDK
{

// Function BP_NoceCheatManager.BP_NoceCheatManager_C.BP_Debug_SetWeaponDurability
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::BP_Debug_SetWeaponDurability(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "BP_Debug_SetWeaponDurability");

	Params::BP_NoceCheatManager_C_BP_Debug_SetWeaponDurability Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.CheckIndicatorOnProgressChanged
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewTag                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::CheckIndicatorOnProgressChanged(const struct FGameplayTag& NewTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "CheckIndicatorOnProgressChanged");

	Params::BP_NoceCheatManager_C_CheckIndicatorOnProgressChanged Parms{};

	Parms.NewTag = std::move(NewTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Completed_362885874529DE0C7F2BB9961ADDA698
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Completed_362885874529DE0C7F2BB9961ADDA698(class USaveGame* SaveGame, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Completed_362885874529DE0C7F2BB9961ADDA698");

	Params::BP_NoceCheatManager_C_Completed_362885874529DE0C7F2BB9961ADDA698 Parms{};

	Parms.SaveGame = SaveGame;
	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_AsyncAutoSave
// (Exec, Event, Protected, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_AsyncAutoSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_AsyncAutoSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_DisableAllEngineStats
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_DisableAllEngineStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_DisableAllEngineStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_DisableShiroFogGameOver
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_DisableShiroFogGameOver(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_DisableShiroFogGameOver");

	Params::BP_NoceCheatManager_C_Debug_DisableShiroFogGameOver Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnableShiroFogEffect
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_EnableShiroFogEffect(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnableShiroFogEffect");

	Params::BP_NoceCheatManager_C_Debug_EnableShiroFogEffect Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnableShiroFogSpawner
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_EnableShiroFogSpawner(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnableShiroFogSpawner");

	Params::BP_NoceCheatManager_C_Debug_EnableShiroFogSpawner Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnableTentacleNodeDetection
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_EnableTentacleNodeDetection(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnableTentacleNodeDetection");

	Params::BP_NoceCheatManager_C_Debug_EnableTentacleNodeDetection Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnemyLinkNearest
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_EnemyLinkNearest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnemyLinkNearest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnemyLinkNearestByType
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InEnemyType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_EnemyLinkNearestByType(int32 InEnemyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnemyLinkNearestByType");

	Params::BP_NoceCheatManager_C_Debug_EnemyLinkNearestByType Parms{};

	Parms.InEnemyType = InEnemyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnmDrawNaviTarget
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_EnmDrawNaviTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnmDrawNaviTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_EnmToggleAttackSlotInfo
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_EnmToggleAttackSlotInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_EnmToggleAttackSlotInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_GoGameOverFlow
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_GoGameOverFlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_GoGameOverFlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_GoNextIndicator
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Num                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_GoNextIndicator(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_GoNextIndicator");

	Params::BP_NoceCheatManager_C_Debug_GoNextIndicator Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_GoNextIndicatorInternal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_GoNextIndicatorInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_GoNextIndicatorInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_HideLoadingScreen
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHide                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_HideLoadingScreen(bool IsHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_HideLoadingScreen");

	Params::BP_NoceCheatManager_C_Debug_HideLoadingScreen Parms{};

	Parms.IsHide = IsHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_KillAllEnemies
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_KillAllEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_KillAllEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_KillAllEnemiesNotRevive
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_KillAllEnemiesNotRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_KillAllEnemiesNotRevive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_NoCostClawTransform
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_NoCostClawTransform(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_NoCostClawTransform");

	Params::BP_NoceCheatManager_C_Debug_NoCostClawTransform Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_NoCostStamina
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_NoCostStamina(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_NoCostStamina");

	Params::BP_NoceCheatManager_C_Debug_NoCostStamina Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_NoStaminaTiredTimerTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_NoStaminaTiredTimerTick(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_NoStaminaTiredTimerTick");

	Params::BP_NoceCheatManager_C_Debug_NoStaminaTiredTimerTick Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_OpenSesame
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_OpenSesame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_OpenSesame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PerformanceSavingMode
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PerformanceSavingMode(bool Activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PerformanceSavingMode");

	Params::BP_NoceCheatManager_C_Debug_PerformanceSavingMode Parms{};

	Parms.Activate = Activate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PlayerAutoRevive
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    on                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PlayerAutoRevive(bool on)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PlayerAutoRevive");

	Params::BP_NoceCheatManager_C_Debug_PlayerAutoRevive Parms{};

	Parms.on = on;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PlayerDamageReaction
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InWinceIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PlayerDamageReaction(int32 InWinceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PlayerDamageReaction");

	Params::BP_NoceCheatManager_C_Debug_PlayerDamageReaction Parms{};

	Parms.InWinceIndex = InWinceIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PlayerDeathBack
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeathType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PlayerDeathBack(int32 DeathType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PlayerDeathBack");

	Params::BP_NoceCheatManager_C_Debug_PlayerDeathBack Parms{};

	Parms.DeathType = DeathType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PlayerDeathFront
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeathType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PlayerDeathFront(int32 DeathType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PlayerDeathFront");

	Params::BP_NoceCheatManager_C_Debug_PlayerDeathFront Parms{};

	Parms.DeathType = DeathType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PlayerForceBattle
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PlayerForceBattle(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PlayerForceBattle");

	Params::BP_NoceCheatManager_C_Debug_PlayerForceBattle Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PlayIdleVarInt
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DebugIdleVarInt                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PlayIdleVarInt(int32 DebugIdleVarInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PlayIdleVarInt");

	Params::BP_NoceCheatManager_C_Debug_PlayIdleVarInt Parms{};

	Parms.DebugIdleVarInt = DebugIdleVarInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_BreakDown
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_PP_BreakDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_BreakDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_DisableSharpen
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PP_DisableSharpen(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_DisableSharpen");

	Params::BP_NoceCheatManager_C_Debug_PP_DisableSharpen Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_HellModeSpiritAttack
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_PP_HellModeSpiritAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_HellModeSpiritAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_HPWarnings
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PP_HPWarnings(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_HPWarnings");

	Params::BP_NoceCheatManager_C_Debug_PP_HPWarnings Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_JustDodge
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_PP_JustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_JustDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_SanityFocus
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PP_SanityFocus(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_SanityFocus");

	Params::BP_NoceCheatManager_C_Debug_PP_SanityFocus Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_SanityWeak
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PP_SanityWeak(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_SanityWeak");

	Params::BP_NoceCheatManager_C_Debug_PP_SanityWeak Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_PP_ShiromukuRevive
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_PP_ShiromukuRevive(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_PP_ShiromukuRevive");

	Params::BP_NoceCheatManager_C_Debug_PP_ShiromukuRevive Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_RemoveDevFog
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_RemoveDevFog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_RemoveDevFog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetDataLayerRuntimeState
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetDataLayerRuntimeState(class FName Label, int32 State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetDataLayerRuntimeState");

	Params::BP_NoceCheatManager_C_Debug_SetDataLayerRuntimeState Parms{};

	Parms.Label = Label;
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetDevFog
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InFogMax                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetDevFog(class FName InType, int32 InFogMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetDevFog");

	Params::BP_NoceCheatManager_C_Debug_SetDevFog Parms{};

	Parms.InType = InType;
	Parms.InFogMax = InFogMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetDevFogInternal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TableIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxRowIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequest                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetDevFogInternal(int32 TableIndex, int32 MaxRowIndex, bool IsRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetDevFogInternal");

	Params::BP_NoceCheatManager_C_Debug_SetDevFogInternal Parms{};

	Parms.TableIndex = TableIndex;
	Parms.MaxRowIndex = MaxRowIndex;
	Parms.IsRequest = IsRequest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetFarmQuizIndex
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetFarmQuizIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetFarmQuizIndex");

	Params::BP_NoceCheatManager_C_Debug_SetFarmQuizIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetPlayerIdleVarTime
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetPlayerIdleVarTime(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetPlayerIdleVarTime");

	Params::BP_NoceCheatManager_C_Debug_SetPlayerIdleVarTime Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetPlayerInvincible
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetPlayerInvincible(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetPlayerInvincible");

	Params::BP_NoceCheatManager_C_Debug_SetPlayerInvincible Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SetVirtualPositionDivide
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SetVirtualPositionDivide(double InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SetVirtualPositionDivide");

	Params::BP_NoceCheatManager_C_Debug_SetVirtualPositionDivide Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_ShowInspectDebugInfo
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsShow                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_ShowInspectDebugInfo(bool IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_ShowInspectDebugInfo");

	Params::BP_NoceCheatManager_C_Debug_ShowInspectDebugInfo Parms{};

	Parms.IsShow = IsShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_ShowLockDebugInfo
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsShow                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_ShowLockDebugInfo(bool IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_ShowLockDebugInfo");

	Params::BP_NoceCheatManager_C_Debug_ShowLockDebugInfo Parms{};

	Parms.IsShow = IsShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SkipCutScene
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SkipCutScene(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SkipCutScene");

	Params::BP_NoceCheatManager_C_Debug_SkipCutScene Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SkipFarmGimmick
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_SkipFarmGimmick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SkipFarmGimmick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SkipPotionRoomGimmick
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_SkipPotionRoomGimmick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SkipPotionRoomGimmick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SpawnEnemy
// (Exec, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_SpawnEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SpawnEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SSwordBundle
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_SSwordBundle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SSwordBundle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SwitchCameraMode
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InMode                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SwitchCameraMode(int32 InMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SwitchCameraMode");

	Params::BP_NoceCheatManager_C_Debug_SwitchCameraMode Parms{};

	Parms.InMode = InMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_SwtichGlobalAttackSlotMethod
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Int                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_SwtichGlobalAttackSlotMethod(int32 Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_SwtichGlobalAttackSlotMethod");

	Params::BP_NoceCheatManager_C_Debug_SwtichGlobalAttackSlotMethod Parms{};

	Parms.Int = Int;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_TeleportTo
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Gateway                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_TeleportTo(double X, double Y, double Z, class FName Gateway)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_TeleportTo");

	Params::BP_NoceCheatManager_C_Debug_TeleportTo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Gateway = Gateway;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_TentacleLinkMotion
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LinkName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_TentacleLinkMotion(class FName LinkName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_TentacleLinkMotion");

	Params::BP_NoceCheatManager_C_Debug_TentacleLinkMotion Parms{};

	Parms.LinkName = LinkName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_ToggleErosionTentacleInfo
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_ToggleErosionTentacleInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_ToggleErosionTentacleInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_TogglePlayerInvincible
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_TogglePlayerInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_TogglePlayerInvincible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_ToggleShowErosionTentacle
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_ToggleShowErosionTentacle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_ToggleShowErosionTentacle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_ToggleShowHidePlayer
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::Debug_ToggleShowHidePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_ToggleShowHidePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_UseHina
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ResetWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_UseHina(bool ResetWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_UseHina");

	Params::BP_NoceCheatManager_C_Debug_UseHina Parms{};

	Parms.ResetWeapon = ResetWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.Debug_UseHinaClaw
// (Exec, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ResetWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::Debug_UseHinaClaw(bool ResetWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "Debug_UseHinaClaw");

	Params::BP_NoceCheatManager_C_Debug_UseHinaClaw Parms{};

	Parms.ResetWeapon = ResetWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.DebugJump
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::DebugJump(class FName Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "DebugJump");

	Params::BP_NoceCheatManager_C_DebugJump Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.DebugShowAchievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RecordName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::DebugShowAchievement(class FName RecordName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "DebugShowAchievement");

	Params::BP_NoceCheatManager_C_DebugShowAchievement Parms{};

	Parms.RecordName = RecordName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.ExecuteUbergraph_BP_NoceCheatManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::ExecuteUbergraph_BP_NoceCheatManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "ExecuteUbergraph_BP_NoceCheatManager");

	Params::BP_NoceCheatManager_C_ExecuteUbergraph_BP_NoceCheatManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.GetDialogParentTables
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCompositeDataTable*              CompositeDataTable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UDataTable*>               ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class UDataTable*> UBP_NoceCheatManager_C::GetDialogParentTables(class UCompositeDataTable* CompositeDataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "GetDialogParentTables");

	Params::BP_NoceCheatManager_C_GetDialogParentTables Parms{};

	Parms.CompositeDataTable = CompositeDataTable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.InitializeProgressIndicator
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InProgress                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_NoceCheatManager_C::InitializeProgressIndicator(const struct FGameplayTag& InProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "InitializeProgressIndicator");

	Params::BP_NoceCheatManager_C_InitializeProgressIndicator Parms{};

	Parms.InProgress = std::move(InProgress);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.NextProgressTrigger
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::NextProgressTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "NextProgressTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.OnSpawnEnemyWindowDecided
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNeoCheatPopWindowOutputParam&Results                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_NoceCheatManager_C::OnSpawnEnemyWindowDecided(const struct FNeoCheatPopWindowOutputParam& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "OnSpawnEnemyWindowDecided");

	Params::BP_NoceCheatManager_C_OnSpawnEnemyWindowDecided Parms{};

	Parms.Results = std::move(Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)

void UBP_NoceCheatManager_C::ReceiveEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "ReceiveEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.ReceiveInitCheatManager
// (Event, Public, BlueprintEvent)

void UBP_NoceCheatManager_C::ReceiveInitCheatManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "ReceiveInitCheatManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.RecordMode
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::RecordMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "RecordMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.ShowNavMesh
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::ShowNavMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "ShowNavMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.ToggleAreaFogLightTest
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::ToggleAreaFogLightTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "ToggleAreaFogLightTest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceCheatManager.BP_NoceCheatManager_C.TogglePlayerGravity
// (Exec, Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceCheatManager_C::TogglePlayerGravity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceCheatManager_C", "TogglePlayerGravity");

	UObject::ProcessEvent(Func, nullptr);
}

}

