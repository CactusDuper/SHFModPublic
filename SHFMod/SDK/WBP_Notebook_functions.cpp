#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Notebook

#include "Basic.hpp"

#include "WBP_Notebook_classes.hpp"
#include "WBP_Notebook_parameters.hpp"


namespace SDK
{

// Function WBP_Notebook.WBP_Notebook_C.BP_DisableInputs
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::BP_DisableInputs(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "BP_DisableInputs");

	Params::WBP_Notebook_C_BP_DisableInputs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function WBP_Notebook.WBP_Notebook_C.BP_EnableInputs
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::BP_EnableInputs(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "BP_EnableInputs");

	Params::WBP_Notebook_C_BP_EnableInputs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function WBP_Notebook.WBP_Notebook_C.BP_HideCommon
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::BP_HideCommon(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "BP_HideCommon");

	Params::WBP_Notebook_C_BP_HideCommon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function WBP_Notebook.WBP_Notebook_C.BP_ShowCommon
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::BP_ShowCommon(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "BP_ShowCommon");

	Params::WBP_Notebook_C_BP_ShowCommon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function WBP_Notebook.WBP_Notebook_C.CheckContents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      Content                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TArray<class FName>&              AllGotContents                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              AllNewContents                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              CurrentTabContents                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              CurrentTabNewContents                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Match                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   New                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::CheckContents(const class FName& Content, const TArray<class FName>& AllGotContents, const TArray<class FName>& AllNewContents, const TArray<class FName>& CurrentTabContents, const TArray<class FName>& CurrentTabNewContents, bool* Match, bool* New)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "CheckContents");

	Params::WBP_Notebook_C_CheckContents Parms{};

	Parms.Content = Content;
	Parms.AllGotContents = std::move(AllGotContents);
	Parms.AllNewContents = std::move(AllNewContents);
	Parms.CurrentTabContents = std::move(CurrentTabContents);
	Parms.CurrentTabNewContents = std::move(CurrentTabNewContents);

	UObject::ProcessEvent(Func, &Parms);

	if (Match != nullptr)
		*Match = Parms.Match;

	if (New != nullptr)
		*New = Parms.New;
}


// Function WBP_Notebook.WBP_Notebook_C.CheckPageContents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CurrentCategory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             PageCategory                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>&                    PageContents                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              AllGotContents                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              AllNewContents                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              CurrentTabContents                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              CurrentTabNewContents                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    AllCategoryContents                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   CurrentPageNum                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PageIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   MatchContent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasContent                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   NeedBlankPage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasNew                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::CheckPageContents(class FName CurrentCategory, class FName PageCategory, TArray<class FName>& PageContents, const TArray<class FName>& AllGotContents, const TArray<class FName>& AllNewContents, const TArray<class FName>& CurrentTabContents, const TArray<class FName>& CurrentTabNewContents, TArray<class FName>& AllCategoryContents, int32 CurrentPageNum, int32 PageIndex, bool* MatchContent, bool* HasContent, bool* NeedBlankPage, bool* HasNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "CheckPageContents");

	Params::WBP_Notebook_C_CheckPageContents Parms{};

	Parms.CurrentCategory = CurrentCategory;
	Parms.PageCategory = PageCategory;
	Parms.PageContents = std::move(PageContents);
	Parms.AllGotContents = std::move(AllGotContents);
	Parms.AllNewContents = std::move(AllNewContents);
	Parms.CurrentTabContents = std::move(CurrentTabContents);
	Parms.CurrentTabNewContents = std::move(CurrentTabNewContents);
	Parms.AllCategoryContents = std::move(AllCategoryContents);
	Parms.CurrentPageNum = CurrentPageNum;
	Parms.PageIndex = PageIndex;

	UObject::ProcessEvent(Func, &Parms);

	PageContents = std::move(Parms.PageContents);
	AllCategoryContents = std::move(Parms.AllCategoryContents);

	if (MatchContent != nullptr)
		*MatchContent = Parms.MatchContent;

	if (HasContent != nullptr)
		*HasContent = Parms.HasContent;

	if (NeedBlankPage != nullptr)
		*NeedBlankPage = Parms.NeedBlankPage;

	if (HasNew != nullptr)
		*HasNew = Parms.HasNew;
}


// Function WBP_Notebook.WBP_Notebook_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Notebook_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.ExecuteUbergraph_WBP_Notebook
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::ExecuteUbergraph_WBP_Notebook(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "ExecuteUbergraph_WBP_Notebook");

	Params::WBP_Notebook_C_ExecuteUbergraph_WBP_Notebook Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Notebook.WBP_Notebook_C.Get Init ID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ENoceNotebookType                 Type                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            LeftTabID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            ContentID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::Get_Init_ID(const ENoceNotebookType Type, class FName* LeftTabID, class FName* ContentID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "Get Init ID");

	Params::WBP_Notebook_C_Get_Init_ID Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (LeftTabID != nullptr)
		*LeftTabID = Parms.LeftTabID;

	if (ContentID != nullptr)
		*ContentID = Parms.ContentID;
}


// Function WBP_Notebook.WBP_Notebook_C.GetCurrentCategory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            CurrentCategory                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::GetCurrentCategory(class FName* CurrentCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "GetCurrentCategory");

	Params::WBP_Notebook_C_GetCurrentCategory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentCategory != nullptr)
		*CurrentCategory = Parms.CurrentCategory;
}


// Function WBP_Notebook.WBP_Notebook_C.HandleNotRepeatKeys
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInputEvent&               InInputEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FKey&                      InKey                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_Notebook_C::HandleNotRepeatKeys(const struct FInputEvent& InInputEvent, const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "HandleNotRepeatKeys");

	Params::WBP_Notebook_C_HandleNotRepeatKeys Parms{};

	Parms.InInputEvent = std::move(InInputEvent);
	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Notebook.WBP_Notebook_C.HandleRepeatKeys
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInputEvent&               InInputEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FKey&                      InKey                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_Notebook_C::HandleRepeatKeys(const struct FInputEvent& InInputEvent, const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "HandleRepeatKeys");

	Params::WBP_Notebook_C_HandleRepeatKeys Parms{};

	Parms.InInputEvent = std::move(InInputEvent);
	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Notebook.WBP_Notebook_C.InitCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::InitCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "InitCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.InitEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::InitEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "InitEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.InitIDs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>&                    AllNameIDs_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              HasNameIDs                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const ENoceNotebookType                 Type                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            LeftTabID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::InitIDs(TArray<class FName>& AllNameIDs_0, const TArray<class FName>& HasNameIDs, const ENoceNotebookType Type, class FName* LeftTabID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "InitIDs");

	Params::WBP_Notebook_C_InitIDs Parms{};

	Parms.AllNameIDs_0 = std::move(AllNameIDs_0);
	Parms.HasNameIDs = std::move(HasNameIDs);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	AllNameIDs_0 = std::move(Parms.AllNameIDs_0);

	if (LeftTabID != nullptr)
		*LeftTabID = Parms.LeftTabID;
}


// Function WBP_Notebook.WBP_Notebook_C.InitInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::InitInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "InitInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.InitPuzzle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::InitPuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "InitPuzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.InitTutorial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::InitTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "InitTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.IsCompletePageContents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FName>&                    AllContents                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    CurrentContents                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FNoceNotebookCategoryData& CategoryData                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// ENoceNotebookBookmarkType*              BookmarkType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceNotebookBookmarkSocketType*        SocketType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::IsCompletePageContents(TArray<class FName>& AllContents, TArray<class FName>& CurrentContents, const struct FNoceNotebookCategoryData& CategoryData, ENoceNotebookBookmarkType* BookmarkType, ENoceNotebookBookmarkSocketType* SocketType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "IsCompletePageContents");

	Params::WBP_Notebook_C_IsCompletePageContents Parms{};

	Parms.AllContents = std::move(AllContents);
	Parms.CurrentContents = std::move(CurrentContents);
	Parms.CategoryData = std::move(CategoryData);

	UObject::ProcessEvent(Func, &Parms);

	AllContents = std::move(Parms.AllContents);
	CurrentContents = std::move(Parms.CurrentContents);

	if (BookmarkType != nullptr)
		*BookmarkType = Parms.BookmarkType;

	if (SocketType != nullptr)
		*SocketType = Parms.SocketType;
}


// Function WBP_Notebook.WBP_Notebook_C.OnAnalogValueChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FAnalogInputEvent&         InAnalogInputEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_Notebook_C::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "OnAnalogValueChanged");

	Params::WBP_Notebook_C_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Notebook.WBP_Notebook_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Notebook_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.OnLeftTabRefreshNewIDs
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RemovedID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::OnLeftTabRefreshNewIDs(class FName RemovedID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "OnLeftTabRefreshNewIDs");

	Params::WBP_Notebook_C_OnLeftTabRefreshNewIDs Parms{};

	Parms.RemovedID = RemovedID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Notebook.WBP_Notebook_C.OnLeftTabRefreshSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::OnLeftTabRefreshSelection(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "OnLeftTabRefreshSelection");

	Params::WBP_Notebook_C_OnLeftTabRefreshSelection Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Notebook.WBP_Notebook_C.OnTopTabRefreshSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::OnTopTabRefreshSelection(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "OnTopTabRefreshSelection");

	Params::WBP_Notebook_C_OnTopTabRefreshSelection Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Notebook.WBP_Notebook_C.SetAllData
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Notebook_C::SetAllData(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetAllData");

	Params::WBP_Notebook_C_SetAllData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function WBP_Notebook.WBP_Notebook_C.SetCharacterPages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::SetCharacterPages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetCharacterPages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.SetEnemyPages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::SetEnemyPages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetEnemyPages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.SetIDArrays
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ENoceNotebookType                 Type                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>&                    AllCategoryIDs                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              IDArray                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FName>&              NewIDArray                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_Notebook_C::SetIDArrays(const ENoceNotebookType Type, TArray<class FName>& AllCategoryIDs, const TArray<class FName>& IDArray, const TArray<class FName>& NewIDArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetIDArrays");

	Params::WBP_Notebook_C_SetIDArrays Parms{};

	Parms.Type = Type;
	Parms.AllCategoryIDs = std::move(AllCategoryIDs);
	Parms.IDArray = std::move(IDArray);
	Parms.NewIDArray = std::move(NewIDArray);

	UObject::ProcessEvent(Func, &Parms);

	AllCategoryIDs = std::move(Parms.AllCategoryIDs);
}


// Function WBP_Notebook.WBP_Notebook_C.SetInfoPages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::SetInfoPages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetInfoPages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.SetPuzzlePages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::SetPuzzlePages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetPuzzlePages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Notebook.WBP_Notebook_C.SetTutorialPages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Notebook_C::SetTutorialPages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Notebook_C", "SetTutorialPages");

	UObject::ProcessEvent(Func, nullptr);
}

}

