#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_LightSFX_Actor

#include "Basic.hpp"

#include "BP_Audio_LightSFX_Actor_classes.hpp"
#include "BP_Audio_LightSFX_Actor_parameters.hpp"


namespace SDK
{

// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.AssignLight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNeoAudioTriggerIdHandle&  Lightoff_SFX_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FNeoAudioTriggerIdHandle&  LightSFX_Hum_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FNeoAudioTriggerIdHandle&  Light_SFX_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class ALight*                           Light_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_LightSFX_Actor_C::AssignLight(const struct FNeoAudioTriggerIdHandle& Lightoff_SFX_0, const struct FNeoAudioTriggerIdHandle& LightSFX_Hum_0, bool Condition, const struct FNeoAudioTriggerIdHandle& Light_SFX_0, class ALight* Light_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "AssignLight");

	Params::BP_Audio_LightSFX_Actor_C_AssignLight Parms{};

	Parms.Lightoff_SFX_0 = std::move(Lightoff_SFX_0);
	Parms.LightSFX_Hum_0 = std::move(LightSFX_Hum_0);
	Parms.Condition = Condition;
	Parms.Light_SFX_0 = std::move(Light_SFX_0);
	Parms.Light_0 = Light_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.ExecuteUbergraph_BP_Audio_LightSFX_Actor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_LightSFX_Actor_C::ExecuteUbergraph_BP_Audio_LightSFX_Actor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "ExecuteUbergraph_BP_Audio_LightSFX_Actor");

	Params::BP_Audio_LightSFX_Actor_C_ExecuteUbergraph_BP_Audio_LightSFX_Actor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.GetIntensity
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_LightSFX_Actor_C::GetIntensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "GetIntensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.LightOn
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_LightSFX_Actor_C::LightOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "LightOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Audio_LightSFX_Actor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.ReturnIntensity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  Intensity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_LightSFX_Actor_C::ReturnIntensity(float* Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "ReturnIntensity");

	Params::BP_Audio_LightSFX_Actor_C_ReturnIntensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Intensity != nullptr)
		*Intensity = Parms.Intensity;
}


// Function BP_Audio_LightSFX_Actor.BP_Audio_LightSFX_Actor_C.SetThreshold
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Threshold_Low_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Threshold_High_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Cooldown_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_LightSFX_Actor_C::SetThreshold(double Threshold_Low_0, double Threshold_High_0, float Cooldown_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_LightSFX_Actor_C", "SetThreshold");

	Params::BP_Audio_LightSFX_Actor_C_SetThreshold Parms{};

	Parms.Threshold_Low_0 = Threshold_Low_0;
	Parms.Threshold_High_0 = Threshold_High_0;
	Parms.Cooldown_0 = Cooldown_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

