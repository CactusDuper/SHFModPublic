#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWidgets

#include "Basic.hpp"

#include "AudioWidgets_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class AudioWidgets.AudioMeter
// 0x0598 (0x0710 - 0x0178)
class UAudioMeter final : public UWidget
{
public:
	TArray<struct FMeterChannelInfo>              MeterChannelInfo;                                  // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             MeterChannelInfoDelegate;                          // 0x0188(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioMeterStyle                       WidgetStyle;                                       // 0x01A0(0x04E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  orientation;                                       // 0x0680(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_681[0x3];                                      // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColor;                                   // 0x0684(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterBackgroundColor;                              // 0x0694(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterValueColor;                                   // 0x06A4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterPeakColor;                                    // 0x06B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterClippingColor;                                // 0x06C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterScaleColor;                                   // 0x06D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterScaleLabelColor;                              // 0x06E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F4[0x1C];                                     // 0x06F4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackgroundColor(const struct FLinearColor& InValue);
	void SetMeterBackgroundColor(const struct FLinearColor& InValue);
	void SetMeterChannelInfo(const TArray<struct FMeterChannelInfo>& InMeterChannelInfo);
	void SetMeterClippingColor(const struct FLinearColor& InValue);
	void SetMeterPeakColor(const struct FLinearColor& InValue);
	void SetMeterScaleColor(const struct FLinearColor& InValue);
	void SetMeterScaleLabelColor(const struct FLinearColor& InValue);
	void SetMeterValueColor(const struct FLinearColor& InValue);

	TArray<struct FMeterChannelInfo> GetMeterChannelInfo() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioMeter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioMeter")
	}
	static class UAudioMeter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioMeter>();
	}
};
DUMPER7_ASSERTS_UAudioMeter;

// Class AudioWidgets.AudioOscilloscope
// 0x0538 (0x06B0 - 0x0178)
class UAudioOscilloscope final : public UWidget
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioOscilloscopePanelStyle           OscilloscopeStyle;                                 // 0x0180(0x04C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWindowMs;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalysisPeriodMs;                                  // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTimeGrid;                                     // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXAxisLabelsUnit                              TimeGridLabelsUnit;                                // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAmplitudeGrid;                                // 0x0652(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAmplitudeLabels;                              // 0x0653(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYAxisLabelsUnit                              AmplitudeGridLabelsUnit;                           // 0x0654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTriggerThresholdLine;                         // 0x0655(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_656[0x2];                                      // 0x0656(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerThreshold;                                  // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioPanelLayoutType                         PanelLayoutType;                                   // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65D[0x53];                                     // 0x065D(0x0053)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartProcessing();
	void StopProcessing();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioOscilloscope")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioOscilloscope")
	}
	static class UAudioOscilloscope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioOscilloscope>();
	}
};
DUMPER7_ASSERTS_UAudioOscilloscope;

// Class AudioWidgets.AudioRadialSlider
// 0x0218 (0x0390 - 0x0178)
class alignas(0x10) UAudioRadialSlider : public UWidget
{
public:
	float                                         Value;                                             // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x017C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioRadialSliderLayout                      WidgetLayout;                                      // 0x018C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CenterBackgroundColor;                             // 0x0190(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderProgressColor;                               // 0x01A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBarColor;                                    // 0x01B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HandStartEndRatio;                                 // 0x01C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UnitsText;                                         // 0x01D0(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextLabelBackgroundColor;                          // 0x01E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLabelOnlyOnHover;                              // 0x01F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowUnitsText;                                     // 0x01F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnitsTextReadOnly;                               // 0x01F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValueTextReadOnly;                               // 0x01F3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderThickness;                                   // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutputRange;                                       // 0x01F8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_218[0x178];                                    // 0x0218(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetOutputValue(const float InSliderValue);
	float GetSliderValue(const float OutputValue);
	void SetCenterBackgroundColor(const struct FLinearColor& InValue);
	void SetHandStartEndRatio(const struct FVector2D& InHandStartEndRatio);
	void SetOutputRange(const struct FVector2D& InOutputRange);
	void SetShowLabelOnlyOnHover(const bool bShowLabelOnlyOnHover);
	void SetShowUnitsText(const bool bShowUnitsText);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderProgressColor(const struct FLinearColor& InValue);
	void SetSliderThickness(const float InThickness);
	void SetTextLabelBackgroundColor(const struct FSlateColor& InColor);
	void SetUnitsText(const class FText& Units);
	void SetUnitsTextReadOnly(const bool bIsReadOnly);
	void SetValueTextReadOnly(const bool bIsReadOnly);
	void SetWidgetLayout(EAudioRadialSliderLayout InLayout);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioRadialSlider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioRadialSlider")
	}
	static class UAudioRadialSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioRadialSlider>();
	}
};
DUMPER7_ASSERTS_UAudioRadialSlider;

// Class AudioWidgets.AudioVolumeRadialSlider
// 0x0000 (0x0390 - 0x0390)
class UAudioVolumeRadialSlider final : public UAudioRadialSlider
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioVolumeRadialSlider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioVolumeRadialSlider")
	}
	static class UAudioVolumeRadialSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioVolumeRadialSlider>();
	}
};
DUMPER7_ASSERTS_UAudioVolumeRadialSlider;

// Class AudioWidgets.AudioFrequencyRadialSlider
// 0x0000 (0x0390 - 0x0390)
class UAudioFrequencyRadialSlider final : public UAudioRadialSlider
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioFrequencyRadialSlider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioFrequencyRadialSlider")
	}
	static class UAudioFrequencyRadialSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioFrequencyRadialSlider>();
	}
};
DUMPER7_ASSERTS_UAudioFrequencyRadialSlider;

// Class AudioWidgets.AudioSliderBase
// 0x0848 (0x09C0 - 0x0178)
class alignas(0x10) UAudioSliderBase : public UWidget
{
public:
	float                                         Value;                                             // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnitsText;                                         // 0x0180(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextLabelBackgroundColor;                          // 0x0190(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextLabelBackgroundColorDelegate;                  // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLabelOnlyOnHover;                              // 0x01B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowUnitsText;                                     // 0x01B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnitsTextReadOnly;                               // 0x01B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValueTextReadOnly;                               // 0x01B3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x01B4(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBackgroundColor;                             // 0x01C4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SliderBackgroundColorDelegate;                     // 0x01D4(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBarColor;                                    // 0x01E4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SliderBarColorDelegate;                            // 0x01F4(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderThumbColor;                                  // 0x0204(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SliderThumbColorDelegate;                          // 0x0214(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WidgetBackgroundColor;                             // 0x0224(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             WidgetBackgroundColorDelegate;                     // 0x0234(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  orientation;                                       // 0x0244(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x768];                                    // 0x0258(0x0768)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetLinValue(const float OutputValue);
	float GetOutputValue(const float InSliderValue);
	float GetSliderValue(const float OutputValue);
	void SetShowLabelOnlyOnHover(const bool bShowLabelOnlyOnHover);
	void SetShowUnitsText(const bool bShowUnitsText);
	void SetSliderBackgroundColor(const struct FLinearColor& InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderThumbColor(const struct FLinearColor& InValue);
	void SetTextLabelBackgroundColor(const struct FSlateColor& InColor);
	void SetUnitsText(const class FText& Units);
	void SetUnitsTextReadOnly(const bool bIsReadOnly);
	void SetValueTextReadOnly(const bool bIsReadOnly);
	void SetWidgetBackgroundColor(const struct FLinearColor& InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioSliderBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioSliderBase")
	}
	static class UAudioSliderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSliderBase>();
	}
};
DUMPER7_ASSERTS_UAudioSliderBase;

// Class AudioWidgets.AudioSlider
// 0x0010 (0x09D0 - 0x09C0)
class UAudioSlider : public UAudioSliderBase
{
public:
	TWeakObjectPtr<class UCurveFloat>             LinToOutputCurve;                                  // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UCurveFloat>             OutputToLinCurve;                                  // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioSlider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioSlider")
	}
	static class UAudioSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSlider>();
	}
};
DUMPER7_ASSERTS_UAudioSlider;

// Class AudioWidgets.AudioVolumeSlider
// 0x0000 (0x09D0 - 0x09D0)
class UAudioVolumeSlider final : public UAudioSlider
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioVolumeSlider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioVolumeSlider")
	}
	static class UAudioVolumeSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioVolumeSlider>();
	}
};
DUMPER7_ASSERTS_UAudioVolumeSlider;

// Class AudioWidgets.AudioFrequencySlider
// 0x0010 (0x09D0 - 0x09C0)
class UAudioFrequencySlider final : public UAudioSliderBase
{
public:
	struct FVector2D                              OutputRange;                                       // 0x09C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioFrequencySlider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioFrequencySlider")
	}
	static class UAudioFrequencySlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioFrequencySlider>();
	}
};
DUMPER7_ASSERTS_UAudioFrequencySlider;

// Class AudioWidgets.AudioVectorscope
// 0x0238 (0x03B0 - 0x0178)
class UAudioVectorscope final : public UWidget
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioVectorscopePanelStyle            VectorscopeStyle;                                  // 0x0180(0x01C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGrid;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridDivisions;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayPersistenceMs;                              // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioPanelLayoutType                         PanelLayoutType;                                   // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x57];                                     // 0x0359(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartProcessing();
	void StopProcessing();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioVectorscope")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioVectorscope")
	}
	static class UAudioVectorscope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioVectorscope>();
	}
};
DUMPER7_ASSERTS_UAudioVectorscope;

}

