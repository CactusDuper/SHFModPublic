#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceAnalyticsInstance

#include "Basic.hpp"

#include "BP_NoceAnalyticsInstance_classes.hpp"
#include "BP_NoceAnalyticsInstance_parameters.hpp"


namespace SDK
{

// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.CheckToEndBattle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::CheckToEndBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "CheckToEndBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.CREATEDELEGATE_PROXYFUNCTION_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagExists                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::CREATEDELEGATE_PROXYFUNCTION_0(const struct FGameplayTag& Tag, bool TagExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "CREATEDELEGATE_PROXYFUNCTION_0");

	Params::BP_NoceAnalyticsInstance_C_CREATEDELEGATE_PROXYFUNCTION_0 Parms{};

	Parms.Tag = std::move(Tag);
	Parms.TagExists = TagExists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.CREATEDELEGATE_PROXYFUNCTION_1
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagExists                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::CREATEDELEGATE_PROXYFUNCTION_1(const struct FGameplayTag& Tag, bool TagExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "CREATEDELEGATE_PROXYFUNCTION_1");

	Params::BP_NoceAnalyticsInstance_C_CREATEDELEGATE_PROXYFUNCTION_1 Parms{};

	Parms.Tag = std::move(Tag);
	Parms.TagExists = TagExists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.Deinitialize_BP
// (Event, Protected, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::Deinitialize_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "Deinitialize_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.DumpProperties
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const TMap<class FString, class FString>&PropertyNameValueMap                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_NoceAnalyticsInstance_C::DumpProperties(const class FString& EventName, const TMap<class FString, class FString>& PropertyNameValueMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "DumpProperties");

	Params::BP_NoceAnalyticsInstance_C_DumpProperties Parms{};

	Parms.EventName = std::move(EventName);
	Parms.PropertyNameValueMap = std::move(PropertyNameValueMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.EndSession_BP
// (Event, Protected, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::EndSession_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "EndSession_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.ExecuteUbergraph_BP_NoceAnalyticsInstance
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::ExecuteUbergraph_BP_NoceAnalyticsInstance(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "ExecuteUbergraph_BP_NoceAnalyticsInstance");

	Params::BP_NoceAnalyticsInstance_C_ExecuteUbergraph_BP_NoceAnalyticsInstance Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.GetAnalyticsType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString*                          PrefixName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::GetAnalyticsType(class FString* PrefixName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "GetAnalyticsType");

	Params::BP_NoceAnalyticsInstance_C_GetAnalyticsType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PrefixName != nullptr)
		*PrefixName = std::move(Parms.PrefixName);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.GetUserId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString*                          UserId                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::GetUserId(class FString* UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "GetUserId");

	Params::BP_NoceAnalyticsInstance_C_GetUserId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UserId != nullptr)
		*UserId = std::move(Parms.UserId);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.Initialize_BP
// (Event, Protected, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::Initialize_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "Initialize_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.OnGameplayTagUpdated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InGameplayTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsTagExists                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::OnGameplayTagUpdated(const struct FGameplayTag& InGameplayTag, bool InIsTagExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "OnGameplayTagUpdated");

	Params::BP_NoceAnalyticsInstance_C_OnGameplayTagUpdated Parms{};

	Parms.InGameplayTag = std::move(InGameplayTag);
	Parms.InIsTagExists = InIsTagExists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.RecordAllRecordProperties
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::RecordAllRecordProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "RecordAllRecordProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.RegisterSystems_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ANoceGameState*                   InNoceGameState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ANocePlayerState*                 InNocePlayerState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::RegisterSystems_BP(class ANoceGameState* InNoceGameState, class ANocePlayerState* InNocePlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "RegisterSystems_BP");

	Params::BP_NoceAnalyticsInstance_C_RegisterSystems_BP Parms{};

	Parms.InNoceGameState = InNoceGameState;
	Parms.InNocePlayerState = InNocePlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.StartSession_BP
// (Event, Protected, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::StartSession_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "StartSession_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.UnregisterSystems_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ANoceGameState*                   InNoceGameState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ANocePlayerState*                 InNocePlayerState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceAnalyticsInstance_C::UnregisterSystems_BP(class ANoceGameState* InNoceGameState, class ANocePlayerState* InNocePlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "UnregisterSystems_BP");

	Params::BP_NoceAnalyticsInstance_C_UnregisterSystems_BP Parms{};

	Parms.InNoceGameState = InNoceGameState;
	Parms.InNocePlayerState = InNocePlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceAnalyticsInstance.BP_NoceAnalyticsInstance_C.UpdateFilename
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceAnalyticsInstance_C::UpdateFilename()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceAnalyticsInstance_C", "UpdateFilename");

	UObject::ProcessEvent(Func, nullptr);
}

}

