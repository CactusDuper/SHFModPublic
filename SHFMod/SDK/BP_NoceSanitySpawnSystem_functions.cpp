#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceSanitySpawnSystem

#include "Basic.hpp"

#include "BP_NoceSanitySpawnSystem_classes.hpp"
#include "BP_NoceSanitySpawnSystem_parameters.hpp"


namespace SDK
{

// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.AddReappearEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSoftClassPath&            Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  TimeMax                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TimeMin                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HPRatio                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::AddReappearEnemy(const struct FSoftClassPath& Enemy, double TimeMax, double TimeMin, double HPRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "AddReappearEnemy");

	Params::BP_NoceSanitySpawnSystem_C_AddReappearEnemy Parms{};

	Parms.Enemy = std::move(Enemy);
	Parms.TimeMax = TimeMax;
	Parms.TimeMin = TimeMin;
	Parms.HPRatio = HPRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.AdjustEnemyLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            SpawnedEnemy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpawnLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::AdjustEnemyLocation(class APawn* SpawnedEnemy, const struct FVector& SpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "AdjustEnemyLocation");

	Params::BP_NoceSanitySpawnSystem_C_AdjustEnemyLocation Parms{};

	Parms.SpawnedEnemy = SpawnedEnemy;
	Parms.SpawnLocation = std::move(SpawnLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.CheckProbability
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseProbability                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSanitySpawnProbabilitySetting&ProbabilitySetting                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::CheckProbability(bool UseProbability, const struct FSanitySpawnProbabilitySetting& ProbabilitySetting, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "CheckProbability");

	Params::BP_NoceSanitySpawnSystem_C_CheckProbability Parms{};

	Parms.UseProbability = UseProbability;
	Parms.ProbabilitySetting = std::move(ProbabilitySetting);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.EnterSpawnVolume_BP
// (Event, Protected, BlueprintEvent)

void UBP_NoceSanitySpawnSystem_C::EnterSpawnVolume_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "EnterSpawnVolume_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.ExecuteUbergraph_BP_NoceSanitySpawnSystem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::ExecuteUbergraph_BP_NoceSanitySpawnSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "ExecuteUbergraph_BP_NoceSanitySpawnSystem");

	Params::BP_NoceSanitySpawnSystem_C_ExecuteUbergraph_BP_NoceSanitySpawnSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.ForceEnemyFindPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Enm                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::ForceEnemyFindPlayer(class APawn* Enm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "ForceEnemyFindPlayer");

	Params::BP_NoceSanitySpawnSystem_C_ForceEnemyFindPlayer Parms{};

	Parms.Enm = Enm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.ForceSpawn
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FSanitySpawnVolumeSetting& Setting                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_NoceSanitySpawnSystem_C::ForceSpawn(const struct FSanitySpawnVolumeSetting& Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "ForceSpawn");

	Params::BP_NoceSanitySpawnSystem_C_ForceSpawn Parms{};

	Parms.Setting = std::move(Setting);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.GetSettingFromCurrVol
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::GetSettingFromCurrVol(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "GetSettingFromCurrVol");

	Params::BP_NoceSanitySpawnSystem_C_GetSettingFromCurrVol Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.Initialize_BP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_NoceSanitySpawnSystem_C::Initialize_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "Initialize_BP");

	Params::BP_NoceSanitySpawnSystem_C_Initialize_BP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.IsClearInBlockDist
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::IsClearInBlockDist(const struct FVector& Location, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "IsClearInBlockDist");

	Params::BP_NoceSanitySpawnSystem_C_IsClearInBlockDist Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.ReachSpawnMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::ReachSpawnMax(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "ReachSpawnMax");

	Params::BP_NoceSanitySpawnSystem_C_ReachSpawnMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.Set Target Spawners
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ANoceAISpawner*>&          Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_NoceSanitySpawnSystem_C::Set_Target_Spawners(TArray<class ANoceAISpawner*>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "Set Target Spawners");

	Params::BP_NoceSanitySpawnSystem_C_Set_Target_Spawners Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.SetEnableReappearSystem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ClearCurrEnemy                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ClearTimer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::SetEnableReappearSystem(bool Enable, bool ClearCurrEnemy, bool ClearTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "SetEnableReappearSystem");

	Params::BP_NoceSanitySpawnSystem_C_SetEnableReappearSystem Parms{};

	Parms.Enable = Enable;
	Parms.ClearCurrEnemy = ClearCurrEnemy;
	Parms.ClearTimer = ClearTimer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.SetReappearEnemyHP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Enm                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::SetReappearEnemyHP(class APawn* Enm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "SetReappearEnemyHP");

	Params::BP_NoceSanitySpawnSystem_C_SetReappearEnemyHP Parms{};

	Parms.Enm = Enm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.SetupSpawnParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::SetupSpawnParam(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "SetupSpawnParam");

	Params::BP_NoceSanitySpawnSystem_C_SetupSpawnParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.Spawn Enemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEnvQueryInstanceBlueprintWrapper*QueryInstance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EEnvQueryStatus                         QueryStatus                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::Spawn_Enemy(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "Spawn Enemy");

	Params::BP_NoceSanitySpawnSystem_C_Spawn_Enemy Parms{};

	Parms.QueryInstance = QueryInstance;
	Parms.QueryStatus = QueryStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.SpawnEQSQueryPawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_NoceSanitySpawnSystem_C::SpawnEQSQueryPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "SpawnEQSQueryPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.SpawnReappearEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEnvQueryInstanceBlueprintWrapper*QueryInstance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EEnvQueryStatus                         QueryStatus                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::SpawnReappearEnemy(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "SpawnReappearEnemy");

	Params::BP_NoceSanitySpawnSystem_C_SpawnReappearEnemy Parms{};

	Parms.QueryInstance = QueryInstance;
	Parms.QueryStatus = QueryStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.Tick_BP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_NoceSanitySpawnSystem_C::Tick_BP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "Tick_BP");

	Params::BP_NoceSanitySpawnSystem_C_Tick_BP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.UpdateReappearSystem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::UpdateReappearSystem(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "UpdateReappearSystem");

	Params::BP_NoceSanitySpawnSystem_C_UpdateReappearSystem Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceSanitySpawnSystem.BP_NoceSanitySpawnSystem_C.UpdatTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceSanitySpawnSystem_C::UpdatTimer(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceSanitySpawnSystem_C", "UpdatTimer");

	Params::BP_NoceSanitySpawnSystem_C_UpdatTimer Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

