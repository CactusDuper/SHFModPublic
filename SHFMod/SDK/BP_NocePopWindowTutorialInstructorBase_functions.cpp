#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NocePopWindowTutorialInstructorBase

#include "Basic.hpp"

#include "BP_NocePopWindowTutorialInstructorBase_classes.hpp"
#include "BP_NocePopWindowTutorialInstructorBase_parameters.hpp"


namespace SDK
{

// Function BP_NocePopWindowTutorialInstructorBase.BP_NocePopWindowTutorialInstructorBase_C.OnTutorialStart
// (Event, Public, BlueprintEvent)

void ABP_NocePopWindowTutorialInstructorBase_C::OnTutorialStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePopWindowTutorialInstructorBase_C", "OnTutorialStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePopWindowTutorialInstructorBase.BP_NocePopWindowTutorialInstructorBase_C.OnPopWindowClose
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePopWindowTutorialInstructorBase_C::OnPopWindowClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePopWindowTutorialInstructorBase_C", "OnPopWindowClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePopWindowTutorialInstructorBase.BP_NocePopWindowTutorialInstructorBase_C.ExecuteUbergraph_BP_NocePopWindowTutorialInstructorBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePopWindowTutorialInstructorBase_C::ExecuteUbergraph_BP_NocePopWindowTutorialInstructorBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePopWindowTutorialInstructorBase_C", "ExecuteUbergraph_BP_NocePopWindowTutorialInstructorBase");

	Params::BP_NocePopWindowTutorialInstructorBase_C_ExecuteUbergraph_BP_NocePopWindowTutorialInstructorBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

