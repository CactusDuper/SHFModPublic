#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NBMaterialLibrary

#include "Basic.hpp"

#include "NBMaterialLibrary_classes.hpp"
#include "NBMaterialLibrary_parameters.hpp"


namespace SDK
{

// Function NBMaterialLibrary.PreviewSceneManager.BroadcastStreamingLevelComplete
// (Final, Native, Public, BlueprintCallable)

void APreviewSceneManager::BroadcastStreamingLevelComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneManager", "BroadcastStreamingLevelComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NBMaterialLibrary.PreviewSceneManager.InitWhenChangeScene
// (Event, Protected, BlueprintEvent)

void APreviewSceneManager::InitWhenChangeScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneManager", "InitWhenChangeScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NBMaterialLibrary.PreviewSceneManager.LoadLevelInstance
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            Level                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   bOutSuccess                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OptionalLevelNameOverride                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULevelStreamingDynamic>OptionalLevelStreamingClass                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoadAsTempPackage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreamingDynamic*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreamingDynamic* APreviewSceneManager::LoadLevelInstance(TSoftObjectPtr<class UWorld> Level, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const class FString& OptionalLevelNameOverride, TSubclassOf<class ULevelStreamingDynamic> OptionalLevelStreamingClass, bool bLoadAsTempPackage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneManager", "LoadLevelInstance");

	Params::PreviewSceneManager_LoadLevelInstance Parms{};

	Parms.Level = Level;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.OptionalLevelNameOverride = std::move(OptionalLevelNameOverride);
	Parms.OptionalLevelStreamingClass = OptionalLevelStreamingClass;
	Parms.bLoadAsTempPackage = bLoadAsTempPackage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutSuccess != nullptr)
		*bOutSuccess = Parms.bOutSuccess;

	return Parms.ReturnValue;
}


// Function NBMaterialLibrary.PreviewSceneManager.UpdatePreviewScene
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPreviewSceneData&         InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void APreviewSceneManager::UpdatePreviewScene(const struct FPreviewSceneData& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneManager", "UpdatePreviewScene");

	Params::PreviewSceneManager_UpdatePreviewScene Parms{};

	Parms.InData = std::move(InData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NBMaterialLibrary.PreviewSceneManager.IsPackage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APreviewSceneManager::IsPackage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneManager", "IsPackage");

	Params::PreviewSceneManager_IsPackage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

