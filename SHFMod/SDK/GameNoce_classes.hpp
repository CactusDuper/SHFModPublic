#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameNoce

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "InputCore_structs.hpp"
#include "NeoAudio_structs.hpp"
#include "GameNoce_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SMSystem_classes.hpp"
#include "NiagaraAnimNotifies_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "NeoCheater_classes.hpp"
#include "Gauntlet_classes.hpp"
#include "MovieScene_classes.hpp"
#include "Niagara_structs.hpp"
#include "Niagara_classes.hpp"
#include "LevelSequence_classes.hpp"
#include "GameSettings_structs.hpp"
#include "GameSettings_classes.hpp"
#include "SlateCore_structs.hpp"
#include "AdvancedThirdPersonCamera_structs.hpp"
#include "AdvancedThirdPersonCamera_classes.hpp"
#include "MovieSceneTracks_classes.hpp"
#include "NBControlRig_structs.hpp"
#include "AudioMixer_structs.hpp"
#include "NavigationSystem_classes.hpp"
#include "NoceBase_structs.hpp"


namespace SDK
{

// Class GameNoce.NoceUserWidgetBase
// 0x0020 (0x0300 - 0x02E0)
class UNoceUserWidgetBase : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x20];                                     // 0x02E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddToInputDeviceUpdateList(class UWidget* InWidget);
	void ClearResource(bool* NoUse);
	void OnInputDeviceChanged();
	void OnLanguageChanged();
	void OnSynchronizeProperties();
	void PlayUIAnimation(class UWidgetAnimation* InAnimation, bool IsLoop, bool IsRestorable);
	void PlayUISound(const struct FNeoAudioTriggerIdHandle& TriggerId);
	void StopUIAnimations(const TArray<class UWidgetAnimation*>& InAnimations);
	void SynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUserWidgetBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUserWidgetBase")
	}
	static class UNoceUserWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUserWidgetBase>();
	}
};
DUMPER7_ASSERTS_UNoceUserWidgetBase;

// Class GameNoce.NoceSelectItemWidget
// 0x0078 (0x0378 - 0x0300)
class UNoceSelectItemWidget : public UNoceUserWidgetBase
{
public:
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Default;                                           // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Focus;                                             // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select;                                            // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Unfocus;                                           // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Disable;                                           // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableFocus;                                      // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableSelect;                                     // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableUnfocus;                                    // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Decide;                                            // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableDecide;                                     // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                Container;                                         // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               SelectAnimations;                                  // 0x0360(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          IsDisable;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidgetAnimation* GetAnimation(class UWidgetAnimation* NormalAnim, class UWidgetAnimation* DisableAnim);
	void OnDecideCompleted();
	void OnFocusCompleted();
	void OnUnfocusCompleted();
	void StopSelectAnimations();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSelectItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSelectItemWidget")
	}
	static class UNoceSelectItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSelectItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSelectItemWidget;

// Class GameNoce.NoceScrollItemWidget
// 0x0048 (0x03C0 - 0x0378)
class UNoceScrollItemWidget : public UNoceSelectItemWidget
{
public:
	uint8                                         Pad_378[0x28];                                     // 0x0378(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetAnimation*>               SelectingAnimations;                               // 0x03A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               UnSelectingAnimations;                             // 0x03B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool GetIsSelected();
	void RefreshObject(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceScrollItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceScrollItemWidget")
	}
	static class UNoceScrollItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceScrollItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceScrollItemWidget;

// Class GameNoce.NoceSaveLoadListItemWidget
// 0x0020 (0x03E0 - 0x03C0)
class UNoceSaveLoadListItemWidget final : public UNoceScrollItemWidget
{
public:
	class UWidgetAnimation*                       Empty;                                             // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EmptyFocus;                                        // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EmptySelect;                                       // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EmptyUnfocus;                                      // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSaveLoadListItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSaveLoadListItemWidget")
	}
	static class UNoceSaveLoadListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSaveLoadListItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSaveLoadListItemWidget;

// Class GameNoce.NoceANS_BodyPartGroup
// 0x0048 (0x0078 - 0x0030)
class UNoceANS_BodyPartGroup final : public UAnimNotifyState
{
public:
	bool                                          DebugLog;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BeginAddBodyPartGroups;                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           BeginRemoveBodyPartGroups;                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           EndAddBodyPartGroups;                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           EndRemoveBodyPartGroups;                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_BodyPartGroup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_BodyPartGroup")
	}
	static class UNoceANS_BodyPartGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_BodyPartGroup>();
	}
};
DUMPER7_ASSERTS_UNoceANS_BodyPartGroup;

// Class GameNoce.AsyncActionHandleNoceStorage
// 0x0030 (0x0060 - 0x0030)
class UAsyncActionHandleNoceStorage final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class USaveGame* SaveGame, bool bSuccess)> Completed;              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              SaveGameObject;                                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAsyncActionHandleNoceStorage* NoceAsyncLoadGameFromSlot(class UObject* WorldContextObject, const int32 SlotIndex);
	static class UAsyncActionHandleNoceStorage* NoceAsyncSaveClearGameToSlot(class UObject* WorldContextObject, const int32 SlotIndex, ENoceEndingType ClearEndingType, bool ClearProgress);
	static class UAsyncActionHandleNoceStorage* NoceAsyncSaveGameToSlot(class UObject* WorldContextObject, const int32 SlotIndex, class FName LocationName, class AActor* InActor);
	static class UAsyncActionHandleNoceStorage* NoceAsyncSaveSystemSave(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionHandleNoceStorage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionHandleNoceStorage")
	}
	static class UAsyncActionHandleNoceStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionHandleNoceStorage>();
	}
};
DUMPER7_ASSERTS_UAsyncActionHandleNoceStorage;

// Class GameNoce.NoceANS_ApplyGameplayEffect
// 0x0020 (0x0050 - 0x0030)
class UNoceANS_ApplyGameplayEffect : public UAnimNotifyState
{
public:
	int32                                         GameplayEffectLevel;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayEffect>>    GameplayEffects;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          RemoveAtEnd;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_ApplyGameplayEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_ApplyGameplayEffect")
	}
	static class UNoceANS_ApplyGameplayEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_ApplyGameplayEffect>();
	}
};
DUMPER7_ASSERTS_UNoceANS_ApplyGameplayEffect;

// Class GameNoce.NoceCheatLevelExtension
// 0x0070 (0x0158 - 0x00E8)
class UNoceCheatLevelExtension final : public UNeoCheatManagerExtension
{
public:
	int32                                         LastMapGroupIndex;                                 // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastMapIndex;                                      // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastMapIconIndex;                                  // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastMapIconChapter;                                // 0x00F4(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastMapIconIndexV2;                                // 0x00F8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastSpecialTagIndex;                               // 0x00FC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           CurrentMapGroups;                                  // 0x0100(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceMapLocation>                      CurrentMapLocations;                               // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceDynamicMapIconType>               CurrentMapIcons;                                   // 0x0120(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          IsAddMap;                                          // 0x0130(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENoceDynamicMapIconChapterType>        CurrentMapIconChapters;                            // 0x0138(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceDynamicMapIconIndexType>          CurrentMapIconIndexes;                             // 0x0148(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool AddSpecialTag();
	void Debug_AddAllMapLocationIDs();
	void Debug_AddMapLocationID();
	void Debug_AddRemoveMapIcon();
	void Debug_AddSpecialTag();
	void Debug_RemoveMapLocationID();
	TArray<class FText> GetSpecialTags(int32 Index_0);
	void OnAddSpecialTagWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnMapIconDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnMapIconDecidedV2(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnMapWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void RefreshMinimap();
	void ToggleMinimap();
	void ZoomInMinimap();
	void ZoomOutMinimap();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatLevelExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatLevelExtension")
	}
	static class UNoceCheatLevelExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatLevelExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatLevelExtension;

// Class GameNoce.NoceBodyPartGroupHealth
// 0x0028 (0x02B8 - 0x0290)
class ANoceBodyPartGroupHealth final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ActorRootComponent;                                // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAbilitySystemComponent*            AbilitySystemComponent;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceBodyPartGroupAttributeSet*         AttributeSet;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBodyPartGroupHealth")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBodyPartGroupHealth")
	}
	static class ANoceBodyPartGroupHealth* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceBodyPartGroupHealth>();
	}
};
DUMPER7_ASSERTS_ANoceBodyPartGroupHealth;

// Class GameNoce.BTDecorator_NoceAI_TagCooldown
// 0x0008 (0x0080 - 0x0078)
class UBTDecorator_NoceAI_TagCooldown final : public UBTDecorator_TagCooldown
{
public:
	float                                         RandomDeviation;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BTDecorator_NoceAI_TagCooldown")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BTDecorator_NoceAI_TagCooldown")
	}
	static class UBTDecorator_NoceAI_TagCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_NoceAI_TagCooldown>();
	}
};
DUMPER7_ASSERTS_UBTDecorator_NoceAI_TagCooldown;

// Class GameNoce.NoceAnimNotify
// 0x0000 (0x0038 - 0x0038)
class UNoceAnimNotify : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimNotify")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimNotify")
	}
	static class UNoceAnimNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimNotify>();
	}
};
DUMPER7_ASSERTS_UNoceAnimNotify;

// Class GameNoce.NoceCharacterMovementComponent
// 0x0030 (0x0FB0 - 0x0F80)
class UNoceCharacterMovementComponent final : public UCharacterMovementComponent
{
public:
	class UNoceGameplayTagDataAsset*              TagDataAsset;                                      // 0x0F78(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0F80(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeedRatio;                                    // 0x0F88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SprintSpeedMultiplier;                             // 0x0F8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedMultiplier;                               // 0x0F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TiredSprintSpeedMultiplier;                        // 0x0F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TiredWalkSpeedMultiplier;                          // 0x0F98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SlopeSprintSpeedMultiplier;                        // 0x0F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SlopeWalkSpeedMultiplier;                          // 0x0FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FA4[0xC];                                      // 0x0FA4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMoveSpeedRatio(float InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCharacterMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCharacterMovementComponent")
	}
	static class UNoceCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCharacterMovementComponent>();
	}
};
DUMPER7_ASSERTS_UNoceCharacterMovementComponent;

// Class GameNoce.BTTask_NoceAI_Base
// 0x0030 (0x00A0 - 0x0070)
class UBTTask_NoceAI_Base : public UBTTaskNode
{
public:
	uint8                                         bShowPropertyDetails : 1;                          // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x17];                                      // 0x0071(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          AIOwner;                                           // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 ActorOwner;                                        // 0x0090(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  AIOwnerPawn;                                       // 0x0098(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BTTask_NoceAI_Base")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BTTask_NoceAI_Base")
	}
	static class UBTTask_NoceAI_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_NoceAI_Base>();
	}
};
DUMPER7_ASSERTS_UBTTask_NoceAI_Base;

// Class GameNoce.BTTask_NoceAI_ActivateAbility
// 0x0028 (0x00C8 - 0x00A0)
class UBTTask_NoceAI_ActivateAbility final : public UBTTask_NoceAI_Base
{
public:
	TSubclassOf<class UGameplayAbility>           AbilityClass;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x20];                                      // 0x00A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BTTask_NoceAI_ActivateAbility")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BTTask_NoceAI_ActivateAbility")
	}
	static class UBTTask_NoceAI_ActivateAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_NoceAI_ActivateAbility>();
	}
};
DUMPER7_ASSERTS_UBTTask_NoceAI_ActivateAbility;

// Class GameNoce.NoceANS_AttackTraceEnvironment
// 0x0040 (0x0070 - 0x0030)
class UNoceANS_AttackTraceEnvironment final : public UAnimNotifyState
{
public:
	struct FGameplayTagContainer                  AnyMatchingGameplayTags;                           // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   ComboName;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           AttackTraceNames;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_AttackTraceEnvironment")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_AttackTraceEnvironment")
	}
	static class UNoceANS_AttackTraceEnvironment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_AttackTraceEnvironment>();
	}
};
DUMPER7_ASSERTS_UNoceANS_AttackTraceEnvironment;

// Class GameNoce.NoceCheatTitleUIExtension
// 0x0000 (0x00E8 - 0x00E8)
class UNoceCheatTitleUIExtension final : public UNeoCheatManagerExtension
{
public:
	void Debug_AutoSwitchInputIcon(bool InEnable);
	void Debug_HideDevInfo(bool InValue);
	void Debug_SetSkipLogo(bool InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatTitleUIExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatTitleUIExtension")
	}
	static class UNoceCheatTitleUIExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatTitleUIExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatTitleUIExtension;

// Class GameNoce.ChooseSkinListObject
// 0x00F0 (0x0118 - 0x0028)
class UChooseSkinListObject final : public UObject
{
public:
	struct FNoceUIChooseSkinData                  Data;                                              // 0x0028(0x00E8)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ChooseSkinListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ChooseSkinListObject")
	}
	static class UChooseSkinListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChooseSkinListObject>();
	}
};
DUMPER7_ASSERTS_UChooseSkinListObject;

// Class GameNoce.CollectibleListObject
// 0x0050 (0x0078 - 0x0028)
class UCollectibleListObject final : public UObject
{
public:
	class FName                                   ID;                                                // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NameText;                                          // 0x0030(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImagePath;                                         // 0x0040(0x0020)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoUpdateNew;                                   // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsNewLetter;                                       // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CollectibleListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CollectibleListObject")
	}
	static class UCollectibleListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollectibleListObject>();
	}
};
DUMPER7_ASSERTS_UCollectibleListObject;

// Class GameNoce.NoceChunkInstance
// 0x00D8 (0x0108 - 0x0030)
class UNoceChunkInstance : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnQueryDLCCompletedDelegate;                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bChunk1NewlyInstalled;                             // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OnlineSubsystemName;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             ChunkDataTable;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         OwnedDLCList;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x28];                                      // 0x0070(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          HasQueriedDLC;                                     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsQueryDLCCompleted;                               // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsTryingLogin;                                     // 0x009A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DebugShowChunk;                                    // 0x009B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingChunkDebugData;                             // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x6B];                                      // 0x009D(0x006B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckDownloadableContentByRowName(class FName InRowName, bool* OutIsChunkInstalled, bool* OutIsOwnedDLC);
	void Initialize_BP();
	void SetupDebugData_BP();
	void SetUsingChunkDebugData(bool InIsEnable);
	void ShowCheckDLCResult_BP(class FName InRowName, bool IsChunkInstalled, bool IsOwnedDLC);
	void StartQueryDLC();
	void StopQueryDLC();
	bool UpdateChunkDebugData(class FName InRowName, ENoceChunkDebugType InType, ENoceChunkDebugAction InAction);

	bool DoesChunkFileExist(int32 InChunkID) const;
	struct FNoceChunkDataRow GetChunkDataByName(class FName InName) const;
	TArray<class FName> GetChunkDataRowNames() const;
	int32 GetChunkIDFromDataRow(const struct FNoceChunkDataRow& InDataRow) const;
	bool GetDebugDataByType(class FName InRowName, ENoceChunkDebugType InType) const;
	class FString GetDownloadContentIDFromDataRow(const struct FNoceChunkDataRow& InDataRow) const;
	bool IsChunkInstalled(int32 InChunkID) const;
	bool IsChunkInstalledByRowName(class FName InRowName) const;
	bool IsOwnedDLCByID(const class FString& InDLCID) const;
	bool IsOwnedDLCByRowName(class FName InRowName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceChunkInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceChunkInstance")
	}
	static class UNoceChunkInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceChunkInstance>();
	}
};
DUMPER7_ASSERTS_UNoceChunkInstance;

// Class GameNoce.NoceShowByProgressBaseComponent
// 0x0090 (0x0130 - 0x00A0)
class UNoceShowByProgressBaseComponent : public UActorComponent
{
public:
	struct FGameplayTagContainer                  ProgressCondition;                                 // 0x00A0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          NeedExactProgress;                                 // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x00C8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          AllAdditionalTags;                                 // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedAdditionalTagNum;                              // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  WithOutAdditionalTags;                             // 0x00F0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          WithoutAllAdditionalTags;                          // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoundBitmask;                                      // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EndingBitmask;                                     // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ValidRoundBitmask;                                 // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAdditionalTagChanged(const struct FGameplayTag& InTag);
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void OnProgressInitialized(const struct FGameplayTag& InTag);
	void OnProgressOrTagChanged_BP();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceShowByProgressBaseComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceShowByProgressBaseComponent")
	}
	static class UNoceShowByProgressBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceShowByProgressBaseComponent>();
	}
};
DUMPER7_ASSERTS_UNoceShowByProgressBaseComponent;

// Class GameNoce.NoceNiagaraByProgressComponent
// 0x0108 (0x0238 - 0x0130)
class UNoceNiagaraByProgressComponent final : public UNoceShowByProgressBaseComponent
{
public:
	bool                                          BlendVariable;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ScalarParams;                                      // 0x0138(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            BlendCurve;                                        // 0x0188(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlendTime;                                         // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ActivateOnConditionMatch;                          // 0x0194(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetComponentTag;                                // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(float Alpha)>   OnBlendingFinish;                                  // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x01B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, float>                      OriginalScalarParams;                              // 0x01B8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	bool                                          IsBlending;                                        // 0x0208(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentBlendDuration;                              // 0x020C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetAlpha;                                       // 0x0210(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SourceAlpha;                                       // 0x0214(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x10];                                     // 0x0218(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DrawDebug;                                         // 0x0228(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0xF];                                      // 0x0229(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNiagaraByProgressComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNiagaraByProgressComponent")
	}
	static class UNoceNiagaraByProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNiagaraByProgressComponent>();
	}
};
DUMPER7_ASSERTS_UNoceNiagaraByProgressComponent;

// Class GameNoce.FrameworkFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFrameworkFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class ANoceWorldSettings* GetNoceWorldSettings(const class UObject* WorldContextObject);
	static bool IsGameMode(const class UObject* WorldContextObject, TSubclassOf<class AGameModeBase> GameModeClass);
	static bool IsNoceGameMode(const class UObject* WorldContextObject);
	static bool IsNoceTitleGameMode(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FrameworkFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FrameworkFunctionLibrary")
	}
	static class UFrameworkFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrameworkFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UFrameworkFunctionLibrary;

// Class GameNoce.GameNoceGameModeBase
// 0x0040 (0x0368 - 0x0328)
class AGameNoceGameModeBase : public AGameModeBase
{
public:
	TMulticastInlineDelegate<void(ENoceEndingType NewEndingType)> OnStoryEndingChanged;              // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENocePlayerOutfit NewPlayerOutfit)> OnPlayerOutfitChanged;         // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENocePlayerType InPlayerType, class FName InCharMeshRowName)> OnUpdatePlayerCharMeshType; // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ENoceActionLevel                              GameActionLevel;                                   // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceRiddleLevel                              GameRiddleLevel;                                   // 0x0359(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceRoundType                                GameRoundType;                                     // 0x035A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35B[0x1];                                      // 0x035B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SimulateStoryClearBitMask;                         // 0x035C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceEndingType                               GameEndingType;                                    // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENocePlayerOutfit                             PlayerOutfitValue;                                 // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ENoceActionLevel GetActionLevel();
	ENocePlayerOutfit GetPlayerOutfitValue();
	ENocePlayerOutfit GetPlayerSaveGameOutfit();
	ENoceRiddleLevel GetRiddleLevel();
	ENoceRoundType GetRoundType();
	ENoceRoundType GetSaveGameRoundType();
	int32 GetSimulateStoryClearBitmask();
	ENoceEndingType GetStoryEndingType();
	void HandleUpdatePlayerCharMeshType(ENocePlayerType InPlayerType, class FName InCharMeshRowName);
	void OnSystemSaveLoaded(class UNoceSystemSaveGame* SystemSave);
	void OnSystemSaveSaved(class UNoceSystemSaveGame* SystemSave);
	void SetActionLevel(ENoceActionLevel ActionLevel);
	void SetPlayerOutfitValue(ENocePlayerOutfit InType);
	void SetRiddleLevel(ENoceRiddleLevel RiddleLevel);
	void SetSimulateRoundType(ENoceRoundType DebugRoundType);
	void SetSimulateStoryClearBitmask(int32 BitMask);
	void SetStoryEndingType(ENoceEndingType EndingType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameNoceGameModeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameNoceGameModeBase")
	}
	static class AGameNoceGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameNoceGameModeBase>();
	}
};
DUMPER7_ASSERTS_AGameNoceGameModeBase;

// Class GameNoce.NoceTestBaseController
// 0x00B0 (0x00E0 - 0x0030)
class UNoceTestBaseController : public UGauntletTestController
{
public:
	uint8                                         Pad_30[0xB0];                                      // 0x0030(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMemReportIntervalChanged();
	void OnMemReportTimerExpired();
	void TryEarlyExec(const class UWorld* World);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTestBaseController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTestBaseController")
	}
	static class UNoceTestBaseController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTestBaseController>();
	}
};
DUMPER7_ASSERTS_UNoceTestBaseController;

// Class GameNoce.GameNoceSettings
// 0x0188 (0x01C0 - 0x0038)
class UGameNoceSettings final : public UDeveloperSettings
{
public:
	class FString                                 AfterDofMatPostfix;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorldTransDissolvePostfix;                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ENoceWorldTransTimeGroup, class FName>   WorldTransTimeMatParameters;                       // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MultiRoundSeqTableList;                            // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SolveLumenGhostingCmds;                            // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            GlobalCmdsForHQLQ;                                 // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         RootCutSceneAssets;                                // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           RootCutSceneClasses;                               // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         RootDataTables;                                    // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ProfilingActorClass;                               // 0x0198(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameNoceSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameNoceSettings")
	}
	static class UGameNoceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameNoceSettings>();
	}
};
DUMPER7_ASSERTS_UGameNoceSettings;

// Class GameNoce.InventoryItemListObject
// 0x0048 (0x0070 - 0x0028)
class UInventoryItemListObject final : public UObject
{
public:
	ENoceInventoryType                            Type;                                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x002C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NameText;                                          // 0x0038(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImagePath;                                         // 0x0048(0x0020)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowQuantity;                                    // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlank;                                           // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFaithItem;                                       // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InventoryItemListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InventoryItemListObject")
	}
	static class UInventoryItemListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryItemListObject>();
	}
};
DUMPER7_ASSERTS_UInventoryItemListObject;

// Class GameNoce.NoceANS_ApplyGESetByCaller
// 0x0010 (0x0040 - 0x0030)
class UNoceANS_ApplyGESetByCaller final : public UAnimNotifyState
{
public:
	TArray<struct FNoceApplyGESetByCaller>        GameplayEffects;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_ApplyGESetByCaller")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_ApplyGESetByCaller")
	}
	static class UNoceANS_ApplyGESetByCaller* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_ApplyGESetByCaller>();
	}
};
DUMPER7_ASSERTS_UNoceANS_ApplyGESetByCaller;

// Class GameNoce.NoceCheatManagerBase
// 0x0000 (0x02A0 - 0x02A0)
class UNoceCheatManagerBase : public UNeoCheatManager
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatManagerBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatManagerBase")
	}
	static class UNoceCheatManagerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatManagerBase>();
	}
};
DUMPER7_ASSERTS_UNoceCheatManagerBase;

// Class GameNoce.NoceCheatManager
// 0x01E8 (0x0488 - 0x02A0)
class UNoceCheatManager : public UNoceCheatManagerBase
{
public:
	bool                                          FreeCameraRotate;                                  // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanToggleDebugCamera;                              // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerAttackRatio;                                 // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerWinceRatio;                                  // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerDeflectRatio;                                // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponDurabilityCostRatio;                         // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyAttackRatio;                                  // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnemyNoAttack;                                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowEnemyHealthBar;                                // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipEnemyCounterableCheck;                         // 0x02BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceJustDodge;                                    // 0x02BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoPlayerHandleDamage;                              // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowPlayerStaminaCostLog;                          // 0x02BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowPlayerSanityCostLog;                           // 0x02BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowPlayerClawTransformLog;                        // 0x02BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoCostSanity;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowPlayerInvincibleInfo;                          // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowPlayerShowHideInfo;                            // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKatanaScabbardInCutscene;                      // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugEnemyInSight;                                 // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeaveEnemyInSightDistance;                         // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceShowEyeLacrimalFluid;                         // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAutoAimCompWarpLocationInfo;                   // 0x02CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawShapePlayer;                        // 0x02CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawResultPlayer;                       // 0x02CF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackLogPlayer;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawShapeEnemy;                         // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawResultEnemy;                        // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackLogEnemy;                                    // 0x02D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawShapeEnviroment;                    // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawResultEnviroment;                   // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawShapePlayerDeflect;                 // 0x02D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackTraceDrawResultPlayerDeflect;                // 0x02D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackLogEnviroment;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowNPCLookAtSystemInfo;                           // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowFootStepVFXInfo;                               // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowHitPerformVFXInfo;                             // 0x02DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowSceneDitherFade;                               // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAutoSave;                                  // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnemyMayNotRevive;                                 // 0x02DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawNavLinkInfo;                                   // 0x02DF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCounterableExtendAutoAimDistance;              // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLinkMotionInfo;                                // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableLinkMotionAvoidCol;                         // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableLinkMotionCheckInterruptSequencer;          // 0x02E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceJumpPlaybackPos;                              // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlayerFootIK;                                   // 0x02E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlayerSkirtIK;                                  // 0x02E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlayerLookAtIK;                                 // 0x02E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlayerPoseDriverIK;                             // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlayerAimIK;                                    // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlayerFullBodyIK;                               // 0x02EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNPCFootIK;                                      // 0x02EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNPCLookAtIK;                                    // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNPCPoseDriverIK;                                // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEnemyFootIK;                                    // 0x02EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EF[0x1];                                      // 0x02EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerShawlRigidBodyAlpha;                         // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerScarfRigidBodyAlpha;                         // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerSkirtRigidBodyAlpha;                         // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerFurClawRigidBodyAlpha;                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerFurClawGRigidBodyAlpha;                      // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerScabbardRigidBodyAlpha;                      // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceEnableRagdoll;                                // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bValue)>   OnShowEnemyHealthBarChanged;                       // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ShowInteractPriorityInfo;                          // 0x0338(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowInteractInfo;                                  // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ShowIndicatorChapters;                             // 0x0340(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              NocePPVDebugPosition;                              // 0x0360(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldManagerDebugPosition;                         // 0x0370(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        DevToolLightLayer;                                 // 0x0380(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          DebugGoMap;                                        // 0x0388(0x0050)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     DebugGoStack;                                      // 0x03D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          ShowGimmickInfo;                                   // 0x03E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TutorialNames;                                     // 0x03F0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         PopWindowTutorialIndex;                            // 0x0400(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         DialogVOTestActorClass;                            // 0x0408(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_428[0x30];                                     // 0x0428(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           CollisionMPC;                                      // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_460[0x28];                                     // 0x0460(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_Debug_SetWeaponDurability(float InValue);
	void Debug_AnalyticsEndSession();
	void Debug_AnalyticsStartSession();
	void Debug_ApplyClawAlterBackMark(bool bValue);
	void Debug_ApplyClawAlterBackMarkRound3(bool bValue);
	void Debug_ApplyClawAlterHandRound2(bool bValue);
	void Debug_ApplyClawAlterMask(bool bValue);
	void Debug_AsyncAutoSave();
	void Debug_AutoLoad(int32 SlotIndex);
	void Debug_AutoSave(int32 SlotIndex, class FName LocationRowName);
	void Debug_BugIt();
	void Debug_ChangeActionLevel(int32 InLevel);
	void Debug_ChangeGameRound(int32 InRound);
	void Debug_ChangePlayerCharMeshType();
	void Debug_ClearAllTutorial();
	void Debug_ClearAllWorldTriggerSetting();
	void Debug_ClearTemporaryGameSave();
	void Debug_CollisionOpacity(float InOpacity);
	void Debug_CollisionViewMode(int32 InViewMode);
	void Debug_ConditionHandlerInfo(bool InEnable);
	void Debug_CreateTemporaryGameSave();
	void Debug_DeleteAllAutoSave();
	void Debug_DeleteAllGameSave();
	void Debug_DeleteAllMaunalSave();
	void Debug_DeleteSlot(int32 SlotIndex);
	void Debug_DeleteSystemSave();
	void Debug_DisableAutoSave(bool InValue);
	void Debug_DisableLinkMotionAvoidCol(bool InValue);
	void Debug_DisableLinkMotionInterruptSequencer(bool InValue);
	void Debug_DisaplyNPCLookAtSystemInfo(bool InShow);
	void Debug_DisaplyPlayerLookAtSystemInfo(bool InShow);
	void Debug_DisplayFadeSystemInfo(bool InShow);
	void Debug_DrawCellLoadingTime(bool InValue);
	void Debug_EnableDynamicPickups(bool InEnable);
	void Debug_EnableEventPickups(bool InEnable);
	void Debug_EnableGlobalRigidBody(bool bValue);
	void Debug_EndTutorial(int32 TutorialIndex);
	void Debug_EndTutorialByName(class FName TutorialName);
	void Debug_EnemyMayNotRevive(bool InValue);
	void Debug_EnemyOneShotKill(bool Enable);
	void Debug_EnemyOneShotKillNotRevive(bool InValue);
	void Debug_FindRigidBodyOverlapWorldStatic();
	void Debug_ForceChangeStoryEndingType(int32 EndingType);
	void Debug_ForceClawGToClaw();
	void Debug_ForceClawToClawG();
	void Debug_ForceEnableRagdoll(bool bValue);
	void Debug_ForceJumpPlaybackPos(bool bValue);
	void Debug_ForceShowEyeLacrimalFluid(bool bValue);
	void Debug_ForceUpdateLight();
	void Debug_GenerateDynamicPickups();
	void Debug_GenerateEventPickupsNearbyPlayer();
	void Debug_GoNextProgress(int32 Index_0);
	void Debug_HideBasicDebugInfo(bool bValue);
	void Debug_HideGreyboxObject(bool InValue);
	void Debug_HideSubtitle(bool InEnable);
	void Debug_InGameFixedEV(float InValue);
	void Debug_InGameFixedEVMode(int32 EVMode);
	void Debug_MakeFakeClearGame();
	void Debug_NoceFadeIn(int32 FadeType, float InValue);
	void Debug_NoceFadeOut(int32 FadeType, float InValue);
	void Debug_PlayerAnimationLogInfoStateChange(bool InValue);
	void Debug_PlayerFootIKDebugDraw(bool bValue);
	void Debug_PlayerFootIKDebugTrace(bool bValue);
	void Debug_PlayerShiromukuRevive(int32 InValue);
	void Debug_PrintNoceGlobalDelegatesStatus();
	void Debug_RemoveAdditionalTag(class FName InTagName);
	void Debug_RemoveAllEventPickups();
	void Debug_RemoveCurrentDynamicPickups();
	void Debug_RequesetWorldTrigger(class FName InName, bool InValue);
	void Debug_RequestNocePPV(class FName InType, class FName InDataRowName, float InWeight);
	void Debug_RequestWind(class FName InDataRowName);
	void Debug_ResetAchievements();
	void Debug_SelectBColType(int32 InBColType);
	void Debug_SetAdditionalTag(class FName InTagName);
	void Debug_SetAllStoryEndingCleared();
	void Debug_SetATPCCameraLocationObjectDebug(bool InValue);
	void Debug_SetATPCCameraLockObjectDebug(bool InValue);
	void Debug_SetAttackLogEnemy(bool Value);
	void Debug_SetAttackLogEnviroment(bool Value);
	void Debug_SetAttackLogPlayer(bool Value);
	void Debug_SetAttackTraceDrawResultEnemy(bool Value);
	void Debug_SetAttackTraceDrawResultEnviroment(bool Value);
	void Debug_SetAttackTraceDrawResultPlayer(bool Value);
	void Debug_SetAttackTraceDrawResultPlayerDefelct(bool Value);
	void Debug_SetAttackTraceDrawShapeEnemy(bool Value);
	void Debug_SetAttackTraceDrawShapeEnviroment(bool Value);
	void Debug_SetAttackTraceDrawShapePlayer(bool Value);
	void Debug_SetAttackTraceDrawShapePlayerDefelct(bool Value);
	void Debug_SetBattlePositionForceActivate(bool bEnable);
	void Debug_SetBattlePositionSystemEnabled(bool bEnable);
	void Debug_SetBattleStatusTime(float InValue);
	void Debug_SetCapsuleShrinkEnableDebug(bool InValue);
	void Debug_SetCapsuleShrinkEnableUse(bool InValue);
	void Debug_SetClawTransform(float InValue);
	void Debug_SetCurrentMaxSanity(float InValue);
	void Debug_SetDebugEnemyInSight(bool bValue);
	void Debug_SetDrawTriggerBox(int32 InValue);
	void Debug_SetEnemyAttackRatio(float InValue);
	void Debug_SetEnemyNoAttack(bool InValue);
	void Debug_SetEventMaxTryFailedCount(int32 InCount);
	void Debug_SetEventMinDistanceSquared(float InDistanceSquared);
	void Debug_SetForceJustDodge(bool bValue);
	void Debug_SetFreeCameraRotate(bool InValue);
	void Debug_SetHealth(float InValue);
	void Debug_SetHealthPercent(float InValue);
	void Debug_SetHeightFogDistance(float InValue);
	void Debug_SetLanternPointRadius(float InValue);
	void Debug_SetLeaveEnemyInSightDistance(float InValue);
	void Debug_SetLowStaminaThreshold(float InValue);
	void Debug_SetMaxHealth(float InValue);
	void Debug_SetMaxSanity(float InValue);
	void Debug_SetMaxStamina(float InValue);
	void Debug_SetMoonlightRadius(float InValue);
	void Debug_SetNoCostSanity(bool bValue);
	void Debug_SetNoPlayerHandleDamage(bool bValue);
	void Debug_SetNormalBattleBGMDistMultiplier(float InValue);
	void Debug_SetPlayerAttackRatio(float InValue);
	void Debug_SetPlayerControlerShowDebugInfo(bool InValue);
	void Debug_SetPlayerDeflectRatio(float InValue);
	void Debug_SetPlayerFurClawGRigidBodyAlpha(float InValue);
	void Debug_SetPlayerFurClawRigidBodyAlpha(float InValue);
	void Debug_SetPlayerMoveSpeedRatio(float InValue);
	void Debug_SetPlayerOutfit(int32 InValue);
	void Debug_SetPlayerScabbardRigidBodyAlpha(float InValue);
	void Debug_SetPlayerScarfRigidBodyAlpha(float InValue);
	void Debug_SetPlayerShawlRigidBodyAlpha(float InValue);
	void Debug_SetPlayerSkirtRigidBodyAlpha(float InValue);
	void Debug_SetPlayerWinceRatio(float InValue);
	void Debug_SetProgressTag(class FName InTagName);
	void Debug_SetShowEnemyHealthBar(bool bValue);
	void Debug_SetShowFootStepVFXInfo(bool bValue);
	void Debug_SetShowPlayerClawTransformLog(bool bValue);
	void Debug_SetShowPlayerInvincibleInfo(bool bValue);
	void Debug_SetShowPlayerSanityCostLog(bool bValue);
	void Debug_SetShowPlayerShowHideInfo(bool bValue);
	void Debug_SetShowPlayerStaminaCostLog(bool bValue);
	void Debug_SetSkipEnemyCounterableCheck(bool bValue);
	void Debug_SetStoryEndingCleared(int32 EndingType);
	void Debug_SetTriggerDetail(bool InValue);
	void Debug_SetWeaponDurability(float InValue);
	void Debug_SetWeaponDurabilityCostRatio(float InValue);
	void Debug_ShowAchievementStatus(bool InValue);
	void Debug_ShowAutoAimCompWarpLocationInfo(bool bValue);
	void Debug_ShowCounterableExtendAutoAimDistance(bool InValue);
	void Debug_ShowDynamicPickupsDebugInfo(bool InIsShow);
	void Debug_ShowGimmickInfo(bool InValue);
	void Debug_ShowHitPerfromVFXInfo(bool InShow);
	void Debug_ShowIndicator(bool InValue);
	void Debug_ShowInteractInfo(bool InValue);
	void Debug_ShowInteractPriority(bool InValue);
	void Debug_ShowLinkMotionDebugInfo(bool InValue);
	void Debug_ShowRecordStatus(bool InValue);
	void Debug_ShowSaveClearGame();
	void Debug_ShowSceneDitherFade(bool Value);
	void Debug_ShowTeleportBlackScreen(bool InValue);
	void Debug_ShowWorldTriggerStatus(bool InValue);
	void Debug_SpawnEnemy();
	void Debug_StartTutorial(int32 TutorialIndex);
	void Debug_StartTutorialByName(class FName TutorialName);
	void Debug_StartTutorialByPopWindow();
	void Debug_ToggleBColOnly();
	void Debug_ToggleBlockCameraColOnly();
	void Debug_ToggleCollisionViewLighting();
	void Debug_ToggleEColOnly();
	void Debug_ToggleGreyboxVisibility();
	void Debug_ToggleStorageInfo();
	void Debug_ToggleToolLight();
	void Debug_ToggleTriggerBox();
	void Debug_ToggleTriggerDetail();
	void Debug_UnequipWeapon();
	void Debug_UnlockAchievement(int32 Index_0);
	void Debug_UseEnemyFootIK(bool bValue);
	void Debug_UseNPCFootIK(bool bValue);
	void Debug_UseNPCLookAtIK(bool bValue);
	void Debug_UseNPCPoseDriverIK(bool bValue);
	void Debug_UsePlayerAimIK(bool bValue);
	void Debug_UsePlayerFootIK(bool bValue);
	void Debug_UsePlayerFullBodyIK(bool bValue);
	void Debug_UsePlayerLookAtIK(bool bValue);
	void Debug_UsePlayerPoseDriverIK(bool bValue);
	void Debug_UsePlayerSkirtIK(bool bValue);
	void DebugGoBack();
	void DebugGoSave(class FName InSpotName);
	void DebugGoTo(class FName InSpotName);
	void EnableEnemyNavModifier(bool InValue);
	void EnablePlayerNavModifier(bool InValue);
	void EnableSanitySpawnSystem(bool bEnable);
	TArray<class UDataTable*> GetDialogParentTables(class UCompositeDataTable* CompositeDataTable);
	struct FGameplayTag GetGamePlayTagByName(const class FName& InTagName);
	bool IsDebugInvincibleEnabled();
	void LockNavigationBuild(bool bLock);
	void NoceBugItGo(float X, float Y, float Z, float pitch, float Yaw, float Roll, class FString* GatewayString);
	void OnChangePlayerCharMeshTypeWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnStartTutorialWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnTestDiloagWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void SetDrawNavLinkInfo(bool InValue);
	void SetNoceAIGlobalThinkEnable(bool bEnable);
	void SetNoceEnv(const class FString& AreaName, int32 Index_0, int32 RuntimeState);
	void SetNoceEnvExtra(const class FString& AreaName, int32 Index_0, int32 RuntimeState);
	void ShowDebugControlRig(bool InShow);
	void ShowDebugKawaii(bool InShow);
	void ShowDebugRigidBody(bool InShow);
	void ShowNoceAINoiseInfo(bool bEnable);
	void ShowNoceAISpawnerInfo(bool bEnable);
	void ShowNoceAISystemInfo(bool bEnable);
	void SpawnDialogVOTestActor();
	void TestDialog();
	void ToggleCinematicNote();
	void ToggleFog();
	void ToggleGameClockInfo();
	void ToggleGameSettingInfo();
	void ToggleNoceAIGlobalThinkEnable();
	void ToggleNoceBattlePositionInfo();
	void ToggleNoceBattlePositionSystem();
	void ToggleNoceDialogInfo();
	void ToggleNocePPVDetailInfo();
	void ToggleNocePPVInfo();
	void ToggleOnewayInfo();
	void ToggleOnlyPPVInfo();
	void ToggleProgressInfo();
	void ToggleSweetLightCh();
	void ToggleSweetLightEnv();
	void ToggleSweetLightMoon();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatManager")
	}
	static class UNoceCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatManager>();
	}
};
DUMPER7_ASSERTS_UNoceCheatManager;

// Class GameNoce.KeyBindingListObject
// 0x0070 (0x0098 - 0x0028)
class UKeyBindingListObject final : public UObject
{
public:
	struct FNoceUIKeyBindingFixedData             FixedData;                                         // 0x0028(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsSelectingPrimary;                                // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditing;                                         // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   PrimaryKey;                                        // 0x0060(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   SecondaryKey;                                      // 0x0078(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPrimaryError;                                    // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSecondaryError;                                  // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KeyBindingListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KeyBindingListObject")
	}
	static class UKeyBindingListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyBindingListObject>();
	}
};
DUMPER7_ASSERTS_UKeyBindingListObject;

// Class GameNoce.NoceAnimWidget
// 0x0068 (0x0368 - 0x0300)
class UNoceAnimWidget : public UNoceUserWidgetBase
{
public:
	TMulticastInlineDelegate<void()>              OnClose;                                           // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnClosed;                                          // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FadeIn;                                            // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut;                                           // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select;                                            // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ZOrder;                                            // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ClearResourceOnClosed;                             // 0x033C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNeoAudioTriggerIdHandle               FadeInSound;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               FadeOutSound;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetAnimation*>               Animations;                                        // 0x0358(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void AddAnimation(class UWidgetAnimation* Animation);
	void BP_ForceClose();
	void BP_HideCommon(bool* NoUse);
	void BP_ShowCommon(bool* NoUse);
	void ForceClose();
	void ForceHide();
	class UWidgetAnimation* GetFadeInAnim();
	class UWidgetAnimation* GetFadeOutAnim();
	void Hide();
	bool IsShowing();
	void OnFadeInCompleted();
	void OnFadeOutCompleted();
	void SetAllData(bool* NoUse);
	void Show();
	void StopAnimations();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimWidget")
	}
	static class UNoceAnimWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimWidget>();
	}
};
DUMPER7_ASSERTS_UNoceAnimWidget;

// Class GameNoce.NoceFocusableWidget
// 0x0048 (0x03B0 - 0x0368)
class UNoceFocusableWidget : public UNoceAnimWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceUISubsystem*                       UISubsystem;                                       // 0x0370(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInputGuideSubsystem*               InputGuideSubsystem;                               // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x4];                                      // 0x0380(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          NeedSetUIGameMode;                                 // 0x0384(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NeedPauseGame;                                     // 0x0385(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NeedShowCursor;                                    // 0x0386(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_387[0x1];                                      // 0x0387(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GuideName;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   RepeatKey;                                         // 0x0390(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x4];                                      // 0x03A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SkipInput;                                         // 0x03AC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceUIInputMode                              CachedInputMode;                                   // 0x03AD(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CachedShowCursor;                                  // 0x03AE(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CachedGamePause;                                   // 0x03AF(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_DisableInputs(bool* NoUse);
	void BP_EnableInputs(bool* NoUse);
	struct FEventReply BP_TryFocusDefaultWidget();
	bool Cancel();
	bool Confirm();
	void DisableInputs();
	void EnableInputs();
	bool HandleNotRepeatKeys(const struct FInputEvent& InInputEvent, const struct FKey& InKey);
	bool HandleRepeatKeys(const struct FInputEvent& InInputEvent, const struct FKey& InKey);
	void HideGuide();
	void SetCursorVisibility(bool InIsVisible);
	void ShowGuide(class FName InGuide);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFocusableWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFocusableWidget")
	}
	static class UNoceFocusableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFocusableWidget>();
	}
};
DUMPER7_ASSERTS_UNoceFocusableWidget;

// Class GameNoce.NoceNewGameSettingOutfitWidget
// 0x0018 (0x03C8 - 0x03B0)
class UNoceNewGameSettingOutfitWidget final : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void()>              StartGame;                                         // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         DefaultIndex;                                      // 0x03C0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNewGameSettingOutfitWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNewGameSettingOutfitWidget")
	}
	static class UNoceNewGameSettingOutfitWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNewGameSettingOutfitWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNewGameSettingOutfitWidget;

// Class GameNoce.MainMenuListObject
// 0x0028 (0x0050 - 0x0028)
class UMainMenuListObject final : public UObject
{
public:
	class FText                                   NameText;                                          // 0x0028(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               Sound;                                             // 0x0038(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MainMenuListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MainMenuListObject")
	}
	static class UMainMenuListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMainMenuListObject>();
	}
};
DUMPER7_ASSERTS_UMainMenuListObject;

// Class GameNoce.NoceChooserArrowWidget
// 0x0010 (0x0388 - 0x0378)
class UNoceChooserArrowWidget final : public UNoceSelectItemWidget
{
public:
	TMulticastInlineDelegate<void()>              OnMouseDown;                                       // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	struct FEventReply OnMouseButtonDownArrow(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceChooserArrowWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceChooserArrowWidget")
	}
	static class UNoceChooserArrowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceChooserArrowWidget>();
	}
};
DUMPER7_ASSERTS_UNoceChooserArrowWidget;

// Class GameNoce.MucusDecalActor
// 0x0038 (0x02D0 - 0x0298)
class AMucusDecalActor final : public ADecalActor
{
public:
	bool                                          bTransformed;                                      // 0x0298(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOutOfGameplay;                                    // 0x0299(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnvTypeCanBeRemoved;                              // 0x029A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29B[0x5];                                      // 0x029B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           GameplayTimeHandle;                                // 0x02A0(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 Requester;                                         // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnvironmentTypeMucus;                              // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameplayTime;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoActivateTime;                                  // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayDestroyTime;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExtraLifeTimeWhenTransformed;                      // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayDiffusionTime;                                // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiffusionRange;                                    // 0x02C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnOutOfGameplay();
	void BP_Transformation();
	void DestroyMe();
	bool HasTransformed();
	bool IsEnvironmentType();
	bool IsOutOfGameplay();
	void OnTransformReuse();
	void PauseDestroyTimer(bool InPause);
	void ReceiveDestroyRequest();
	void ReceiveEnemyDeadEvent(class AActor* InEnemy);
	void RequestTransformation(class AActor* InRequester);
	void RequestTransformationAuto();
	void SetTransformLifeSpan(float InLifespan);
	void SetTransformReuseTime(float InTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MucusDecalActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MucusDecalActor")
	}
	static class AMucusDecalActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMucusDecalActor>();
	}
};
DUMPER7_ASSERTS_AMucusDecalActor;

// Class GameNoce.NoceWorldSubsystem
// 0x0008 (0x0038 - 0x0030)
class UNoceWorldSubsystem : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Deinitialize_BP();
	void Initialize_BP();
	void WorldBeginPlay_BP();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWorldSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWorldSubsystem")
	}
	static class UNoceWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWorldSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceWorldSubsystem;

// Class GameNoce.NoceCollectibleListWidget
// 0x0020 (0x0300 - 0x02E0)
class UNoceCollectibleListWidget : public UUserWidget
{
public:
	class UHorizontalBox*                         Count_HorizontalBox;                               // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceListView*                          ItemList;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Number;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SetSelectedIndexLater;                             // 0x02F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LaterSelectIndex;                                  // 0x02FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetAllData(const TArray<class UCollectibleListObject*>& Items);
	void SetKeyItemData(const TArray<class FName>& Items);
	void SetLetterGroupData(const TArray<class FName>& LetterGroups, const TArray<class FName>& NewLetterGroups, class FName LastGroup);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCollectibleListWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCollectibleListWidget")
	}
	static class UNoceCollectibleListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCollectibleListWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCollectibleListWidget;

// Class GameNoce.NoceNoteTrack
// 0x0008 (0x00D0 - 0x00C8)
class UNoceNoteTrack final : public UMovieScenePropertyTrack
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNoteTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNoteTrack")
	}
	static class UNoceNoteTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNoteTrack>();
	}
};
DUMPER7_ASSERTS_UNoceNoteTrack;

// Class GameNoce.MucusSubsystem
// 0x0018 (0x0050 - 0x0038)
class UMucusSubsystem final : public UNoceWorldSubsystem
{
public:
	TArray<class AMucusDecalActor*>               SpawnedMucus;                                      // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxMucusCount;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class AMucusDecalActor*> GetMucusByDistance2D(const struct FVector& Location, float Distance);
	void HandleSporeEruption(const struct FVector& CenterLocation, float Radius, class AActor* InRequester);
	bool IsMucusNearby(const struct FVector& Location, float Distance);
	void RegisterMucus(class AMucusDecalActor* Mucus);
	void RemoveAllMucus(bool Immediately);
	void RemoveOldestMucus();
	void RequestTransformAllMucus();
	void UnregisterMucus(class AMucusDecalActor* Mucus);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MucusSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MucusSubsystem")
	}
	static class UMucusSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMucusSubsystem>();
	}
};
DUMPER7_ASSERTS_UMucusSubsystem;

// Class GameNoce.NoceNotebookBookmark
// 0x0020 (0x02B0 - 0x0290)
class ANoceNotebookBookmark : public AActor
{
public:
	TMulticastInlineDelegate<void(const class ANoceNotebookBookmark* BookMark)> OnDeactivated;       // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         PosIndex;                                          // 0x02A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PageIndex;                                         // 0x02A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLeft;                                            // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x02AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Deactivate();
	bool GetIsLeft();
	int32 GetPageIndex();
	int32 GetPosIndex();
	void OnFadeIn(const bool NeedFastFadeIn, bool* NoUse);
	void OnFadeOut(const bool NeedFastFadeOut, bool* NoUse);
	void ResetPlayRate();
	void SetIsLeft(bool NewValue);
	void SetPageIndex(int32 NewValue);
	void SetPlayRate(float NewValue);
	void SetPosIndex(int32 NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotebookBookmark")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotebookBookmark")
	}
	static class ANoceNotebookBookmark* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceNotebookBookmark>();
	}
};
DUMPER7_ASSERTS_ANoceNotebookBookmark;

// Class GameNoce.NewGameListObject
// 0x0040 (0x0068 - 0x0028)
class UNewGameListObject final : public UObject
{
public:
	ENoceUIInitialSettingType                     Type;                                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0030(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           OptionTexts;                                       // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           DescriptionText;                                   // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectingIndex;                                    // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NewGameListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NewGameListObject")
	}
	static class UNewGameListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewGameListObject>();
	}
};
DUMPER7_ASSERTS_UNewGameListObject;

// Class GameNoce.NoceCinematicActorComponent
// 0x0090 (0x0130 - 0x00A0)
class UNoceCinematicActorComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceCineActorSeqStopData              SeqStopData;                                       // 0x00A8(0x0005)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseEventSystem;                                    // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CineEventUserType;                                 // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStrictTag;                                      // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunEventWithStrictTag;                             // 0x00B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceCineEventData                     CineEventData;                                     // 0x00B6(0x0005)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SeqEventIsRunning;                                 // 0x00BB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UMeshComponent*, struct FNoceCineActorSeqEventData_Mat> Mat_Orginals;                 // 0x00C0(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInterface*>             PackageMats;                                       // 0x0110(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInterface*>             PackageMatInstances;                               // 0x0120(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCinematicActorComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCinematicActorComponent")
	}
	static class UNoceCinematicActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCinematicActorComponent>();
	}
};
DUMPER7_ASSERTS_UNoceCinematicActorComponent;

// Class GameNoce.NoceAbilitySystemComponent
// 0x0030 (0x1278 - 0x1248)
class UNoceAbilitySystemComponent final : public UAbilitySystemComponent
{
public:
	uint8                                         Pad_1248[0x20];                                    // 0x1248(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& Tag, bool TagExists)> OnTagUpdated_BP;  // 0x1268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void ChangeEffectDuration(const struct FActiveGameplayEffectHandle& Handle, float TimeDiff);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAbilitySystemComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAbilitySystemComponent")
	}
	static class UNoceAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAbilitySystemComponent>();
	}
};
DUMPER7_ASSERTS_UNoceAbilitySystemComponent;

// Class GameNoce.NoceAbilitySystemGlobals
// 0x0000 (0x02F8 - 0x02F8)
class UNoceAbilitySystemGlobals final : public UAbilitySystemGlobals
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAbilitySystemGlobals")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAbilitySystemGlobals")
	}
	static class UNoceAbilitySystemGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAbilitySystemGlobals>();
	}
};
DUMPER7_ASSERTS_UNoceAbilitySystemGlobals;

// Class GameNoce.NocePerfTestController
// 0x0070 (0x0150 - 0x00E0)
class UNocePerfTestController : public UNoceTestBaseController
{
public:
	uint8                                         Pad_E0[0x70];                                      // 0x00E0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameStateSet(const class AGameStateBase* GameStateBase);
	void OnWorldBeginPlay();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePerfTestController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePerfTestController")
	}
	static class UNocePerfTestController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePerfTestController>();
	}
};
DUMPER7_ASSERTS_UNocePerfTestController;

// Class GameNoce.NoceCheckTestController
// 0x0000 (0x0150 - 0x0150)
class UNoceCheckTestController final : public UNocePerfTestController
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheckTestController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheckTestController")
	}
	static class UNoceCheckTestController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheckTestController>();
	}
};
DUMPER7_ASSERTS_UNoceCheckTestController;

// Class GameNoce.NoceNewGameDataAsset
// 0x0010 (0x0040 - 0x0030)
class UNoceNewGameDataAsset final : public UDataAsset
{
public:
	ENoceActionLevel                              DefaultActionLevel;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceRiddleLevel                              DefaultRiddleLevel;                                // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultClearEndingBitMask;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceEndingType                               DefaultEndingType;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENocePlayerOutfit                             PlayerOutfitValue;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ENoceRoundType GetDefaultGameRound();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNewGameDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNewGameDataAsset")
	}
	static class UNoceNewGameDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNewGameDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceNewGameDataAsset;

// Class GameNoce.NoceAchievementInstance
// 0x0030 (0x0060 - 0x0030)
class UNoceAchievementInstance final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAchievementInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAchievementInstance")
	}
	static class UNoceAchievementInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAchievementInstance>();
	}
};
DUMPER7_ASSERTS_UNoceAchievementInstance;

// Class GameNoce.NoceAchievementSubsystem
// 0x0250 (0x0288 - 0x0038)
class UNoceAchievementSubsystem final : public UNoceWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(class FName RecordName)> OnRecordComplete;                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FName RecordName)> OnAchievementUnlock;                      // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x4];                                       // 0x0058(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SavedAchievementVersion;                           // 0x005C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              RecordCreateDate;                                  // 0x0060(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FNoceRecordStatus>              GameRecord;                                        // 0x0068(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	TArray<struct FNoceRecordStatus>              SystemRecord;                                      // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceEnemyRecord>               EnemyAchievement;                                  // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceInventoryRecord>           InventoryAchievement;                              // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceProgressRecord>            ProgressAchievement;                               // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceCustomRecord>              CustomAchievement;                                 // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceEnemyRecord>               SystemEnemyAchievement;                            // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceInventoryRecord>           SystemInventoryAchievement;                        // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceCustomRecord>              SystemCustomAchievement;                           // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceAchievementSetting>        AllAchievements;                                   // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNoceNotebookByRecord>          AllNotebookByRecord;                               // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, ENoceAchievementType>       AchievementTypeMap;                                // 0x0120(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, int32>                      GameRecordMap;                                     // 0x0170(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, int32>                      SystemRecordMap;                                   // 0x01C0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<ENoceAchievementState>                 CacheAchievementStateMap;                          // 0x0210(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_220[0x68];                                     // 0x0220(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAchievementRecordByKey(ENoceMiscAchievementType InType, class FName InKey, int32 InValue, float Threshold);
	bool IsRecordCompleted(class FName InName);
	void OnAddConsumableItem(class FName InItemName, int32 InQuantity);
	void OnAddItem(ENoceInventoryType InType, class FName InItemName);
	void OnAdditionalTagChanged(const struct FGameplayTag& InTag);
	void OnAddNewWeapon(class FName ID);
	void OnAddNotebookID(ENoceNotebookType InType, class FName ID);
	void OnEnemyDead(class AActor* InEnemyActor);
	void OnEnemyFakeDead(class AActor* InEnemyActor);
	void OnPlayerDie();
	void OnPlayerMaxLevelChanged(ENoceUpgradeType InType, int32 InValue);
	void OnPlayerTakeDamage(class AActor* Attacker, class FName ComboName, float InHealthDamage);
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void OnProgressInitialized(const struct FGameplayTag& InTag);
	void OnUseConsumableItem(class FName InItemName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAchievementSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAchievementSubsystem")
	}
	static class UNoceAchievementSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAchievementSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceAchievementSubsystem;

// Class GameNoce.NoceAnimNotifyState
// 0x0000 (0x0030 - 0x0030)
class UNoceAnimNotifyState : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimNotifyState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimNotifyState")
	}
	static class UNoceAnimNotifyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimNotifyState>();
	}
};
DUMPER7_ASSERTS_UNoceAnimNotifyState;

// Class GameNoce.NoceANS_SetMaterial
// 0x0028 (0x0058 - 0x0030)
class UNoceANS_SetMaterial final : public UNoceAnimNotifyState
{
public:
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotName;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetOnEnd;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CacheMaterial;                                     // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CacheIndex;                                        // 0x0050(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_SetMaterial")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_SetMaterial")
	}
	static class UNoceANS_SetMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_SetMaterial>();
	}
};
DUMPER7_ASSERTS_UNoceANS_SetMaterial;

// Class GameNoce.NoceActionBase
// 0x0020 (0x0048 - 0x0028)
class UNoceActionBase : public UObject
{
public:
	bool                                          IsManuallyCompleteAction;                          // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PersistentOuter;                                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ParentActor;                                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceActionStatus                             ActionStatus;                                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbortAction();
	void CompleteAction();
	class FString DebugGetActionInfo();
	void ExecuteAction();
	ENoceActionStatus GetActionStatus();
	void PerformAction();
	void PrepareAction();

	class AActor* GetParentActor() const;
	class UObject* GetPersistentOuter() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceActionBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceActionBase")
	}
	static class UNoceActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceActionBase>();
	}
};
DUMPER7_ASSERTS_UNoceActionBase;

// Class GameNoce.NoceConditionBase
// 0x0010 (0x0038 - 0x0028)
class UNoceConditionBase : public UObject
{
public:
	class UObject*                                PersistentOuter;                                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ParentActor;                                       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool BP_DoCheckCondition();
	bool CheckCondition();
	class FString DebugGetConditionInfo();

	class AActor* GetParentActor() const;
	class UObject* GetPersistentOuter() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceConditionBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceConditionBase")
	}
	static class UNoceConditionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceConditionBase>();
	}
};
DUMPER7_ASSERTS_UNoceConditionBase;

// Class GameNoce.NoceActiveUserWidget
// 0x0008 (0x0370 - 0x0368)
class UNoceActiveUserWidget final : public UNoceAnimWidget
{
public:
	class UTextBlock*                             TextBlock;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckAndShow();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceActiveUserWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceActiveUserWidget")
	}
	static class UNoceActiveUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceActiveUserWidget>();
	}
};
DUMPER7_ASSERTS_UNoceActiveUserWidget;

// Class GameNoce.NoceANS_StartSuperArmor
// 0x0000 (0x0030 - 0x0030)
class UNoceANS_StartSuperArmor final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_StartSuperArmor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_StartSuperArmor")
	}
	static class UNoceANS_StartSuperArmor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_StartSuperArmor>();
	}
};
DUMPER7_ASSERTS_UNoceANS_StartSuperArmor;

// Class GameNoce.NoceActivityInstance
// 0x0110 (0x0140 - 0x0030)
class UNoceActivityInstance : public UGameInstanceSubsystem
{
public:
	class FString                                 NewGame01Str;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewGame02Str;                                      // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateProgressType;                                // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HideInitialActivityDelayTime;                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x40];                                      // 0x0058(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         MainMenuWidgetClass;                               // 0x0098(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DebugShowActivity;                                 // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x6F];                                      // 0x00D1(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivityAvailabilityChanged(const class FString& ActivityID, bool bEnabled);
	bool CanActivateByActivity();
	void CancelAndHideActivity(const class FString& ActivityID);
	void CheckToStartNewGameActivity();
	void CompleteAndHideActivity(const class FString& ActivityID);
	void ContinueGame_BP();
	bool DoesSystemSlotExist();
	void EndActivity(const class FString& ActivityID, int32 Outcome);
	class UNoceGameInstance* GetNoceGameInstance();
	class ANocePlayerController* GetNocePlayerController();
	class UNoceUISubsystem* GetNoceUISubsystem();
	void HandleActivatedByActivityCompleted();
	void HandleGameActivityActivationRequest(const class FString& ActivityID);
	bool HasAnySaveGame(bool* IsGameClearSaveGame);
	bool HasToHandleActivateByActivity();
	void HideAllActivities();
	bool IsLoadingGameClearSaveData();
	bool IsLoadingLatestSaveData();
	void NewGame_BP();
	void NewGameWithClearGame_BP();
	void ResetAllActiveActivities();
	void ResetCurrentActivity();
	void ResumeActivity(const class FString& ActivityID, const TArray<class FString>& InProgressTasks, const TArray<class FString>& CompletedTasks);
	void ResumeAndShowActivity(const class FString& ActivityID, const TArray<class FString>& InProgressTasks, const TArray<class FString>& CompletedTasks);
	void StartActivity(const class FString& ActivityID);
	void StartAndShowActivity(const class FString& ActivityID);
	void StartNewGame02Activity();
	void TrimActivityLog();

	bool IsActivityObjectID(const class FString& ActivityID) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceActivityInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceActivityInstance")
	}
	static class UNoceActivityInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceActivityInstance>();
	}
};
DUMPER7_ASSERTS_UNoceActivityInstance;

// Class GameNoce.NoceActivitySubsystem
// 0x0010 (0x0048 - 0x0038)
class UNoceActivitySubsystem final : public UNoceWorldSubsystem
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void OnProgressInitialized(const struct FGameplayTag& InTag);
	void UpdateActivitiesByCurrentProgress();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceActivitySubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceActivitySubsystem")
	}
	static class UNoceActivitySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceActivitySubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceActivitySubsystem;

// Class GameNoce.NoceANS_Player_DisableSkirt
// 0x0020 (0x0050 - 0x0030)
class UNoceANS_Player_DisableSkirt final : public UNoceAnimNotifyState
{
public:
	float                                         FadeInTime;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerAnimInstance*                PlayerAnimInstance;                                // 0x0038(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasOperation;                                     // 0x0040(0x0001)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0044(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CacheTotalDuration;                                // 0x0048(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CacheAlpha;                                        // 0x004C(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSkirtAlpha(float InValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_Player_DisableSkirt")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_Player_DisableSkirt")
	}
	static class UNoceANS_Player_DisableSkirt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_Player_DisableSkirt>();
	}
};
DUMPER7_ASSERTS_UNoceANS_Player_DisableSkirt;

// Class GameNoce.NoceActor
// 0x0010 (0x02A0 - 0x0290)
class ANoceActor : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasRecorded;                                      // 0x0298(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldSkipSave;                                   // 0x0299(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29A[0x6];                                      // 0x029A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnRecordLoaded();
	bool HasRecorded();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceActor")
	}
	static class ANoceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceActor>();
	}
};
DUMPER7_ASSERTS_ANoceActor;

// Class GameNoce.NoceActorReferenceDepotSubsystem
// 0x0340 (0x0370 - 0x0030)
class UNoceActorReferenceDepotSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0xB8];                                      // 0x0030(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULevelSequence*>                 PreloadLevelSequences;                             // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class UObject*, struct FNocePreloadInstanceData> PreloadSeqDatas;                           // 0x00F8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceSeqData                           CurrentSeqData;                                    // 0x0150(0x0200)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bSetCurrentSeqData;                                // 0x0350(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANoceCharacter*>                 CurrentCineChars;                                  // 0x0358(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddPreloadSequence(class ULevelSequence* InSequence);
	class AActor* GetActorFromPath(const class FString& InPath);
	class AActor* GetActorFromTag(const class FName& InTag);
	bool GetActorsFromTag(const class FName& InTag, TArray<class AActor*>* OutData);
	TMap<TSubclassOf<class AActor>, struct FNoceActorRefDepotData> LocateBoundObjects(class ULevelSequence* Sequence, class ALevelSequenceActor* SequenceActor);
	void OnEnterCinematic();
	void OnExitCinematic();
	void ProcessSeqEvents(const class FName& InTagGroup);
	void RegisterActorReference(class AActor* InActor);
	void RemovePreloadSeqDataFromCurrentSeqData();
	bool RemovePreloadSequence(class ULevelSequence* InSequence);
	void ResetCurrentSeqData();
	void ResetPreloadAssets();
	void RollbackSeqEvents(const class FName& InTagGroup);
	void UnregisterActorReference(class AActor* InActor);
	void UpdateCurrentSeqData(const class UDataTable* DataTable, const class FName& RowName);
	bool WaitForCurrentSeqDataStreamingTextures();

	const TArray<class ANoceCharacter*> GetCurrentCineChars() const;
	const struct FNoceSeqData GetCurrentSeqData() const;
	const class FName GetDefaultEventTag() const;
	bool IsSetCurrentSeqData() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceActorReferenceDepotSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceActorReferenceDepotSubsystem")
	}
	static class UNoceActorReferenceDepotSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceActorReferenceDepotSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceActorReferenceDepotSubsystem;

// Class GameNoce.NoceCommonUINavigateData
// 0x0010 (0x0040 - 0x0030)
class UNoceCommonUINavigateData final : public UDataAsset
{
public:
	TArray<struct FNoceCommonUINavigateSet>       Data;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	TArray<int32> GetNavigateTargets(int32 FromIndex, ENoceUIInputAction InDir);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCommonUINavigateData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCommonUINavigateData")
	}
	static class UNoceCommonUINavigateData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCommonUINavigateData>();
	}
};
DUMPER7_ASSERTS_UNoceCommonUINavigateData;

// Class GameNoce.NoceAIAlertController
// 0x0160 (0x0200 - 0x00A0)
class alignas(0x10) UNoceAIAlertController final : public UActorComponent
{
public:
	ENoceAIAlertType                              PrevAlertState;                                    // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceAIAlertType                              CurrentAlertState;                                 // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceAIAlertChangingType                      AlertChangingType;                                 // 0x00A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAlertness;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLockAlertness;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MAX_ALERTNESS;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ENoceAIAlertType, struct FNoceAIAlertStateSetting> AlertStateSettings;                      // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         TimeToMax;                                         // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToZero;                                        // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  CurrentTarget;                                     // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANoceAIController*                      AIController;                                      // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AActor*, float>                    TargetAlertness;                                   // 0x0118(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  IgnoreIfTargetHasTags;                             // 0x0168(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_188[0x78];                                     // 0x0188(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FTransform GetFirstSetupTargetTransform();
	bool GetLockAlertness();
	bool IsLockTimerActive();
	void ResetAlertChangingType();
	void SetCurrentAlertness(float Value, bool IgnoreLock);
	void SetFirstSetupTargetTransform(const struct FTransform& InTransform);
	void SetLockAlertness(bool IsLock);
	void SetLockAlertnessDelay(bool IsLock, float Delay);
	void UpdateAlertChangingType();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAIAlertController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAIAlertController")
	}
	static class UNoceAIAlertController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAIAlertController>();
	}
};
DUMPER7_ASSERTS_UNoceAIAlertController;

// Class GameNoce.NoceAIController
// 0x0120 (0x04D8 - 0x03B8)
class ANoceAIController : public AAIController
{
public:
	class UBehaviorTree*                          DefaultBehaviorTree;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AttackGamePlayTag;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          AttackBehaviorTree;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCustomEyesViewPort;                             // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementStopDistance;                              // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMovementStopDistance;                       // 0x03D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenerateNaviPathDistance;                        // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WontLoseTargetDistance;                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableBattleBGM;                                   // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceIncludeInBattleBGM;                           // 0x03E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E6[0x2];                                      // 0x03E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormalBattleBGMDist;                               // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableDebugNavigation;                             // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMoveWithoutNaviMesh;                         // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EE[0x2];                                      // 0x03EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrimaryTierScore;                                  // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryTierScore;                                // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TertiaryTierScore;                                 // 0x03F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableThink;                                       // 0x03FC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  CurrentAttackTarget;                               // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LastAttackTarget;                                  // 0x0408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InValue)>  OnEnableThinkChanged;                              // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   BlackboardComponent;                               // 0x0428(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBehaviorTreeComponent*                 BehaviorTreeComponent;                             // 0x0430(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FNoceAISenseWeight>             CustomSenseWeight;                                 // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x18];                                     // 0x0448(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, struct FNoceAISenseInfo>  SenseInfos;                                        // 0x0460(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B0[0x28];                                     // 0x04B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDead();
	void ClearHatestTarget();
	ENoceAIAlertChangingType GetAlertChangingType();
	class UNoceAIAlertController* GetAlertController();
	float GetAlertness();
	struct FTransform GetAlertnessFirstUpdateTransform();
	ENoceAIAlertType GetAlertType();
	bool GetEnableThink();
	bool GetEnableThinkLocal();
	class AActor* GetHatestTarget();
	bool GetLockAlertness();
	struct FVector GetPathFollowingCurrentTargetLocation();
	EPathFollowingStatus GetPathFollowingStatus();
	ENoceAIAlertType GetPrevAlertType();
	bool IsLockAlertTimerActive();
	void OnPerceptionUpdated(const TArray<class AActor*>& UpdatedActors);
	void OnTargetPerceptionUpdated(class AActor* Actor, const struct FAIStimulus& Stimulus);
	void OverrideMovementStopDistance(float InValue);
	void ResetMovementStopDistance();
	bool ResumeBehaviorTree();
	void SetAlertness(float Value, bool IgnoreLock);
	void SetAlertnessFirstUpdateTransform(const struct FTransform& InTransform);
	void SetEnableThink(bool B);
	void SetLockAlertness(bool IsLock);
	bool StartBehaviorTree();
	bool StopBehaviorTree();
	void UpdateAIMovement();
	bool UpdateNaviMidPoint();
	void UpdateNaviPathToMoveTarget(const struct FVector& InTarget, bool bForceUpdate);

	void GetAISightPerceptionViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAIController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAIController")
	}
	static class ANoceAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceAIController>();
	}
};
DUMPER7_ASSERTS_ANoceAIController;

// Class GameNoce.NoceCreditWidget
// 0x0040 (0x03F0 - 0x03B0)
class UNoceCreditWidget final : public UNoceFocusableWidget
{
public:
	float                                         DebugUpdateSpeed;                                  // 0x03B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateSpeed;                                       // 0x03B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ActiveSound;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               DeactiveSound;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C8[0x20];                                     // 0x03C8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsFocused;                                         // 0x03E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BGMPosition;                                       // 0x03EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool AddDeltaTime(float InDeltaTime);
	float GetUpdateSpeed();
	bool OnSpeedUpdated();
	void OnWindowFocusChanged(bool IsActive);
	void SetCreditDataTables(const class FName InName, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCreditWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCreditWidget")
	}
	static class UNoceCreditWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCreditWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCreditWidget;

// Class GameNoce.NoceAIEnemyInterface
// 0x0000 (0x0000 - 0x0000)
class INoceAIEnemyInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAIEnemyInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAIEnemyInterface")
	}
	static class INoceAIEnemyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceAIEnemyInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceAIEnemyInterface;

// Class GameNoce.NoceAIFaceToTargetComponent
// 0x0028 (0x00C8 - 0x00A0)
class UNoceAIFaceToTargetComponent final : public UActorComponent
{
public:
	struct FNoceAIFaceToTargetInfo                FaceToTargetInfo;                                  // 0x00A0(0x0028)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAIFaceToTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAIFaceToTargetComponent")
	}
	static class UNoceAIFaceToTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAIFaceToTargetComponent>();
	}
};
DUMPER7_ASSERTS_UNoceAIFaceToTargetComponent;

// Class GameNoce.NoceConditionList
// 0x0010 (0x0048 - 0x0038)
class UNoceConditionList : public UNoceConditionBase
{
public:
	TArray<class UNoceConditionBase*>             Conditions;                                        // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceConditionList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceConditionList")
	}
	static class UNoceConditionList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceConditionList>();
	}
};
DUMPER7_ASSERTS_UNoceConditionList;

// Class GameNoce.NoceAndCondition
// 0x0000 (0x0048 - 0x0048)
class UNoceAndCondition final : public UNoceConditionList
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAndCondition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAndCondition")
	}
	static class UNoceAndCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAndCondition>();
	}
};
DUMPER7_ASSERTS_UNoceAndCondition;

// Class GameNoce.NoceAIFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceAIFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetAIAlertBySetting(class ANoceAIController* AIController, const struct FAISpawnerAlertOverride& Setting);
	static bool SetNoceHearingRange(class AAIController* Controller, float HearingRange, float* OldHearingRange);
	static bool SetSightRadius(class AAIController* Controller, float SightRadius, float* OldSightRadius);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAIFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAIFunctionLibrary")
	}
	static class UNoceAIFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAIFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceAIFunctionLibrary;

// Class GameNoce.NoceAISenseConfig_Hearing
// 0x0018 (0x0060 - 0x0048)
class UNoceAISenseConfig_Hearing final : public UAISenseConfig
{
public:
	TSubclassOf<class UNoceAISense_Hearing>       Implementation;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingRange;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoSHearingRange;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseLoSHearing : 1;                                // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAISenseAffiliationFilter              DetectionByAffiliation;                            // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAISenseConfig_Hearing")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAISenseConfig_Hearing")
	}
	static class UNoceAISenseConfig_Hearing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAISenseConfig_Hearing>();
	}
};
DUMPER7_ASSERTS_UNoceAISenseConfig_Hearing;

// Class GameNoce.NoceAISenseEvent_Hearing
// 0x0048 (0x0070 - 0x0028)
class UNoceAISenseEvent_Hearing final : public UAISenseEvent
{
public:
	struct FNoceAINoiseEvent                      Event;                                             // 0x0028(0x0048)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAISenseEvent_Hearing")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAISenseEvent_Hearing")
	}
	static class UNoceAISenseEvent_Hearing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAISenseEvent_Hearing>();
	}
};
DUMPER7_ASSERTS_UNoceAISenseEvent_Hearing;

// Class GameNoce.NoceAISense_Hearing
// 0x0068 (0x00E0 - 0x0078)
class UNoceAISense_Hearing final : public UAISense
{
public:
	TArray<struct FNoceAINoiseEvent>              NoiseEvents;                                       // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         SpeedOfSoundSq;                                    // 0x0088(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8C[0x54];                                      // 0x008C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ReportNoceNoiseEvent(class UObject* WorldContextObject, const struct FVector& NoiseLocation, float Loudness, class AActor* Instigator, float MaxRange, class FName Tag, bool UseLineTrace, ECollisionChannel TraceChannel);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAISense_Hearing")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAISense_Hearing")
	}
	static class UNoceAISense_Hearing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAISense_Hearing>();
	}
};
DUMPER7_ASSERTS_UNoceAISense_Hearing;

// Class GameNoce.NoceConditionHandlerSubsystem
// 0x0030 (0x0060 - 0x0030)
class UNoceConditionHandlerSubsystem final : public UWorldSubsystem
{
public:
	TArray<class UNoceConditionHandler*>          RunningHandlers;                                   // 0x0030(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceConditionHandlerSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceConditionHandlerSubsystem")
	}
	static class UNoceConditionHandlerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceConditionHandlerSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceConditionHandlerSubsystem;

// Class GameNoce.NoceAISpawner
// 0x0178 (0x0418 - 0x02A0)
class ANoceAISpawner : public ANoceActor
{
public:
	bool                                          SpawnAtStart;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SignifianceStart;                                  // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class UBehaviorTree*> BehaviorTrees;                                   // 0x02A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpawnedCharacterTags;                              // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TerritoryName;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InheritedTagName;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSignifiance;                                 // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivateDistance;                                  // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartBufferTime;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndBufferTime;                                     // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         UnInitActors;                                      // 0x0340(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnSpawn;                              // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRequestSpawn;                                    // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          HasSpawnedRecord;                                  // 0x0370(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasSpawnedRequest;                                 // 0x0371(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasBeenDeleted;                                    // 0x0372(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsTemporaryRemoved;                                // 0x0373(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasActivateSignificanceRecord;                     // 0x0374(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsReceivedSpawnEventInOtherDifficulty;             // 0x0375(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_376[0x2];                                      // 0x0376(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RemovedLocationRecord;                             // 0x0378(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPendingForSpawn;                                  // 0x0390(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PendingCount;                                      // 0x0394(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpawnFlowTriggering;                              // 0x0398(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurrentSpawned;                                   // 0x0399(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRegisterSignificance;                             // 0x039A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39B[0x5];                                      // 0x039B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetClassName;                                   // 0x03A0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 GroupStringForDebug;                               // 0x03B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 TerritoryStringForDebug;                           // 0x03C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMayDisplayDebugFlag;                              // 0x03D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceAISystem*                          AISystem;                                          // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E0[0x38];                                     // 0x03E0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanBeAllowedToSpawn();
	bool CanDisplayDebugInfo();
	bool CanSpawnAtThisDifficultyLevel();
	struct FVector GetSignificanceLocation();
	TSubclassOf<class AActor> GetSpawnTargetClass();
	struct FTransform GetSpawnTransform();
	bool HandleAlertOverride(const struct FAISpawnerAlertOverride& AlertData);
	bool HandleAttemptRespawn();
	bool HandleDeleteEvent();
	bool HandleDeleteSpecifyActorEvent(class AActor* SpecifiedActor);
	bool HandleEnableThinkEvent(bool InValue);
	bool HandleKillEvent();
	void HandleSmartSpawnFlow();
	bool HandleSpawnEventOnce();
	bool HandleTemporaryRemoved();
	bool HasSpawnedActor();
	bool IsActorDeadOnRecord();
	bool IsIgnoreSaveLoad();
	bool IsInstantSpawnType();
	bool IsSignificanceActivate();
	bool IsSpawnedOrSpawning();
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);
	void OnSpawn_BP(class AActor* SpawnedActor);
	bool ProcessSpawnerEvent(const struct FNoceAISpawnerEvent& EventData);
	void RegisterSignificance();
	class AActor* RequestSpawn(const struct FVector& Location, const struct FRotator& Rotation, bool InstantSpawn);
	void RequestTriggerSpawnFlow(bool bForce);
	void UnRegisterSignificance();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAISpawner")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAISpawner")
	}
	static class ANoceAISpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceAISpawner>();
	}
};
DUMPER7_ASSERTS_ANoceAISpawner;

// Class GameNoce.NoceTickableWorldSubsystem
// 0x0008 (0x0048 - 0x0040)
class UNoceTickableWorldSubsystem : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Deinitialize_BP();
	void Initialize_BP();
	void Tick_BP(float DeltaTime);
	void WorldBeginPlay_BP();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTickableWorldSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTickableWorldSubsystem")
	}
	static class UNoceTickableWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTickableWorldSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceTickableWorldSubsystem;

// Class GameNoce.NoceVolumeComponentBase
// 0x0038 (0x00D8 - 0x00A0)
class UNoceVolumeComponentBase : public UActorComponent
{
public:
	bool                                          IsEnabled;                                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasValidData;                                      // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Priority;                                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x30];                                      // 0x00A8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnVolumeBeginOverlapBP();
	void OnVolumeEndOverlapBP();
	void RequestSpecialWeightChange(const class FString& SourceName, float InWeight, float InPriority);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceVolumeComponentBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceVolumeComponentBase")
	}
	static class UNoceVolumeComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceVolumeComponentBase>();
	}
};
DUMPER7_ASSERTS_UNoceVolumeComponentBase;

// Class GameNoce.NoceAISystem
// 0x0168 (0x01B0 - 0x0048)
class UNoceAISystem final : public UNoceTickableWorldSubsystem
{
public:
	bool                                          GlobalEnemyThinkEnable;                            // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANoceAIController*>              SpawnedEnemyControllers;                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnedEnemyActors;                                // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSpawnerContainer>   Spawners;                                          // 0x0070(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class ANoceAISpawner*>                 ActivatedSpawners;                                 // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NearbyEnemyCount;                                  // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearbyEnemyDistance;                               // 0x00E4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearestEnemyDistance;                              // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearestEnemyPathDistance;                          // 0x00EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatLevel;                                       // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x2];                                       // 0x00F4(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ShowSpawnerInfo;                                   // 0x00F6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisableBattleBGMCount;                             // 0x00F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BattleBGMWithPathDist;                             // 0x00FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormalBattleBGMDistMultiplier;                     // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANoceTerritoryVolume*>           TerritoryVolumes;                                  // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnEnemySpawned;                              // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* EnemyCharacter)> OnEnemyDeadEvent;                   // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* EnemyCharacter)> OnEnemyFakeDeadEvent;               // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x48];                                     // 0x0148(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceCharacterRecord>           EnemyRecordArray;                                  // 0x0190(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceInheritedAIRecord>         InheritedAIRecord;                                 // 0x01A0(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)

public:
	void AddNavigationBuildLock(uint8 Flags_0);
	void AddRecord(const struct FNoceCharacterRecord& InRecord);
	bool AnyEnemyAliveBesidesFreak(class FName ActorTag, const struct FGameplayTag& BesidesCharacterTag);
	bool AnyEnemyAliveByCharacterName(class FName CharacterName);
	bool AnyEnemyAliveByGameplayTag(const struct FGameplayTag& CharacterNameTag);
	bool AnyEnemyAliveByTag(class FName TagName);
	bool BattleBGMDisabled();
	void ClearSaveGameRecord();
	void DestroyAllEnemy();
	void EnableEnemyNavModifier(bool Enable);
	void EnablePlayerNavModifier(bool Enable);
	class AActor* GetEnemyActorByOwnedGameplayTag(const struct FGameplayTag& GameplayTag, bool IsAlive);
	class AActor* GetEnemyActorByTag(const struct FGameplayTag& CharacterTag, bool ExactMatch, bool IsAlive);
	TArray<class AActor*> GetEnemyActorsByContainer(const struct FGameplayTagContainer& TagContainer, bool ExactMatch, bool IsAlive);
	TArray<class AActor*> GetEnemyActorsByOwnedGameplayTag(const struct FGameplayTag& GameplayTag, bool IsAlive);
	TArray<class AActor*> GetEnemyActorsByTag(const struct FGameplayTag& CharacterTag, bool ExactMatch, bool IsAlive);
	int32 GetEnemyAliveCount();
	int32 GetEnemyAliveCountByCharacterTag(const struct FGameplayTag& CharacterTag, bool ExactMatch);
	int32 GetEnemyAliveCountByTag(class FName TagName);
	int32 GetNewAttackID();
	TArray<struct FNoceCharacterRecord> GetSaveData();
	class ANoceAISpawner* GetSpawner(class AActor* SpawnedActor);
	struct FNoceCharacterRecord GetSpecifyRecord(class FName SpawnerName);
	TArray<class ANoceTerritoryVolume*> GetTerritoriesByGroup(class FName GroupName);
	bool IsAlreadyDeadOnRecord(const class ANoceAISpawner* Spawner);
	bool IsAnySpawnerWaiting();
	bool IsInheritedAIRecordDead(class FName InheritedTag);
	bool IsInheritedRecordExist(class FName InheritedTag);
	bool IsTerritoryExist(class FName GroupName);
	void KillAllEnemy();
	void KillSpawnerEnemy(const class FName AreaName);
	void OnEnemyDead(class AActor* InEnemy);
	void OnEnemyFakeDead(class AActor* InEnemy);
	void ProcessEndCutscene(class FName IgnoreTag, bool UnlockNavigation);
	void ProcessEnterCutscene(class FName IgnoreTag, bool InHideEnemy, bool InHideNPC, bool LockNavigation);
	void RebuildNavigation();
	void RegisterEnemyActor(class AActor* InEnemy);
	void RegisterEnemyController(class ANoceAIController* pController);
	void RegisterSpawner(class FName Group, class ANoceAISpawner* pSpawner);
	void RegisterTerritory(class ANoceTerritoryVolume* Volume);
	void RemoveNavigationBuildLock(uint8 Flags_0);
	void SetSightRatio(float InNewSightRatio);
	void SetSightRatioToController(class AAIController* InController, float InCurrentSightRatio, float InNewSightRatio);
	void SetSightRatioToSpawnedControllers(float InNewSightRatio);
	void SpawnEnemies(class FName Group, int32 Num);
	void UnregisterEnemyActor(class AActor* InEnemy);
	void UnregisterEnemyController(class ANoceAIController* pController);
	void UnregisterSpawner(class FName Group, class ANoceAISpawner* pSpawner);
	void UnRegisterTerritory(class ANoceTerritoryVolume* Volume);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAISystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAISystem")
	}
	static class UNoceAISystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAISystem>();
	}
};
DUMPER7_ASSERTS_UNoceAISystem;

// Class GameNoce.NoceAnalyticsInstance
// 0x0090 (0x00C0 - 0x0030)
class UNoceAnalyticsInstance : public UGameInstanceSubsystem
{
public:
	TArray<class UNoceAnalyticsBaseRecord*>       RecordList;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UNoceAnalyticsBaseRecord*>       BattleRecordList;                                  // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsSessionStarted;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsContinueGame;                                    // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentRowName;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLoadGame;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentChapterName;                                // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAnalyticsBasicRecord*              BasicRecord;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAnalyticsProgressRecord*           ProgressRecord;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAnalyticsProgressRecord*           SavedProgressRecord;                               // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAnalyticsSingleBattleRecord*       CurrentBattleRecord;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ContinueGame();
	void Deinitialize_BP();
	void EndBattle();
	bool EndSession();
	void EndSession_BP();
	class FString GetAnalyticsState();
	class ANocePlayerCharacter* GetNocePlayerCharacter_Internal();
	void Initialize_BP();
	void ManuallyEndSession();
	void OnAddConsumableItem(class FName InItemName, int32 InQuantity);
	void OnAddItem(ENoceInventoryType InType, class FName InItemName);
	void OnAddNewWeapon(class FName InWeaponID);
	void OnEnemyDead(class AActor* InEnemyActor);
	void OnEnemyFakeDead(class AActor* InEnemyActor);
	void OnFaithChanged(float InDelta);
	void OnLoadGameSlot();
	void OnPlayerDie();
	void OnPlayerTakeDamage(class AActor* InAttacker, class FName InComboName, float InHealthDamage);
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void OnProgressInitialized(const struct FGameplayTag& InTag);
	void OnSanityChanged(float InDelta);
	void OnSaveGameSlot(bool InIsAutoSave);
	void OnUseConsumableItem(class FName InItemName);
	void OnWeaponDurabilityChanged(class FName InWeaponName, float InDelta);
	void RegisterSystems_BP(class ANoceGameState* InNoceGameState, class ANocePlayerState* InNocePlayerState);
	void ResetRecords();
	void StartBattle();
	bool StartSession();
	void StartSession_BP();
	void UnregisterSystems_BP(class ANoceGameState* InNoceGameState, class ANocePlayerState* InNocePlayerState);
	void WriteRecords();

	struct FNoceAnalyticsDataRow GetAnalyticsDataByName(class FName InName) const;
	TArray<class FName> GetAnalyticsDataRowNames() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnalyticsInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnalyticsInstance")
	}
	static class UNoceAnalyticsInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnalyticsInstance>();
	}
};
DUMPER7_ASSERTS_UNoceAnalyticsInstance;

// Class GameNoce.NoceSimpleList
// 0x0078 (0x00A0 - 0x0028)
class UNoceSimpleList : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableMouseInput;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectOnMouseEnter;                                // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultSelectIndex;                                // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               PreviousSound;                                     // 0x0038(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               NextSound;                                         // 0x0040(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               MouseHoverSound;                                   // 0x0048(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   MouseDownEvent;                                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   MouseEnterEvent;                                   // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   RefreshSelection;                                  // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    Slots;                                             // 0x0080(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UUserWidget*                            SelectingSlot;                                     // 0x0090(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectingIndex;                                    // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearSelectionWithoutAnimation();
	void Confirm();
	void ForceSelectAgain(int32 Index_0);
	int32 GetSelectingIndex();
	class UUserWidget* GetSelectingSlot();
	int32 GetSlotsLength();
	void GetSubMenuPos(class UUserWidget* Menu, const struct FGeometry& Container, const struct FVector2D& RelativePos, struct FGeometry* Geometry, struct FVector2D* LocalPos);
	void Initialize(const TArray<class UUserWidget*>& InSlots);
	void PlaySound(const struct FNeoAudioTriggerIdHandle& TriggerId);
	void Reset();
	void ResetAll();
	void SelectIndex(int32 Index_0, bool* Success);
	void SelectNext();
	void SelectPrevious();
	void SelectSlot(class UUserWidget* Widget, bool* Success);
	void SetSound(const struct FNeoAudioTriggerIdHandle& InPreviousSound, const struct FNeoAudioTriggerIdHandle& InNextSound, const struct FNeoAudioTriggerIdHandle& InMouseHoverSound);
	void UpdateInput(const struct FInputEvent& InputEvent, const struct FKey& Key, bool* IsTriggered);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSimpleList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSimpleList")
	}
	static class UNoceSimpleList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSimpleList>();
	}
};
DUMPER7_ASSERTS_UNoceSimpleList;

// Class GameNoce.NoceSimpleGrid
// 0x0008 (0x00A8 - 0x00A0)
class UNoceSimpleGrid : public UNoceSimpleList
{
public:
	class UNoceUIInputDirectionHelper*            InputHelper;                                       // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetAnalogValue(const struct FKey& Key, float Value);
	void SetupKeys();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSimpleGrid")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSimpleGrid")
	}
	static class UNoceSimpleGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSimpleGrid>();
	}
};
DUMPER7_ASSERTS_UNoceSimpleGrid;

// Class GameNoce.NoceAnalyticsBaseRecord
// 0x0060 (0x0088 - 0x0028)
class UNoceAnalyticsBaseRecord : public UObject
{
public:
	class FString                                 RecordName_NonExport;                              // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PropertyNameValueMap_NonExport;                    // 0x0038(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)

public:
	void DeepCopyFromSource(const class UNoceAnalyticsBaseRecord* InSource);
	void ResetRecord();
	void WriteRecord();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnalyticsBaseRecord")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnalyticsBaseRecord")
	}
	static class UNoceAnalyticsBaseRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnalyticsBaseRecord>();
	}
};
DUMPER7_ASSERTS_UNoceAnalyticsBaseRecord;

// Class GameNoce.NoceAnalyticsBasicRecord
// 0x0108 (0x0190 - 0x0088)
class UNoceAnalyticsBasicRecord final : public UNoceAnalyticsBaseRecord
{
public:
	class FString                                 Version;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoundType;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionLevel;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RiddleLevel;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndingType;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartProgress;                                     // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndProgress;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TotalPlayTime;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TotalExpolreTime;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TotalBattleTime;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsManuallyStop;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ProgressList;                                      // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         DeadCount;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamage;                                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SanityLoss;                                        // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x54];                                     // 0x0134(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              StartSessionTime_NonExport;                        // 0x0188(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnalyticsBasicRecord")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnalyticsBasicRecord")
	}
	static class UNoceAnalyticsBasicRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnalyticsBasicRecord>();
	}
};
DUMPER7_ASSERTS_UNoceAnalyticsBasicRecord;

// Class GameNoce.NoceNotCondition
// 0x0008 (0x0040 - 0x0038)
class UNoceNotCondition final : public UNoceConditionBase
{
public:
	class UNoceConditionBase*                     Condition;                                         // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotCondition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotCondition")
	}
	static class UNoceNotCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotCondition>();
	}
};
DUMPER7_ASSERTS_UNoceNotCondition;

// Class GameNoce.NoceAnalyticsProgressRecord
// 0x02A8 (0x0330 - 0x0088)
class UNoceAnalyticsProgressRecord final : public UNoceAnalyticsBaseRecord
{
public:
	float                                         TotalFaith;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponDurabilityLoss;                              // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      PickupConsumableMap;                               // 0x0090(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      PickupWeaponMap;                                   // 0x00E0(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ConsumableUsageMap;                                // 0x0130(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      WeaponDurabilityMap;                               // 0x0180(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TArray<class FName>                           PickupKeyItemEmaList;                              // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         DeadCount;                                         // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamage;                                       // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SanityLoss;                                        // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyKillCount;                                    // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    EnemyDamageMap;                                    // 0x01F0(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    EnemyKillCountMap;                                 // 0x0240(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    EnemyFakeDeadMap;                                  // 0x0290(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    UpgradeTypeMap;                                    // 0x02E0(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnalyticsProgressRecord")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnalyticsProgressRecord")
	}
	static class UNoceAnalyticsProgressRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnalyticsProgressRecord>();
	}
};
DUMPER7_ASSERTS_UNoceAnalyticsProgressRecord;

// Class GameNoce.NoceRegistryFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceRegistryFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static ENoceInputDeviceType GetGamepadType();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRegistryFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRegistryFunctionLibrary")
	}
	static class UNoceRegistryFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRegistryFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceRegistryFunctionLibrary;

// Class GameNoce.NoceANS_ApplyGEOnAttackTraceHit
// 0x0010 (0x0060 - 0x0050)
class UNoceANS_ApplyGEOnAttackTraceHit final : public UNoceANS_ApplyGameplayEffect
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttackTraceHit(const TArray<struct FNoceAttackHitResult>& InHitResults) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_ApplyGEOnAttackTraceHit")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_ApplyGEOnAttackTraceHit")
	}
	static class UNoceANS_ApplyGEOnAttackTraceHit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_ApplyGEOnAttackTraceHit>();
	}
};
DUMPER7_ASSERTS_UNoceANS_ApplyGEOnAttackTraceHit;

// Class GameNoce.NoceAnalyticsSingleBattleRecord
// 0x0278 (0x0300 - 0x0088)
class UNoceAnalyticsSingleBattleRecord final : public UNoceAnalyticsBaseRecord
{
public:
	class FString                                 StartProgress;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              BattleTime;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponDurabilityLoss;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      ConsumableUsageMap;                                // 0x00A8(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      WeaponDurabilityMap;                               // 0x00F8(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ConsumableLeftMap;                                 // 0x0148(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    WeaponLeftMap;                                     // 0x0198(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TArray<class FName>                           EquippedOmamorList;                                // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          IsDead;                                            // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalDamage;                                       // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SanityLoss;                                        // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyKillCount;                                    // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    EnemyDamageMap;                                    // 0x0208(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    EnemyKillCountMap;                                 // 0x0258(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    EnemyFakeDeadMap;                                  // 0x02A8(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FTimespan                              StartBattleTime_NonExport;                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnalyticsSingleBattleRecord")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnalyticsSingleBattleRecord")
	}
	static class UNoceAnalyticsSingleBattleRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnalyticsSingleBattleRecord>();
	}
};
DUMPER7_ASSERTS_UNoceAnalyticsSingleBattleRecord;

// Class GameNoce.NoceCutsceneWidget
// 0x0020 (0x03D0 - 0x03B0)
class UNoceCutsceneWidget : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void()>              OnSkipEvent;                                       // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPaused;                                          // 0x03C8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanSkip;                                           // 0x03C9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsMouseMoved;                                      // 0x03CA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsShowingGuide;                                    // 0x03CB(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShowMouseTime;                                     // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Pause();
	void Resume();
	void SetCanSkip(bool InCanSkip, bool* NoUse);
	void SetHasCamera(bool InHasCamera, bool* NoUse);
	void SetSequenceActor(class ALevelSequenceActor* InActor, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCutsceneWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCutsceneWidget")
	}
	static class UNoceCutsceneWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCutsceneWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCutsceneWidget;

// Class GameNoce.NoceAnimationCharacterInterface
// 0x0000 (0x0000 - 0x0000)
class INoceAnimationCharacterInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimationCharacterInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimationCharacterInterface")
	}
	static class INoceAnimationCharacterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceAnimationCharacterInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceAnimationCharacterInterface;

// Class GameNoce.NoceSSFSVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceSSFSVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSSFSDataRowHandle                 DataRow;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceSSFSProgress>              DataByProgress;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSSFSVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSSFSVolumeComponent")
	}
	static class UNoceSSFSVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSSFSVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSSFSVolumeComponent;

// Class GameNoce.NoceAnimationEnemyInterface
// 0x0000 (0x0000 - 0x0000)
class INoceAnimationEnemyInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimationEnemyInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimationEnemyInterface")
	}
	static class INoceAnimationEnemyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceAnimationEnemyInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceAnimationEnemyInterface;

// Class GameNoce.NoceDialogSoundTableGenerator
// 0x0000 (0x0290 - 0x0290)
class ANoceDialogSoundTableGenerator final : public AActor
{
public:
	void AddRowToDataTable(class UDataTable* InTable, class FName InRowName, const struct FGameplayTag& InTriggerGroup, const struct FSoftObjectPath& SoundEventRef);
	void ModifyRowInDataTable(class UDataTable* InTable, class FName InRowName, class FName AttachJoint, bool Follow);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDialogSoundTableGenerator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDialogSoundTableGenerator")
	}
	static class ANoceDialogSoundTableGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceDialogSoundTableGenerator>();
	}
};
DUMPER7_ASSERTS_ANoceDialogSoundTableGenerator;

// Class GameNoce.NoceAnimationNpcInterface
// 0x0000 (0x0000 - 0x0000)
class INoceAnimationNpcInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimationNpcInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimationNpcInterface")
	}
	static class INoceAnimationNpcInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceAnimationNpcInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceAnimationNpcInterface;

// Class GameNoce.NoceAnimationPlayerInterface
// 0x0000 (0x0000 - 0x0000)
class INoceAnimationPlayerInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimationPlayerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimationPlayerInterface")
	}
	static class INoceAnimationPlayerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceAnimationPlayerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceAnimationPlayerInterface;

// Class GameNoce.NoceDebugCameraController
// 0x0030 (0x0A18 - 0x09E8)
class ANoceDebugCameraController : public ADebugCameraController
{
public:
	float                                         TeleportLocationOffset;                            // 0x09E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IKHitProfile;                                      // 0x09EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               PhyscialSurfaceChannel;                            // 0x09F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             PlayerPawnChannel;                                 // 0x09F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F6[0x2];                                      // 0x09F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      BlockPlayerPawnObjectTypes;                        // 0x09F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A08[0x8];                                      // 0x0A08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollSpeed;                                         // 0x0A10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A14[0x4];                                      // 0x0A14(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTeleportPawn();
	void TeleportPawn();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDebugCameraController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDebugCameraController")
	}
	static class ANoceDebugCameraController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceDebugCameraController>();
	}
};
DUMPER7_ASSERTS_ANoceDebugCameraController;

// Class GameNoce.NoceAnimCancelComponent
// 0x0110 (0x01B0 - 0x00A0)
class UNoceAnimCancelComponent final : public UActorComponent
{
public:
	TSubclassOf<class UGameplayEffect>            GE_CounterCancel;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0xF0];                                      // 0x00A8(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0198(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerController*                  PlayerController;                                  // 0x01A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x01A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CanAnimCanel(ENoceAnimCancel InAnimCanel);
	void ClearAllAnimCancels(class FName InExcludeStateMachineName, class FName InExcludeStateName);
	void HandleOnPossessed(bool InPossessed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimCancelComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimCancelComponent")
	}
	static class UNoceAnimCancelComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimCancelComponent>();
	}
};
DUMPER7_ASSERTS_UNoceAnimCancelComponent;

// Class GameNoce.NoceANS_AI_FaceToTarget
// 0x0040 (0x0070 - 0x0030)
class UNoceANS_AI_FaceToTarget final : public UAnimNotifyState
{
public:
	bool                                          RotateLock;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateSpeed;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x38];                                      // 0x0038(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_AI_FaceToTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_AI_FaceToTarget")
	}
	static class UNoceANS_AI_FaceToTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_AI_FaceToTarget>();
	}
};
DUMPER7_ASSERTS_UNoceANS_AI_FaceToTarget;

// Class GameNoce.NoceSubtitleTrack
// 0x0008 (0x00D0 - 0x00C8)
class UNoceSubtitleTrack final : public UMovieScenePropertyTrack
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSubtitleTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSubtitleTrack")
	}
	static class UNoceSubtitleTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSubtitleTrack>();
	}
};
DUMPER7_ASSERTS_UNoceSubtitleTrack;

// Class GameNoce.NoceAnimInstance
// 0x00D0 (0x0560 - 0x0490)
#pragma pack(push, 0x1)
class alignas(0x10) UNoceAnimInstance : public USMAnimInstance
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      SlopeDetectObjectTypes;                            // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ECollisionChannel                             PawnObjectChannel;                                 // 0x04A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             IKCollisionChannel;                                // 0x04A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               IKTraceTypeQuery;                                  // 0x04AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AB[0x1];                                      // 0x04AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IKTraceBoxSize;                                    // 0x04AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DoIKTraceHeightThreshold;                          // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSlopeDetect;                                    // 0x04B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugSlopeDetect;                                  // 0x04B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            OwnerMovementComponent;                            // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             OwnerCharacter;                                    // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHeadTracking;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoleStartTime;                                     // 0x04CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RolePatternIndex;                                  // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterLink;                                      // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLeaveLink;                                      // 0x04D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInLinkState;                                     // 0x04D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D7[0x1];                                      // 0x04D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LinkBankID;                                        // 0x04D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LinkMotionID;                                      // 0x04DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          InRagdollState;                                    // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasSaveRagdollFinalPose;                           // 0x04E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E2[0x2];                                      // 0x04E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RagdollFinalPoseName;                              // 0x04E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootIKInterpScale;                                 // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultSlotInterpValue;                            // 0x04F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultSlotBlending;                               // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultSlotFixBlending;                            // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDefaultSlotFixActive;                           // 0x0500(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRBWorldCollision;                                 // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DefaultRBWorldCollision;                           // 0x0502(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECollisionChannel                             RBWorldCollisionChannel;                           // 0x0503(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECollisionChannel                             DefaultRBWorldCollisionChannel;                    // 0x0504(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ShouldDoIKTrace;                                   // 0x0505(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_506[0x2];                                      // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkirtRigidBodyAlpha;                               // 0x0508(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScarfRigidBodyAlpha;                               // 0x050C(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShawlKawaiiAlpha;                                  // 0x0510(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HairKawaiiAlpha;                                   // 0x0514(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          PendingWarmUp;                                     // 0x0518(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisablePhysWeightOneFrame;                        // 0x0519(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51A[0x2];                                      // 0x051A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WarmUpRBANAlpha;                                   // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                PhysicsWorldGravity;                               // 0x0520(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          TransferBoneVelocities;                            // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_539[0x3];                                      // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharTopPhysAlpha;                                  // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BodyMidPhysAlpha;                                  // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HairMidPhysAlpha;                                  // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENocePhysType                                 HairPhysType;                                      // 0x0548(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairBottomPhysAlpha;                               // 0x054C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENocePhysType                                 BodyPhysType;                                      // 0x0550(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyBottomPhysAlpha;                               // 0x0554(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AfterSetDefaultSlotBlending(float InValue);
	void CheckIKWhenSeqStop();
	bool GetCanEnterLink();
	int32 GetRolePatternIndex();
	void ReplaceSetScarfRigidBodyAlpha(float InValue);
	void ReplaceSetShawlKawaiiAlpha(float InValue);
	void ReplaceSetShiroFurAlpha(float InValue);
	void ReplaceSetSkirtRigidBodyAlpha(float InValue);
	void ResetRoleStartTime();
	void SetbIsDefaultSlotFixActive(bool InValue);
	void SetBodyMidPhysAlpha(float InValue);
	void SetCanEnterLinkState(int32 InBankID, int32 InMotionID);
	void SetCharTopPhysAlpha(float InValue);
	void SetDefaultSlotBlending(float InValue);
	void SetDefaultSlotFixBlending(float InValue);
	void SetFootIKInterpScale(float InValue);
	void SetForceLeaveLinkState();
	void SetHairKawaiiAlpha(float InValue);
	void SetHairMidPhysAlpha(float InValue);
	void SetPhysicsWorldGravity(const struct FVector& InValue);
	void SetRBWorldCollision(bool InValue);
	void SetRBWorldCollisionChannel(ECollisionChannel InValue);
	void SetRolePatternIndex(int32 InIndex);
	void SetRoleStartTime(float InTime);
	void SetScarfRigidBodyAlpha(float InValue);
	void SetShawlKawaiiAlpha(float InValue);
	void SetShouldDoIKTrace(bool InValue);
	void SetSkirtRigidBodyAlpha(float InValue);
	void SetTransferBoneVelocities(bool InValue);
	void SetWarmUpRBANAlpha(float InValue);
	bool ShouldDoIKTraceByHeight();

	bool GetbIsDefaultSlotFixActive() const;
	float GetBodyBottomPhysAlpha() const;
	float GetBodyMidPhysAlpha() const;
	float GetCharTopPhysAlpha() const;
	float GetDefaultSlotBlending() const;
	float GetDefaultSlotFixBlending() const;
	float GetFinalPhysAlpha(float InParentAlpha, float InValue) const;
	float GetFootIKInterpScale() const;
	float GetHairBottomPhysAlpha() const;
	float GetHairKawaiiAlpha() const;
	float GetHairMidPhysAlpha() const;
	float GetPhysAlphaInPendingWarmUp(float InValue, ENocePhysType InPhysType) const;
	struct FVector GetPhysicsWorldGravity() const;
	bool GetRBWorldCollision() const;
	ECollisionChannel GetRBWorldCollisionChannel() const;
	float GetScarfRigidBodyAlpha() const;
	float GetShawlKawaiiAlpha() const;
	float GetSkirtRigidBodyAlpha() const;
	bool GetTransferBoneVelocities() const;
	float GetWarmUpRBANAlpha() const;
	float InternalGetBottomPhysAlpha(const float InMidPhysAlpha, const float InBottomValue, const ENocePhysType InPhysType, const float InGamePlayAlpha) const;
	bool LerpWithDefaultSlotBlendingForSeamlessOut(float* OutResult, float A, float B) const;
	float ReplaceGetScarfRigidBodyAlpha() const;
	float ReplaceGetShawlKawaiiAlpha() const;
	float ReplaceGetShiroFurAlpha() const;
	float ReplaceGetSkirtRigidBodyAlpha() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimInstance")
	}
	static class UNoceAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimInstance>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UNoceAnimInstance;

// Class GameNoce.NoceCutscenePivot
// 0x0008 (0x0298 - 0x0290)
class ANoceCutscenePivot final : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCutscenePivot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCutscenePivot")
	}
	static class ANoceCutscenePivot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceCutscenePivot>();
	}
};
DUMPER7_ASSERTS_ANoceCutscenePivot;

// Class GameNoce.NoceAnimInstanceInterface
// 0x0000 (0x0000 - 0x0000)
class INoceAnimInstanceInterface final
{
public:
	void WarmUp(int32 WarmUpFrames);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimInstanceInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimInstanceInterface")
	}
	static class INoceAnimInstanceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceAnimInstanceInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceAnimInstanceInterface;

// Class GameNoce.NoceAnimNotifyState_AnimCanel
// 0x0048 (0x0078 - 0x0030)
class UNoceAnimNotifyState_AnimCanel final : public UAnimNotifyState
{
public:
	TArray<ENoceAnimCancel>                       AnimCancelArray;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ActivateGameplayTag;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  AnyMatchingGameplayTags;                           // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   UsedStateMachineName;                              // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimNotifyState_AnimCanel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimNotifyState_AnimCanel")
	}
	static class UNoceAnimNotifyState_AnimCanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimNotifyState_AnimCanel>();
	}
};
DUMPER7_ASSERTS_UNoceAnimNotifyState_AnimCanel;

// Class GameNoce.NoceSanitySpawnSystem
// 0x00E8 (0x0128 - 0x0040)
class UNoceSanitySpawnSystem : public UTickableWorldSubsystem
{
public:
	bool                                          Enabled;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSpawnVolume;                                     // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          SpawnedEnemies;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         SpawnedEnemyNum;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANoceSanitySpawnVolume*                 CurrentSpawnVolume;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSanitySpawnVolumeSetting              CurrSpawnVolumeSetting;                            // 0x0068(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	class ACharacter*                             TargetSpawnCenter;                                 // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetSpawnInterval;                               // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeleteSpawnedEnemies();
	void EnterSpawnVolume_BP();
	void ExitSpawnVolume_BP();
	void ForceSpawn(const struct FSanitySpawnVolumeSetting& Setting);
	bool Initialize_BP();
	bool Tick_BP(float DeltaTime);
	void UpdateSpawnedEnemies();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSanitySpawnSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSanitySpawnSystem")
	}
	static class UNoceSanitySpawnSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSanitySpawnSystem>();
	}
};
DUMPER7_ASSERTS_UNoceSanitySpawnSystem;

// Class GameNoce.NoceAnimNotify_EventTagToAbility
// 0x0010 (0x0048 - 0x0038)
class UNoceAnimNotify_EventTagToAbility final : public UAnimNotify
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagnitudeValue;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimNotify_EventTagToAbility")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimNotify_EventTagToAbility")
	}
	static class UNoceAnimNotify_EventTagToAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimNotify_EventTagToAbility>();
	}
};
DUMPER7_ASSERTS_UNoceAnimNotify_EventTagToAbility;

// Class GameNoce.NoceAnimNotify_PlayerCostStamina
// 0x0010 (0x0048 - 0x0038)
class UNoceAnimNotify_PlayerCostStamina final : public UAnimNotify
{
public:
	class FName                                   StaminaKey;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CostMaxSanity;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAnimNotify_PlayerCostStamina")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAnimNotify_PlayerCostStamina")
	}
	static class UNoceAnimNotify_PlayerCostStamina* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAnimNotify_PlayerCostStamina>();
	}
};
DUMPER7_ASSERTS_UNoceAnimNotify_PlayerCostStamina;

// Class GameNoce.NoceANS_AttackTrace
// 0x00B8 (0x00E8 - 0x0030)
class UNoceANS_AttackTrace final : public UAnimNotifyState
{
public:
	struct FGameplayTagContainer                  AnyMatchingGameplayTags;                           // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   ComboName;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           AttackTraceNames;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           DeflectAttackTraceNames;                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveFloat*>         AtttackTraceRadiusRatioCurveMap;                   // 0x0078(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          IsLinkAttack;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickInterval;                                      // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SkipTickOnce;                                      // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D1[0x17];                                      // 0x00D1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_AttackTrace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_AttackTrace")
	}
	static class UNoceANS_AttackTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_AttackTrace>();
	}
};
DUMPER7_ASSERTS_UNoceANS_AttackTrace;

// Class GameNoce.NoceSystemMessageWidget
// 0x0000 (0x0368 - 0x0368)
class UNoceSystemMessageWidget final : public UNoceAnimWidget
{
public:
	void ShowText(const struct FNoceSystemMessageData& InData, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSystemMessageWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSystemMessageWidget")
	}
	static class UNoceSystemMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSystemMessageWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSystemMessageWidget;

// Class GameNoce.NoceANS_CameraShake
// 0x0018 (0x0048 - 0x0030)
class UNoceANS_CameraShake final : public UAnimNotifyState
{
public:
	TSubclassOf<class UCameraShakeBase>           ShakeClass;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          StopCameraShakeImmediately;                        // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D[0xB];                                       // 0x003D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_CameraShake")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_CameraShake")
	}
	static class UNoceANS_CameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_CameraShake>();
	}
};
DUMPER7_ASSERTS_UNoceANS_CameraShake;

// Class GameNoce.NoceANS_EnableCollisionByTag
// 0x0010 (0x0040 - 0x0030)
class UNoceANS_EnableCollisionByTag final : public UAnimNotifyState
{
public:
	bool                                          ShowDebugInfo;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionComponentTag;                             // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForCharAdditionalCollision;                        // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionEnabled                             BeginCollisionEnableType;                          // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionEnabled                             EndCollisionEnableType;                            // 0x003E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_EnableCollisionByTag")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_EnableCollisionByTag")
	}
	static class UNoceANS_EnableCollisionByTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_EnableCollisionByTag>();
	}
};
DUMPER7_ASSERTS_UNoceANS_EnableCollisionByTag;

// Class GameNoce.NoceTeleportTarget
// 0x0078 (0x0308 - 0x0290)
class ANoceTeleportTarget : public AActor
{
public:
	TMulticastInlineDelegate<void(bool Succeed)>  OnTeleportComplete;                                // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNoceStreamByProgressComp*              StreamByProgress;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorldPartitionStreamingSourceComponent* StreamingSource;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TeleportOffset;                                    // 0x02B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceTeleportRequest                   CurrentRequest;                                    // 0x02C8(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          UseFadeOutWhite;                                   // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionRadius;                                   // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x28];                                     // 0x02E0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetPointName();
	TArray<class FName> GetWorldTriggerGateway();
	void OnEndTeleport();
	void OnStartTeleport();
	void PreActualTeleport();
	void ReadyForFlush();
	bool RequestTeleport(class APawn* InPassenger, bool ResetCamera, bool IsInstant, bool StrictlyStreamingComplete, bool TeleportAfterStreaming, bool ForceGCAfterLevelStreamedOut, bool IgnoreWorldTrigger);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTeleportTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTeleportTarget")
	}
	static class ANoceTeleportTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceTeleportTarget>();
	}
};
DUMPER7_ASSERTS_ANoceTeleportTarget;

// Class GameNoce.NoceANS_EnablePlayerLookAtTarget
// 0x0010 (0x0040 - 0x0030)
class UNoceANS_EnablePlayerLookAtTarget final : public UAnimNotifyState
{
public:
	class FName                                   ComponentTag;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          StartEnable;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EndEnable;                                         // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_EnablePlayerLookAtTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_EnablePlayerLookAtTarget")
	}
	static class UNoceANS_EnablePlayerLookAtTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_EnablePlayerLookAtTarget>();
	}
};
DUMPER7_ASSERTS_UNoceANS_EnablePlayerLookAtTarget;

// Class GameNoce.NoceRigTempDataStorage
// 0x0010 (0x0040 - 0x0030)
class UNoceRigTempDataStorage final : public UDataAsset
{
public:
	TArray<struct FTempDataStorage>               TempStoredData;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRigTempDataStorage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRigTempDataStorage")
	}
	static class UNoceRigTempDataStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRigTempDataStorage>();
	}
};
DUMPER7_ASSERTS_UNoceRigTempDataStorage;

// Class GameNoce.NoceANS_ForceShowScabbard
// 0x0008 (0x0038 - 0x0030)
class UNoceANS_ForceShowScabbard final : public UAnimNotifyState
{
public:
	bool                                          bShowScabbardKatanaBegin;                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowScabbardKatanaEnd;                            // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_ForceShowScabbard")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_ForceShowScabbard")
	}
	static class UNoceANS_ForceShowScabbard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_ForceShowScabbard>();
	}
};
DUMPER7_ASSERTS_UNoceANS_ForceShowScabbard;

// Class GameNoce.NoceANS_HideWeapon
// 0x0010 (0x0040 - 0x0030)
class UNoceANS_HideWeapon final : public UAnimNotifyState
{
public:
	bool                                          StartHide;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EndHide;                                           // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0xE];                                       // 0x0032(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_HideWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_HideWeapon")
	}
	static class UNoceANS_HideWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_HideWeapon>();
	}
};
DUMPER7_ASSERTS_UNoceANS_HideWeapon;

// Class GameNoce.NoceANS_InputQueue
// 0x0028 (0x0058 - 0x0030)
class UNoceANS_InputQueue final : public UAnimNotifyState
{
public:
	TArray<struct FNoceInputQueueUnit>            InputQueueUnits;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ActivateGameplayTag;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   UsedStateMachineName;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_InputQueue")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_InputQueue")
	}
	static class UNoceANS_InputQueue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_InputQueue>();
	}
};
DUMPER7_ASSERTS_UNoceANS_InputQueue;

// Class GameNoce.NoceRBANLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceRBANLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FRigidBodyReference ConvertToRigidBody(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToRigidBodyPure(const struct FAnimNodeReference& Node, struct FRigidBodyReference* RigidBody, bool* Result);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRBANLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRBANLibrary")
	}
	static class UNoceRBANLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRBANLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceRBANLibrary;

// Class GameNoce.NoceANS_LockLocationComponent
// 0x0008 (0x0038 - 0x0030)
class UNoceANS_LockLocationComponent final : public UAnimNotifyState
{
public:
	bool                                          BeginEnable;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EndEnable;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_LockLocationComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_LockLocationComponent")
	}
	static class UNoceANS_LockLocationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_LockLocationComponent>();
	}
};
DUMPER7_ASSERTS_UNoceANS_LockLocationComponent;

// Class GameNoce.NoceSellPopResultWidget
// 0x0000 (0x03B0 - 0x03B0)
class UNoceSellPopResultWidget final : public UNoceFocusableWidget
{
public:
	void ShowResult(int32 InTotalValue, const TArray<struct FNoceOfferingEffectData>& InOfferingEffects, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSellPopResultWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSellPopResultWidget")
	}
	static class UNoceSellPopResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSellPopResultWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSellPopResultWidget;

// Class GameNoce.NoceANS_PhysicsAssetCollision
// 0x0030 (0x0060 - 0x0030)
class UNoceANS_PhysicsAssetCollision final : public UAnimNotifyState
{
public:
	TArray<class FName>                           BeginBoneNames;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ECollisionEnabled                             BeginType;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EndBoneNames;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ECollisionEnabled                             EndType;                                           // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_PhysicsAssetCollision")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_PhysicsAssetCollision")
	}
	static class UNoceANS_PhysicsAssetCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_PhysicsAssetCollision>();
	}
};
DUMPER7_ASSERTS_UNoceANS_PhysicsAssetCollision;

// Class GameNoce.NoceANS_PlayerCharage
// 0x0018 (0x0048 - 0x0030)
class UNoceANS_PlayerCharage final : public UAnimNotifyState
{
public:
	class FName                                   ComboName;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   InputAction;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MontagePlayRate;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_PlayerCharage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_PlayerCharage")
	}
	static class UNoceANS_PlayerCharage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_PlayerCharage>();
	}
};
DUMPER7_ASSERTS_UNoceANS_PlayerCharage;

// Class GameNoce.NoceANS_PlayerHairAlpha
// 0x0028 (0x0058 - 0x0030)
class UNoceANS_PlayerHairAlpha final : public UAnimNotifyState
{
public:
	float                                         FadeInTime;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TargetAlpha;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNocePlayerAnimInstance*                PlayerAnimInstance;                                // 0x0040(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DeltaTime;                                         // 0x0048(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CacheTotalDuration;                                // 0x004C(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CacheDiffAlpha;                                    // 0x0050(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CacheAlpha;                                        // 0x0054(0x0004)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetHairAlpha(float InValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_PlayerHairAlpha")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_PlayerHairAlpha")
	}
	static class UNoceANS_PlayerHairAlpha* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_PlayerHairAlpha>();
	}
};
DUMPER7_ASSERTS_UNoceANS_PlayerHairAlpha;

// Class GameNoce.NoceReplaceWidget
// 0x00D0 (0x0480 - 0x03B0)
class UNoceReplaceWidget : public UNoceFocusableWidget
{
public:
	class UTextBlock*                             NameTextBlock1;                                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NameTextBlock2;                                    // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeInLong;                                        // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Loop;                                              // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         PickPreviewWidgetPath;                             // 0x03D0(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         PopWindowWidgetPath;                               // 0x03F0(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   PopWindowDialogText;                               // 0x0410(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           HideShortcutTag;                                   // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x0428(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               CancelSound;                                       // 0x0430(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowFadeInSound;                              // 0x0438(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowFadeOutSound;                             // 0x0440(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowReplaceSound;                             // 0x0448(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UNocePlayerInventoryComponent*          InventoryComponent;                                // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePickPreviewWidget*                 PickPreviewWidget;                                 // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePopWindowWidget*                   PopWindowWidget;                                   // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllIDs;                                            // 0x0468(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          IsShowAfterPickupPreview;                          // 0x0478(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMouseDown(int32 Index_0);
	void OnPickPreviewClose();
	void OnPopWindowClose();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceReplaceWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceReplaceWidget")
	}
	static class UNoceReplaceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceReplaceWidget>();
	}
};
DUMPER7_ASSERTS_UNoceReplaceWidget;

// Class GameNoce.NoceANS_PlayerPushOffset
// 0x0000 (0x0030 - 0x0030)
class UNoceANS_PlayerPushOffset final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_PlayerPushOffset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_PlayerPushOffset")
	}
	static class UNoceANS_PlayerPushOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_PlayerPushOffset>();
	}
};
DUMPER7_ASSERTS_UNoceANS_PlayerPushOffset;

// Class GameNoce.GameSaveSubsystemInterface
// 0x0000 (0x0000 - 0x0000)
class IGameSaveSubsystemInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameSaveSubsystemInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameSaveSubsystemInterface")
	}
	static class IGameSaveSubsystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameSaveSubsystemInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGameSaveSubsystemInterface;

// Class GameNoce.NoceANS_PlayerRotateFromInput
// 0x0060 (0x0090 - 0x0030)
class UNoceANS_PlayerRotateFromInput final : public UNoceAnimNotifyState
{
public:
	float                                         RotateSpeed;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLimit;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitAngle;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertInputVector;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x003D(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x52];                                      // 0x003E(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_PlayerRotateFromInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_PlayerRotateFromInput")
	}
	static class UNoceANS_PlayerRotateFromInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_PlayerRotateFromInput>();
	}
};
DUMPER7_ASSERTS_UNoceANS_PlayerRotateFromInput;

// Class GameNoce.NoceANS_RootMotionScale
// 0x0008 (0x0038 - 0x0030)
class UNoceANS_RootMotionScale final : public UAnimNotifyState
{
public:
	float                                         RootMotionScale;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_RootMotionScale")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_RootMotionScale")
	}
	static class UNoceANS_RootMotionScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_RootMotionScale>();
	}
};
DUMPER7_ASSERTS_UNoceANS_RootMotionScale;

// Class GameNoce.NoceRichTextBlockImageDecorator
// 0x0010 (0x0038 - 0x0028)
class UNoceRichTextBlockImageDecorator final : public URichTextBlockDecorator
{
public:
	class UDataTable*                             ImageSet;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SizeFactor;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Padding;                                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRichTextBlockImageDecorator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRichTextBlockImageDecorator")
	}
	static class UNoceRichTextBlockImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRichTextBlockImageDecorator>();
	}
};
DUMPER7_ASSERTS_UNoceRichTextBlockImageDecorator;

// Class GameNoce.NoceANS_SetNoceHearingRange
// 0x0008 (0x0038 - 0x0030)
class UNoceANS_SetNoceHearingRange final : public UNoceAnimNotifyState
{
public:
	float                                         HearingRange;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RestoreAtNotifyEnd;                                // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_SetNoceHearingRange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_SetNoceHearingRange")
	}
	static class UNoceANS_SetNoceHearingRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_SetNoceHearingRange>();
	}
};
DUMPER7_ASSERTS_UNoceANS_SetNoceHearingRange;

// Class GameNoce.NoceANS_SetParticleParaByCurve
// 0x0108 (0x0138 - 0x0030)
class UNoceANS_SetParticleParaByCurve final : public UAnimNotifyState
{
public:
	class FName                                   IdentifyTag;                                       // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveFloat*>         FloatCurveMap;                                     // 0x0038(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveVector*>        VectorCurveMap;                                    // 0x0088(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveLinearColor*>   LinearColorCurveMap;                               // 0x00D8(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_SetParticleParaByCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_SetParticleParaByCurve")
	}
	static class UNoceANS_SetParticleParaByCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_SetParticleParaByCurve>();
	}
};
DUMPER7_ASSERTS_UNoceANS_SetParticleParaByCurve;

// Class GameNoce.NoceANS_StartInvincible
// 0x0000 (0x0030 - 0x0030)
class UNoceANS_StartInvincible final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_StartInvincible")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_StartInvincible")
	}
	static class UNoceANS_StartInvincible* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_StartInvincible>();
	}
};
DUMPER7_ASSERTS_UNoceANS_StartInvincible;

// Class GameNoce.NoceSanityComponent
// 0x0308 (0x03A8 - 0x00A0)
class UNoceSanityComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void()>              OnStartFocus;                                      // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEndFocus;                                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFocusCharged;                                    // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float InRatio)> OnAttackBuffAccumulateRatioChanged;                // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStartSanityWeak;                                 // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEndSanityWeak;                                   // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          DebugTimerLog;                                     // 0x0100(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DebugTimeDilationLog;                              // 0x0101(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve_StartFocusTimeDilation;                      // 0x0108(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            Curve_EndFocusTimeDilation;                        // 0x0110(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            Curve_UsingFocusCostSanity;                        // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     SanityAttribute;                                   // 0x0120(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     CurrentMaxSanityAttribute;                         // 0x0158(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     MaxSanityAttribute;                                // 0x0190(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     AttackBuffAccumulateRatioAttribute;                // 0x01C8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     SanityCostRatioAttribute;                          // 0x0200(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_SanityCostSetByCaller;                          // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_SanityCostSetByCaller;                         // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_CurrentMaxSanityCostSetByCaller;                // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_FillCurrentMaxSanityToMinValue;                 // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_FillSanityToCurrentMaxSanity;                   // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_CurrentMaxSanityCostSetByCaller;               // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_SanityRegen;                                    // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENoceActionLevel, float>                 ActionLevelSanityRegenRatioMap;                    // 0x0270(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<ENoceActionLevel, float>                 ActionLevelSanityNoChangeWaitForRecoverTimeRatioMap; // 0x02C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         CanUseFocusSanityThreshold;                        // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SanityWeakTime_Constant;                           // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SanityWeakTime_Multiplier;                         // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   InputActionFocusName;                              // 0x031C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_FocusAttackRatio;                               // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AttackBuffAccumulateMax;                           // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AttackBuffAccumulateConst;                         // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x38];                                     // 0x0338(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceCheatManager*                      CheatManager;                                      // 0x0370(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerState*                       PlayerState;                                       // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerController*                  PlayerController;                                  // 0x0380(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0388(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0390(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceGameplayTagDataAsset*              TagDataAsset;                                      // 0x0398(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAttackBuffAccumulateValue();
	void CostCurrentMaxSanity(float InValue, bool InCanEndFocus);
	void CostSanity(float InValue, bool InClampByCurrentMaxSanity);
	void EndFocus(bool InApplySanityWeak);
	void ForceReset(bool InFillSanityToCurrentMaxSanity, bool InForceResetTimeDilation);
	float GetActionLevelSanityRegenRatio();
	bool GetEnableFocus();
	void HandleInputAction(ENoceInputAction InInputAction, bool InPressed);
	void HandleOnHit(const TArray<struct FNoceAttackHitResult>& HitResults);
	void HandleOnPossessed(bool InPossessed);
	bool HasAttackBuffAccumulateValue();
	bool IsUsingFocus();
	void PauseAttackBuffAccumulate();
	void ResetNoChangeWaitForRecoverTimer();
	void ResumeAttackBuffAccumulate();
	void SetEnableFocus(bool Value);
	void StartFocus();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSanityComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSanityComponent")
	}
	static class UNoceSanityComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSanityComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSanityComponent;

// Class GameNoce.NoceSavePointUpgradeDataUIAsset
// 0x0050 (0x0080 - 0x0030)
class UNoceSavePointUpgradeDataUIAsset final : public UDataAsset
{
public:
	TMap<ENoceUpgradeType, struct FNoceSavePointUpgradeUIData> Data;                                 // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	struct FNoceSavePointUpgradeListItemData GetListItemData(ENoceUpgradeType Type);
	class FText GetPopWindowText(ENoceUpgradeType Type);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSavePointUpgradeDataUIAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSavePointUpgradeDataUIAsset")
	}
	static class UNoceSavePointUpgradeDataUIAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSavePointUpgradeDataUIAsset>();
	}
};
DUMPER7_ASSERTS_UNoceSavePointUpgradeDataUIAsset;

// Class GameNoce.NoceANS_TimedNiagaraEffect
// 0x0060 (0x00D8 - 0x0078)
class UNoceANS_TimedNiagaraEffect final : public UAnimNotifyState_TimedNiagaraEffect
{
public:
	struct FGameplayTagContainer                  AnyMatchingGameplayTags;                           // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FVector                                Scale;                                             // 0x0098(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PlayOnAttackTraceHit;                              // 0x00B0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IdentifyTag;                                       // 0x00B4(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAbsoluteScale;                                    // 0x00BC(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BD[0x1B];                                      // 0x00BD(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttackTraceHit(const TArray<struct FNoceAttackHitResult>& InHitResults) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceANS_TimedNiagaraEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceANS_TimedNiagaraEffect")
	}
	static class UNoceANS_TimedNiagaraEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceANS_TimedNiagaraEffect>();
	}
};
DUMPER7_ASSERTS_UNoceANS_TimedNiagaraEffect;

// Class GameNoce.NoceAN_AttachScabbardToHand
// 0x0008 (0x0040 - 0x0038)
class UNoceAN_AttachScabbardToHand final : public UAnimNotify
{
public:
	bool                                          ToHand;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_AttachScabbardToHand")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_AttachScabbardToHand")
	}
	static class UNoceAN_AttachScabbardToHand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_AttachScabbardToHand>();
	}
};
DUMPER7_ASSERTS_UNoceAN_AttachScabbardToHand;

// Class GameNoce.NoceAN_BodyPartGroup
// 0x0018 (0x0050 - 0x0038)
class UNoceAN_BodyPartGroup final : public UAnimNotify
{
public:
	bool                                          IsAdd;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BodyPartGroupNames;                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_BodyPartGroup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_BodyPartGroup")
	}
	static class UNoceAN_BodyPartGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_BodyPartGroup>();
	}
};
DUMPER7_ASSERTS_UNoceAN_BodyPartGroup;

// Class GameNoce.NoceDynamicPickupsRuleDataAsset
// 0x0050 (0x0080 - 0x0030)
class UNoceDynamicPickupsRuleDataAsset final : public UDataAsset
{
public:
	TMap<ENoceActionLevel, struct FNoceDynamicPickupsRuleList> DynamicRuleData;                      // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDynamicPickupsRuleDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDynamicPickupsRuleDataAsset")
	}
	static class UNoceDynamicPickupsRuleDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDynamicPickupsRuleDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceDynamicPickupsRuleDataAsset;

// Class GameNoce.NoceAN_PlayerScarfResetDynmaics
// 0x0028 (0x0060 - 0x0038)
class UNoceAN_PlayerScarfResetDynmaics final : public UAnimNotify
{
public:
	struct FGameplayTagContainer                  AnyMatchingGameplayTags;                           // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ETeleportType                                 TeleportType;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_PlayerScarfResetDynmaics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_PlayerScarfResetDynmaics")
	}
	static class UNoceAN_PlayerScarfResetDynmaics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_PlayerScarfResetDynmaics>();
	}
};
DUMPER7_ASSERTS_UNoceAN_PlayerScarfResetDynmaics;

// Class GameNoce.NoceSpeakerDataHolderAsset
// 0x0010 (0x0040 - 0x0030)
class UNoceSpeakerDataHolderAsset final : public UDataAsset
{
public:
	TArray<struct FNoceSpeakerDataHolderAssetSetting> SpeakerData;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSpeakerDataHolderAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSpeakerDataHolderAsset")
	}
	static class UNoceSpeakerDataHolderAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSpeakerDataHolderAsset>();
	}
};
DUMPER7_ASSERTS_UNoceSpeakerDataHolderAsset;

// Class GameNoce.NoceAN_PlayerSkirtResetDynmaics
// 0x0028 (0x0060 - 0x0038)
class UNoceAN_PlayerSkirtResetDynmaics final : public UAnimNotify
{
public:
	struct FGameplayTagContainer                  AnyMatchingGameplayTags;                           // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ETeleportType                                 TeleportType;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_PlayerSkirtResetDynmaics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_PlayerSkirtResetDynmaics")
	}
	static class UNoceAN_PlayerSkirtResetDynmaics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_PlayerSkirtResetDynmaics>();
	}
};
DUMPER7_ASSERTS_UNoceAN_PlayerSkirtResetDynmaics;

// Class GameNoce.NoceAN_ResetBodyPartGroupHealth
// 0x0010 (0x0048 - 0x0038)
class UNoceAN_ResetBodyPartGroupHealth final : public UAnimNotify
{
public:
	TArray<class FName>                           BodyPartGroupNames;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_ResetBodyPartGroupHealth")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_ResetBodyPartGroupHealth")
	}
	static class UNoceAN_ResetBodyPartGroupHealth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_ResetBodyPartGroupHealth>();
	}
};
DUMPER7_ASSERTS_UNoceAN_ResetBodyPartGroupHealth;

// Class GameNoce.NoceAN_SetParticleParameter
// 0x0198 (0x01D0 - 0x0038)
class UNoceAN_SetParticleParameter final : public UAnimNotify
{
public:
	class FName                                   IdentifyTag;                                       // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, bool>                       BoolMap;                                           // 0x0040(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, int32>                      IntMap;                                            // 0x0090(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      FloatMap;                                          // 0x00E0(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FVector>             VectorMap;                                         // 0x0130(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLinearColor>        LinearColorMap;                                    // 0x0180(0x0050)(Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_SetParticleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_SetParticleParameter")
	}
	static class UNoceAN_SetParticleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_SetParticleParameter>();
	}
};
DUMPER7_ASSERTS_UNoceAN_SetParticleParameter;

// Class GameNoce.NocePlayerAdditionalColComponent
// 0x0098 (0x0138 - 0x00A0)
class UNocePlayerAdditionalColComponent final : public UActorComponent
{
public:
	bool                                          ColHeadSyncHeadXYPosition;                         // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ColHeadTag;                                        // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HeadSocketName;                                    // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             PlayerPawnChannel;                                 // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      EnemyObjectTypes;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      WorldObjectTypes;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         DetectOverlapEnemyRadius;                          // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DetectOverlapEnemyZOffset;                         // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DrawDebug;                                         // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAbilitySystemComponent*            AbilitySystemComponent;                            // 0x00F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 OwnerMesh;                                         // 0x00F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      OwnerCapsuleComponent;                             // 0x0100(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       ColHeadCompponent;                                 // 0x0108(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    OverlapedEnemyComponent;                           // 0x0110(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         OverlapActorsToIgnore;                             // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanEnableColHead();
	class USphereComponent* GetColHead();
	void HandleOnPossessed(bool InPossessed);
	void OnGameplayTagChanged(const struct FGameplayTag& Tag, bool TagExist);
	void RegisterOnPossessed();
	void SetColHeadCollisionEnable(bool InEnable);
	void ToggleDrawDebug();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerAdditionalColComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerAdditionalColComponent")
	}
	static class UNocePlayerAdditionalColComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerAdditionalColComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerAdditionalColComponent;

// Class GameNoce.NoceAN_ShowScabbardKatana
// 0x0008 (0x0040 - 0x0038)
class UNoceAN_ShowScabbardKatana final : public UAnimNotify
{
public:
	bool                                          bShow;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_ShowScabbardKatana")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_ShowScabbardKatana")
	}
	static class UNoceAN_ShowScabbardKatana* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_ShowScabbardKatana>();
	}
};
DUMPER7_ASSERTS_UNoceAN_ShowScabbardKatana;

// Class GameNoce.NoceSetting_AASuperSampling
// 0x0000 (0x01A0 - 0x01A0)
class UNoceSetting_AASuperSampling final : public UGameSettingValueDiscreteDynamic_Enum
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetting_AASuperSampling")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetting_AASuperSampling")
	}
	static class UNoceSetting_AASuperSampling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetting_AASuperSampling>();
	}
};
DUMPER7_ASSERTS_UNoceSetting_AASuperSampling;

// Class GameNoce.NoceAN_StartInvincible
// 0x0008 (0x0040 - 0x0038)
class UNoceAN_StartInvincible final : public UAnimNotify
{
public:
	float                                         duration;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAN_StartInvincible")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAN_StartInvincible")
	}
	static class UNoceAN_StartInvincible* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAN_StartInvincible>();
	}
};
DUMPER7_ASSERTS_UNoceAN_StartInvincible;

// Class GameNoce.NoceArrowWidget
// 0x0030 (0x0330 - 0x0300)
class UNoceArrowWidget : public UNoceUserWidgetBase
{
public:
	TMulticastInlineDelegate<void()>              OnMouseDown;                                       // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          IsDisable;                                         // 0x0310(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Default;                                           // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select;                                            // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Disable;                                           // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FEventReply OnMouseButtonDownArrow(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
	void OnReset();
	void OnSelect();
	void OnSelectCompleted();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceArrowWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceArrowWidget")
	}
	static class UNoceArrowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceArrowWidget>();
	}
};
DUMPER7_ASSERTS_UNoceArrowWidget;

// Class GameNoce.NoceAssignLipSyncTool
// 0x0000 (0x0290 - 0x0290)
class ANoceAssignLipSyncTool final : public AActor
{
public:
	void AssignLipSyncMontageToLine(class UDataTable* InTable, class FName InRowName, const struct FNoceDialogSet& DialogSet, int32 LineIndex, class UAnimMontage* AnimMontage);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAssignLipSyncTool")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAssignLipSyncTool")
	}
	static class ANoceAssignLipSyncTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceAssignLipSyncTool>();
	}
};
DUMPER7_ASSERTS_ANoceAssignLipSyncTool;

// Class GameNoce.NoceAttributeSet
// 0x0000 (0x0030 - 0x0030)
class UNoceAttributeSet : public UAttributeSet
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAttributeSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAttributeSet")
	}
	static class UNoceAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAttributeSet>();
	}
};
DUMPER7_ASSERTS_UNoceAttributeSet;

// Class GameNoce.NoceCharacterAttributeSet
// 0x0050 (0x0080 - 0x0030)
class UNoceCharacterAttributeSet : public UNoceAttributeSet
{
public:
	struct FGameplayAttributeData                 Damage;                                            // 0x0030(0x0010)(NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Health;                                            // 0x0040(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxHealth;                                         // 0x0050(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Armor;                                             // 0x0060(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxArmor;                                          // 0x0070(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	void SetArmorClamped(float NewHealth);
	void SetHealthClamped(float NewHealth);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCharacterAttributeSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCharacterAttributeSet")
	}
	static class UNoceCharacterAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCharacterAttributeSet>();
	}
};
DUMPER7_ASSERTS_UNoceCharacterAttributeSet;

// Class GameNoce.NocePlayerAttributeSet
// 0x02B0 (0x0330 - 0x0080)
class UNocePlayerAttributeSet final : public UNoceCharacterAttributeSet
{
public:
	struct FGameplayAttributeData                 Stamina;                                           // 0x0080(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxStamina;                                        // 0x0090(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 StaminaDelayRecoverTime;                           // 0x00A0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 StaminaRecover;                                    // 0x00B0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 StaminaTiredTime;                                  // 0x00C0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 StaminaCostRatio;                                  // 0x00D0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SprintStaminaCostRatio;                            // 0x00E0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 StaminaDamageRatio;                                // 0x00F0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 LowStaminaThreshold;                               // 0x0100(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Sanity;                                            // 0x0110(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 CurrentMaxSanity;                                  // 0x0120(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MinCurrentMaxSanity;                               // 0x0130(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxSanity;                                         // 0x0140(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityCostRatio;                                   // 0x0150(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityDamageRatio;                                 // 0x0160(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityRecoverAdd;                                  // 0x0170(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityRecoverRatio;                                // 0x0180(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityRegen;                                       // 0x0190(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityRegenRatio;                                  // 0x01A0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SanityNoChangeWaitForRecoverTime;                  // 0x01B0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 ClawTransform;                                     // 0x01C0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxClawTransform;                                  // 0x01D0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 ClawTransformRecover;                              // 0x01E0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 ClawTransformDecay;                                // 0x01F0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 ClawTransformDecayDefault;                         // 0x0200(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 ClawTransformDecayAdd;                             // 0x0210(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 BattleStatusTime;                                  // 0x0220(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Attack;                                            // 0x0230(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 ExtraAttack;                                       // 0x0240(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 FocusAttackRatioHealth;                            // 0x0250(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 EnemyBreakDownAttackRatio;                         // 0x0260(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 WeaponBreakAttackRatio;                            // 0x0270(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Wince;                                             // 0x0280(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 FocusAttackRatioWince;                             // 0x0290(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 FocusAttackBuffAccumulateRatio;                    // 0x02A0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 FocusAttackCurrentMaxSanityCostRatio;              // 0x02B0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 EnemySightRatio;                                   // 0x02C0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 WeaponDurabilityCostRatio;                         // 0x02D0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 HealthDamageRatio;                                 // 0x02E0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 HealthRecoverAdd;                                  // 0x02F0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 HealthRecoverRatio;                                // 0x0300(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 GutsDamageToHealthRatio;                           // 0x0310(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 JustDodgeCounterDistance;                          // 0x0320(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	void SetClawTransformClamped(float NewTransfom);
	void SetCurrentMaxSanityClamped(float NewCurrentMaxSanity);
	void SetSanityClamped(float NewSanity);
	void SetStaminaClamped(float NewStamian);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerAttributeSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerAttributeSet")
	}
	static class UNocePlayerAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerAttributeSet>();
	}
};
DUMPER7_ASSERTS_UNocePlayerAttributeSet;

// Class GameNoce.NoceAsyncLoadSeqPreloadData
// 0x0240 (0x0270 - 0x0030)
class alignas(0x10) UNoceAsyncLoadSeqPreloadData final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void()>              OnComplete;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x210];                                     // 0x0040(0x0210)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Result;                                            // 0x0250(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UMaterialInterface>> CineCompPreloadObjs;                            // 0x0260(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UNoceAsyncLoadSeqPreloadData* AsyncLoadSeqPreloadData(class UObject* WorldContextObject, const struct FNoceSeqData& SeqData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAsyncLoadSeqPreloadData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAsyncLoadSeqPreloadData")
	}
	static class UNoceAsyncLoadSeqPreloadData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAsyncLoadSeqPreloadData>();
	}
};
DUMPER7_ASSERTS_UNoceAsyncLoadSeqPreloadData;

// Class GameNoce.NoceSuperArmorComponent
// 0x0008 (0x00A8 - 0x00A0)
class UNoceSuperArmorComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndSuperArmor();
	bool IsSuperArmor();
	void StartSuperArmor();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSuperArmorComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSuperArmorComponent")
	}
	static class UNoceSuperArmorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSuperArmorComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSuperArmorComponent;

// Class GameNoce.NoceAsyncTaskAttributeChanged
// 0x0060 (0x0090 - 0x0030)
class UNoceAsyncTaskAttributeChanged final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)> OnAttributeChanged; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASC;                                               // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x48];                                      // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UNoceAsyncTaskAttributeChanged* ListenForAttributeChange(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAttribute& Attribute);
	static class UNoceAsyncTaskAttributeChanged* ListenForAttributesChange(class UAbilitySystemComponent* AbilitySystemComponent, const TArray<struct FGameplayAttribute>& Attributes);

	void EndTask();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAsyncTaskAttributeChanged")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAsyncTaskAttributeChanged")
	}
	static class UNoceAsyncTaskAttributeChanged* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAsyncTaskAttributeChanged>();
	}
};
DUMPER7_ASSERTS_UNoceAsyncTaskAttributeChanged;

// Class GameNoce.NoceAttachmentBaseComponent
// 0x0018 (0x00B8 - 0x00A0)
class UNoceAttachmentBaseComponent : public UActorComponent
{
public:
	TArray<struct FAttachmentSetting>             Attachments;                                       // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DoAttachAtBeginPlay;                               // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoAttach();
	void OnOwnerActorDestroyed(class AActor* InActor);
	void PreviewAttach();
	void SetAttachmentHidden(bool Hidden);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAttachmentBaseComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAttachmentBaseComponent")
	}
	static class UNoceAttachmentBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAttachmentBaseComponent>();
	}
};
DUMPER7_ASSERTS_UNoceAttachmentBaseComponent;

// Class GameNoce.NoceAttachmentComponent
// 0x0000 (0x00B8 - 0x00B8)
class UNoceAttachmentComponent final : public UNoceAttachmentBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAttachmentComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAttachmentComponent")
	}
	static class UNoceAttachmentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAttachmentComponent>();
	}
};
DUMPER7_ASSERTS_UNoceAttachmentComponent;

// Class GameNoce.NoceCharacter
// 0x06B0 (0x0D20 - 0x0670)
class ANoceCharacter : public ACharacter
{
public:
	uint8                                         Pad_668[0x98];                                     // 0x0668(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	class UNeoAudioSoundComponent*                MySoundComponent;                                  // 0x0700(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 HeadComponent;                                     // 0x0708(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 HairComponent;                                     // 0x0710(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANoceAISpawner*                         MySpawner;                                         // 0x0718(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnDie;                                             // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReviveEvent;                                     // 0x0730(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         UnderAttackDuration;                               // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderAttackTimer;                                  // 0x0744(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BeginPlayGameTime;                                 // 0x0748(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnerName;                                       // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SavedCharMeshType;                                 // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpawnerDisplayName;                                // 0x0760(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BeginLocation;                                     // 0x0770(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OnLoadedLocation;                                  // 0x0788(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TerritoryName;                                     // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAdjustWalkSpeed;                               // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A9[0x3];                                      // 0x07A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InheritedTagName;                                  // 0x07AC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceCinematicActorComponent*           CineActorComponent;                                // 0x07B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CharacterName;                                     // 0x07C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CharacterTag;                                      // 0x07C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CharacterLevel;                                    // 0x07D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D4[0x4];                                      // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceAttackHitResult                   LastDamagedResult;                                 // 0x07D8(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         BaseTurn;                                          // 0x0950(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseLookUp;                                        // 0x0954(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseTurnRate;                                      // 0x0958(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseLookUpRate;                                    // 0x095C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PushOffset;                                        // 0x0960(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnablePushOffset;                                 // 0x0978(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlive;                                            // 0x0979(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_97A[0x2];                                      // 0x097A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoleAnimationStartTime;                            // 0x097C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RolePatternIndex;                                  // 0x0980(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SpawnMontagePlayed;                                // 0x0984(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovementMode                                 CacheMovementMode;                                 // 0x0985(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_986[0x2];                                      // 0x0986(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DieCount;                                          // 0x0988(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdolling;                                       // 0x098C(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_98D[0x3];                                      // 0x098D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0990(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceCharacterAttributeSet*             CharacterAttributeSet;                             // 0x0998(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UNoceGameplayAbility>> CharacterAbilities;                              // 0x09A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    StartupEffects;                                    // 0x09B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C0[0x20];                                     // 0x09C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceSystemSaveGame*                    SystemSaveGame;                                    // 0x09E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUISubsystem*                       UISystem;                                          // 0x09E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWaitTurnRateNoInput;                              // 0x09F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWaitLookUpRateNoInput;                            // 0x09F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSuicideDead;                                      // 0x09F2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F3[0x1];                                      // 0x09F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bClearCineActorMeshTransform;                      // 0x09F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F5[0xB];                                      // 0x09F5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginalMeshTransform;                             // 0x0A00(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentSignificance;                               // 0x0A60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsActivatedByDistance;                             // 0x0A64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A65[0x3];                                      // 0x0A65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedDistance;                                 // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseDisablePostAbp;                                 // 0x0A6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A6D[0x7];                                      // 0x0A6D(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DefaultDisablePostProcessValue;                    // 0x0A74(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A75[0x3];                                      // 0x0A75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        HardReferenceObjectArray;                          // 0x0A78(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FNoceCharPrecachingPSOData             PrecachingPSO;                                     // 0x0A88(0x0100)(Edit, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	struct FNoceCharPrecachingPSOData             HinaPrecachingPSO;                                 // 0x0B88(0x0100)(Edit, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class FString                                 DisableBaseMaterialName;                           // 0x0C88(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseRandomCharMeshType;                             // 0x0C98(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C99[0x7];                                      // 0x0C99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CharMeshType;                                      // 0x0CA0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    DefaultCharMeshType;                               // 0x0CB0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   DisableRBANTag;                                    // 0x0CC0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, int32>                      EnableCollisionByTagCountMap;                      // 0x0CC8(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D18[0x8];                                      // 0x0D18(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPushOffset(const struct FVector& InValue);
	bool CheckNoHealthLoss();
	void CreateCineActorComponent(const TArray<class FName>& InTags, const struct FNoceCineActorSeqStopData& CineCharSetting);
	void Die();
	void DisplayDebug_BP(class UCanvas* Canvas, float& YL, float& YPos);
	class FName GetARandomCharMeshType(const TArray<class FName>& ForbiddenNames);
	const class FName GetCharacterName();
	class FString GetCharMeshTypeComment(const class FName& InRowName);
	TArray<class FName> GetCharMeshTypeRowNames();
	class ANoceWeapon* GetCurrentWeapon();
	int32 GetDieCount();
	bool GetEnablePushOffset();
	class USkeletalMeshComponent* GetHair();
	class USkeletalMeshComponent* GetHead();
	const class FName GetLogicalName();
	double GetSecondsScineBeginPlay();
	class UNeoAudioSoundComponent* GetSoundComponent();
	struct FVector GetSpawnerLocation();
	bool GetSuicideDead();
	void HandleInputAxis(ENoceInputAxis InInputAxis, float InValue);
	bool HasCurrentWeapon();
	void InitSkinnedDecal();
	void InitSkinnedDecalForPreview();
	bool IsCurrentlyUnderAttack();
	bool IsCurrentWeaponVisible();
	void MoveForward(float Value);
	void MoveRight(float Value);
	void OnDamaged(const struct FNoceAttackHitResult& AttackHitResult);
	void OnLoadGameSave_BP();
	void OnLoadRecord(const struct FNoceCharacterRecord& InRecord);
	void OnPostSignificance(class ANoceCharacter* Character, float Significance);
	struct FNoceCharacterRecord OnSaveRecord();
	void OnSaveRecord_BP();
	float PlayHeadMontage(class UAnimMontage* MontageToPlay, bool StopAllMontages);
	void ProcessCharMeshType_BP(const struct FNoceCharMeshDataRow& InDataRow);
	void ResetDieCount();
	void Revive();
	void SetArmor(float InValue);
	void SetAutoAdjustWalkSpeed(bool Enable);
	void SetHeadTracking(bool bEnable);
	void SetHealth(float InValue);
	void SetHealthByRatio(float InRatio);
	void SetPushOffset(const struct FVector& InValue);
	void SetPushOffsetEnable(bool bEnable);
	void SetSpawner(class ANoceAISpawner* Spawner);
	void SetSpawnMontagePlayed(bool bPlayed);
	void SetSuicideDead(bool InValue);
	void SwitchToRunSpeed(bool Enable);
	void TryLoadRecord();
	bool UpdateCharMeshType(const class FName& InRowName, bool bForceUpdate);

	float GetAbilityLevel(ENoceAbilityInputID AbilityID) const;
	float GetArmor() const;
	float GetCharacterLevel() const;
	struct FGameplayTag GetCharacterTag() const;
	struct FGenericTeamId GetGenericTeamId() const;
	float GetHealth() const;
	float GetHealthRatio() const;
	int32 GetInitialAttributeLevel() const;
	float GetMaxArmor() const;
	float GetMaxHealth() const;
	class ANoceAISpawner* GetMySpawner() const;
	bool IsAlive() const;
	bool IsInLinkConstPosition() const;
	bool IsInLinking() const;
	bool IsInLinkMotion() const;
	bool IsInLinkMotionCoolDown() const;
	bool IsSpawnMontagePlayed() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCharacter")
	}
	static class ANoceCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceCharacter>();
	}
};
DUMPER7_ASSERTS_ANoceCharacter;

// Class GameNoce.NocePlayerCharacter
// 0x03B0 (0x10D0 - 0x0D20)
class ANocePlayerCharacter : public ANoceCharacter
{
public:
	class UNocePlayerBroochComponent*             PlayerBroochComponent;                             // 0x0D20(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNocePlayerKatanaComponent*             PlayerKatanaComponen;                              // 0x0D28(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNocePlayerShowHideComponent*           PlayerShowHideComponent;                           // 0x0D30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNocePlayerAnimInstance*                PlayerAnimInstance;                                // 0x0D38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNocePlayerPPAnimInstance*              PlayerPostAnimInstance;                            // 0x0D40(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceSanityComponent*                   NoceSanityComponent;                               // 0x0D48(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceAnimCancelComponent*               NoceAnimCancelComponent;                           // 0x0D50(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UATPCCameraComponent*                   MyATPCCamereComp;                                  // 0x0D58(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0D60(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANocePlayerController*                  NocePlayerController;                              // 0x0D68(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHasBegunPlayed;                                  // 0x0D70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InPossessed)> OnPossessed;                                    // 0x0D80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InUsing)>  OnInteracting;                                     // 0x0D90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnJustDodge;                                       // 0x0DA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputForbidWhenInStaminaTired;                   // 0x0DB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputForbidForSprint;                            // 0x0DC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName InWeaponName, class FName InStateName)> OnEnterAttackState; // 0x0DD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InUse)>    OnUseCapsuleShrink;                                // 0x0DE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UNoceGameplayTagDataAsset*              TagDataAsset;                                      // 0x0DF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNocePlayerAttributeSet*                PlayerAttributeSet;                                // 0x0DF8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLinkMotionComponent*               LinkMotionComponent;                               // 0x0E00(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENocePlayerType                               MyPlayerType;                                      // 0x0E08(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E09[0x7];                                      // 0x0E09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANoceWeapon*                            CurrentWeapon;                                     // 0x0E10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanShowNotebookHintInGimmick;                      // 0x0E18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E19[0x7];                                      // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InGimmickAnimationKeyList;                         // 0x0E20(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	ENoceInteractType                             CacheInteractType;                                 // 0x0E30(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceBattling;                                     // 0x0E31(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceRunningNoCostStamina;                         // 0x0E32(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ExternalShowPlayer;                                // 0x0E33(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          InteranlShowPlayer;                                // 0x0E34(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsForceOrientRotationToMovement;                   // 0x0E35(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E36[0x2];                                      // 0x0E36(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DefaultRotationRate;                               // 0x0E38(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               ControllerDesiredRotationRate;                     // 0x0E50(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ControllerDesiredRotationStates;                   // 0x0E68(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   ClawWeaponName;                                    // 0x0E88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_Claw;                                           // 0x0E90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_ClawG;                                          // 0x0E98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENoceClawAlterType, TSubclassOf<class UGameplayEffect>> ClawAlterTypeEffectMap;             // 0x0EA0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<ENoceClawAlterType, struct FGameplayTag> ClawAlterTypeTagMap;                               // 0x0EF0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayAbility>>   ShiromukuReviveAbilities;                          // 0x0F40(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                         EnemyInSightNumber;                                // 0x0F50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultEnemyInSightDistance;                       // 0x0F54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentEnemyInSightDistance;                       // 0x0F58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowHealthRatio;                                    // 0x0F5C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F60[0x38];                                     // 0x0F60(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ShiromukuRevive2Tokens;                            // 0x0F98(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(float InDelta)> OnSanityChanged;                                   // 0x0FA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Ratio)>   OnCurrentMaxSanityRatioChanged;                    // 0x0FB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsEnable)> OnForceRunningNoCostStamina;                       // 0x0FC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InIsClawG)> OnClawTransfomred;                                // 0x0FD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ANoceWeapon* NewWeapon)> OnWeaponChanged;                    // 0x0FE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InHitActor, float InDamage, bool InIsDead)> OnEnemyDamaged; // 0x0FF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InNumber)> OnEnemyInSightNumberChanged;                      // 0x1008(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1018[0x2];                                     // 0x1018(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseSeqData;                                       // 0x101A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSyncCineCharMeshTypeDataFromPlayer;               // 0x101B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_101C[0x4];                                     // 0x101C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPhysicsAsset>           HinaSkirtOverridePhAT;                             // 0x1020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                          DefaultHinaSkirtPhAT;                              // 0x1048(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1050[0x10];                                    // 0x1050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENocePlayerOutfit, class UDataTable*>    PlayerOutfitMap;                                   // 0x1060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_10B0[0x4];                                     // 0x10B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedSprintInputTime;                             // 0x10B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10B8[0x18];                                    // 0x10B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDeathType(ENoceDeathType InDeathType);
	void ApplyPlayerOutfit(ENocePlayerOutfit InPlayerOutfit);
	bool CanAccepInputActionAttack(bool InFromRealInput);
	bool CanAcceptInputActionBasic();
	bool CanAcceptInputActionDodge();
	bool CanAcceptInputActionInteract();
	bool CanAcceptInputByStaminaStatus(ENoceInputAction InInputAction);
	bool CanAcceptInputClawTransform();
	bool CanAcceptInputFocus();
	bool CanAcceptLinkMotionAttack();
	bool CanAutoCounter();
	bool CanShowInteractHint();
	bool CanUseJustDodgeCounter();
	bool CheckPlayerType(ENocePlayerType PlayerType);
	void ClearCachedSprintInput();
	void ClearHandleForceClawTransformTimer();
	void ClearShiromukuRevive(class FName InToken, int32 InValue);
	bool DuringUpperBodyMotion();
	bool DuringUseShortcutItemMotion();
	void EnableMaterialSlotsClaw_BP(bool InEnable);
	void EnableMaterialSlotsClawG_BP(bool InEnable);
	class AActor* FindCounterTarget_BP(bool InCounterHint, bool InFromRealInput);
	void ForceClawGToClaw();
	void ForceClawToClawG();
	ENoceInteractType GetCacheInteractionType();
	float GetClawTransform();
	bool GetComboCanBeAxeDefensed(class AActor* InTarget, class FName InComboName);
	bool GetComboCanBeKatanaDefensed(class AActor* InTarget, class FName InComboName);
	void GetComboCheckInfo(class AActor* InTarget, class FName InComboName, bool* OutCheckJustDodge, bool* OutCheckInvincible, bool* OutCheckOmamoriKagami);
	float GetCurrentMaxSanityRatio();
	float GetEnemyInSightDistance();
	int32 GetEnemyInSightNumber();
	bool GetHaveCachedSprintInput();
	bool GetHaveKatanaScabbard();
	bool GetHitAngleCanBeDefensed(float InHitAngle, float InHalfAngle);
	bool GetIsInEvent();
	bool GetIsInExamineMode();
	bool GetIsOnSlopeSkirtControl();
	bool GetIsUnpossessed();
	bool GetIsUsingGimmick();
	float GetLowHealthRatio();
	float GetMaxClawTransform();
	bool GetNeedCheckSuperArmor(class AActor* InTarget, class FName InComboName);
	float GetShiromukuReviveFrequency();
	float GetShiromukuReviveIntenisy();
	float GetWeaponBreakAttackRatio();
	void HandleClawTransform(bool InTransformToClawG);
	void HandleClawTransform_BP(bool InTransformToClawG);
	void HandleEnemyInSightNumberChanged(int32 InNumber);
	void HandleForceClawTransform(bool InToClawG);
	void HandleJustDodge(const struct FNoceAttackHitResult& InHitResult);
	void HandleJustDodge_BP(const struct FNoceAttackHitResult& InHitResult);
	void HandleOnEnemyDamaged(class AActor* InHitActor, float InDamage, bool InIsDead);
	void HandleOnHeightFogUpdate();
	void HandleRestartGame();
	void HandleWaitForLevelReady();
	void HandleWaitForLevelReady_BP();
	bool HasClawAlterType(ENoceClawAlterType InClawAlterType);
	bool HasPlayerBegunPlayer();
	bool HasPlayerController();
	bool HaveCounterTarget(bool InCounterHint);
	bool HaveCounterTargetBasic(bool InFromRealInput);
	bool InAttackStateMachine();
	bool InCounterState();
	bool InDamageState();
	bool InDeadState();
	bool InFocusAttack();
	bool InFocusCharged();
	bool InHeavyAttack();
	void InitHinaSkirtOverridePhATForPreview();
	bool InJustDodge();
	bool InRealBattleStatus();
	bool InRespawnState();
	bool InStaminaTired();
	bool IsBossFightMode();
	bool IsChangeWeapon();
	bool IsChaseMode();
	bool IsClaw();
	bool IsClawAttrackSoulState();
	bool IsClawG();
	bool IsClawGTransformToClaw();
	bool IsClawTransformFull();
	bool IsClawTransformState();
	bool IsCorruptionLink();
	bool IsCorruptionLinkExecution();
	bool IsCustomUpperBody();
	bool IsDamageLimitHealth();
	bool IsDamageTriggerJustDodge(const struct FNoceAttackHitResult& InHitResult);
	bool IsDamageTriggerJustDodge_BP(const struct FNoceAttackHitResult& InHitResult);
	bool IsDamageWinceToAdditive();
	bool IsDarkHinako();
	bool IsDodgeNoCostStamina();
	bool IsDuringStateTransition();
	bool IsEnemyInSight();
	bool IsEnemyLink();
	bool IsEnemyLinkExecution();
	bool IsForceBattling();
	bool IsForceRunningNoCostStamina();
	bool IsForceTransformToClaw();
	bool IsHellMode();
	bool IsHellModeDamage();
	bool IsInBattling();
	bool IsInDodge();
	bool IsInLinkExecution();
	bool IsInLocomotion();
	bool IsInLocomotionRun();
	bool IsInLowHealth();
	bool IsInRunning();
	bool IsInSafeZone();
	bool IsInteractForbit(bool InIsInstantFeedback);
	bool IsInteracting();
	bool IsJustDodgeCollisionEnabled();
	bool IsJustDodgeCollisionEnabled_BP();
	bool IsLockOnTarget();
	bool IsRagdolling();
	bool IsSanityHasAttackBuffAccumulateValue();
	bool IsSeeingEnemy();
	bool IsShortcutItemLeftKeyDown();
	bool IsShowShortcutItemUI();
	bool IsTargetCounterable(class AActor* InTargetActor, bool InCounterHint);
	bool IsTargetCounterableBasic(class AActor* InTargetActor);
	bool IsUnderShiromukuRevive2();
	bool IsUseShortcutItem();
	bool IsUsingFocus();
	bool IsWantToDoUpperBodyMotion();
	bool IsWeaponBreakForceKnockBack();
	bool IsWeaponBroken();
	void OnPlayerOutfitChanged(ENocePlayerOutfit InPlayerOutfit);
	void OnUpdateCharMeshTypeForCineChar(ENocePlayerType InPlayerType, class FName InCharMeshRowName);
	void OnWeaponChanged_BP(class ANoceWeapon* NewWeapon);
	void RecordCachedSprintInput();
	void ResetATPCCamera();
	void ResetHinaSkirtOverridePhATForPreview();
	void SetCacheInteractionType(ENoceInteractType InType);
	void SetCanShowNotebookHintInGimmick(bool CanShow);
	void SetClawTransform(float InValue);
	void SetControllerDesiredRotationRate(const struct FRotator& InValue);
	void SetCurrentMaxSanity(float InValue);
	void SetCurrentMaxSanityByRatio(float InRatio);
	void SetCurrentWeapon(class ANoceWeapon* InNewWeapon, float InCurrentDurability);
	void SetDebugSeqPlayer(class ULevelSequencePlayer* InPlayer);
	void SetDefaultRotationRate(const struct FRotator& InValue);
	void SetExamineMode(bool IsEnable);
	void SetForceBattling(bool IsEnable);
	void SetForceRunningNoCostStamina(bool IsEnable);
	void SetHaveKatanaScabbard(bool InValue);
	void SetInGimmickAnimationByKey(const class FString& InKey, bool IsInAnimation);
	void SetIsForceOrientRotationToMovement(bool InEnbale);
	void SetSanity(float InValue);
	void SetSanityByRatio(float InRatio);
	void SetStamina(float InValue);
	void SetUsingGimmick(bool IsUsing);
	void ShiromukuRevive(class FName InToken, int32 InValue, int32 PostProcessIndex, float Intensity, float Frequency);
	void ShowHidePlayer(bool InShow, bool InAdjustInput, bool InIsFromExternal);
	void ShowHidePlayer_BP(bool InShow, bool InAdjustInput);
	void UnEquipCurrentWeapon();
	void UpdateCharacterRotationMode(bool InPreSetupForLocomotion);
	void UpdateEyeLacrimalFluid();
	bool WantToDoUpperBodyMotion();
	int32 WantToDoUpperBodyMotionCount();

	float GetAttack() const;
	float GetBattleStatusTime() const;
	bool GetCanShowNotebookHintInGimmick() const;
	float GetCurrentMaxSanity() const;
	float GetEnemyBreakDownAttackRatio() const;
	float GetExtraAttack() const;
	float GetFocusAttackCurrentMaxSanityCostRatio() const;
	float GetFocusAttackRatioHealth() const;
	float GetFocusAttackRatioWince() const;
	float GetGutsDamageToHealthRatio() const;
	float GetHealthDamageRatio() const;
	bool GetIsInGimmickAnimation() const;
	float GetJustDodgeCounterDistance() const;
	float GetLowLowStaminaThreshold() const;
	float GetMaxSanity() const;
	float GetMaxStamina() const;
	float GetMinCurrentMaxSanity() const;
	float GetSanity() const;
	float GetSanityCostRatio() const;
	float GetSanityDamageRatio() const;
	float GetSanityNoChangeWaitForRecoverTime() const;
	float GetSanityRegenRatio() const;
	float GetSprintStaminaCostRatio() const;
	float GetStamina() const;
	float GetStaminaCostRatio() const;
	float GetStaminaDamageRatio() const;
	float GetStaminaTiredTime() const;
	float GetWeaponDurabilityCostRatio() const;
	float GetWince() const;
	bool HasTag(const struct FGameplayTag& TargetTag) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerCharacter")
	}
	static class ANocePlayerCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePlayerCharacter>();
	}
};
DUMPER7_ASSERTS_ANocePlayerCharacter;

// Class GameNoce.NoceAttackTraceComponent
// 0x0268 (0x0308 - 0x00A0)
class UNoceAttackTraceComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FNoceAttackHitResult>& HitResults)> OnHit;     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FNoceAttackDeflectResult& DeflectResult)> OnDeflect;  // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FNoceAttackHitResult>& HitResults)> OnGrappleHit; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAttackTraceInfo>    AttackTraceInfoMap;                                // 0x00D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   JustDodgeTag;                                      // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SkipAttackTraceTag;                                // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      EnvironmentObjectTypes;                            // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	ETraceTypeQuery                               ECollisionQueryChannel;                            // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NonDeflectCollisionPresets;                        // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<EPhysicalSurface>                      SkipPhysicalSurfaceTypes;                          // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         EnvironmentHeightCheck;                            // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceCheatManager*                      CheatManager;                                      // 0x0180(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACharacter*                             OwnerCharacter;                                    // 0x0188(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   OwnerPlayerCharacter;                              // 0x0190(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNocePlayerAttackInfoComponent*         PlayerAttackInfoComponent;                         // 0x0198(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceEnemyAttackInfoComponent*          EnemyAttackInfoComponent;                          // 0x01A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A8[0x150];                                    // 0x01A8(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DefaultActorsToIgnore;                             // 0x02F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void DoTraceByAttackID(int32 InAttackID, class FName InComboName, class FName InAttackTraceName, const struct FVector& InStartLocation, const struct FRotator& InStartRotation, const struct FVector& InEndLocation, const struct FRotator& InEndRotation, float InRadiusRatio);
	void EndTraceByAttackID(int32 AttackID);
	bool GetIsEnable();
	void SetIsDuringAttack(bool InValue);
	void SetIsEnable(bool InVale);
	void StartTraceByAttackID(int32 AttackID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAttackTraceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAttackTraceComponent")
	}
	static class UNoceAttackTraceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAttackTraceComponent>();
	}
};
DUMPER7_ASSERTS_UNoceAttackTraceComponent;

// Class GameNoce.NoceShowByProgressComponent
// 0x0008 (0x0138 - 0x0130)
class UNoceShowByProgressComponent final : public UNoceShowByProgressBaseComponent
{
public:
	bool                                          AffectCollision;                                   // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PropagateToAttachedActors;                         // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceShowByProgressComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceShowByProgressComponent")
	}
	static class UNoceShowByProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceShowByProgressComponent>();
	}
};
DUMPER7_ASSERTS_UNoceShowByProgressComponent;

// Class GameNoce.NoceAutomationSubsystem
// 0x0020 (0x0050 - 0x0030)
class UNoceAutomationSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAutomationSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAutomationSubsystem")
	}
	static class UNoceAutomationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAutomationSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceAutomationSubsystem;

// Class GameNoce.NoceAutoSaveIconWidget
// 0x0010 (0x0378 - 0x0368)
class UNoceAutoSaveIconWidget : public UNoceAnimWidget
{
public:
	float                                         MinDisplayTime;                                    // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentDisplayTime;                                // 0x036C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NeedHide;                                          // 0x0370(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceAutoSaveIconWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceAutoSaveIconWidget")
	}
	static class UNoceAutoSaveIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceAutoSaveIconWidget>();
	}
};
DUMPER7_ASSERTS_UNoceAutoSaveIconWidget;

// Class GameNoce.NoceSetMaterialByProgressComp
// 0x0028 (0x0158 - 0x0130)
class UNoceSetMaterialByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	class UMaterialInterface*                     AlternativeMaterial;                               // 0x0130(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetMaterialIndex;                               // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     OriginalMaterial;                                  // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentTag;                                // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetMaterialByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetMaterialByProgressComp")
	}
	static class UNoceSetMaterialByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetMaterialByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceSetMaterialByProgressComp;

// Class GameNoce.NoceBackgroundWidget
// 0x0018 (0x02F8 - 0x02E0)
class UNoceBackgroundWidget : public UUserWidget
{
public:
	bool                                          ShowDust;                                          // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystemWidget*                   Niagara_Dust;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Loop;                                              // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBackgroundWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBackgroundWidget")
	}
	static class UNoceBackgroundWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBackgroundWidget>();
	}
};
DUMPER7_ASSERTS_UNoceBackgroundWidget;

// Class GameNoce.NoceTerritoryVolume
// 0x0000 (0x02C8 - 0x02C8)
class ANoceTerritoryVolume final : public AVolume
{
public:
	bool IsInVolume(const struct FVector& CheckLocation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTerritoryVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTerritoryVolume")
	}
	static class ANoceTerritoryVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceTerritoryVolume>();
	}
};
DUMPER7_ASSERTS_ANoceTerritoryVolume;

// Class GameNoce.NoceBasePlayerController
// 0x0018 (0x0870 - 0x0858)
class ANoceBasePlayerController : public APlayerController
{
public:
	uint8                                         Pad_858[0xC];                                      // 0x0858(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraDelayBeforeReady;                             // 0x0864(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_868[0x8];                                      // 0x0868(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsPlayerReady();
	void OnSettingChanged(class UNoceSystemSaveGame* SystemSave);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBasePlayerController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBasePlayerController")
	}
	static class ANoceBasePlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceBasePlayerController>();
	}
};
DUMPER7_ASSERTS_ANoceBasePlayerController;

// Class GameNoce.NoceBattleDialogComponent
// 0x0008 (0x00A8 - 0x00A0)
class UNoceBattleDialogComponent : public UActorComponent
{
public:
	class UNoceBattleDialogDataAsset*             DialogDataAsset;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);
	bool RequestDialog(class FName DialogRowName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBattleDialogComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBattleDialogComponent")
	}
	static class UNoceBattleDialogComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBattleDialogComponent>();
	}
};
DUMPER7_ASSERTS_UNoceBattleDialogComponent;

// Class GameNoce.NoceBattleDialogDataAsset
// 0x0110 (0x0140 - 0x0030)
class UNoceBattleDialogDataAsset final : public UDataAsset
{
public:
	class UDataTable*                             DialogTable;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FBattleDialogLineSetting> ProgressTagSettings;                  // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FBattleDialogHealthSetting>     HealthSettings;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ENoceWinceType, struct FBattleDialogDamageSetting> HitReactionSettings;                     // 0x0098(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class UAnimMontage*, struct FBattleDialogDamageSetting> DamagedInMontageSettings;           // 0x00E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FBattleDialogLineSetting               PlayerDeathDialog;                                 // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBattleDialogDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBattleDialogDataAsset")
	}
	static class UNoceBattleDialogDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBattleDialogDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceBattleDialogDataAsset;

// Class GameNoce.NoceSetting_Language
// 0x0010 (0x0148 - 0x0138)
class UNoceSetting_Language final : public UGameSettingValueDiscrete
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetting_Language")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetting_Language")
	}
	static class UNoceSetting_Language* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetting_Language>();
	}
};
DUMPER7_ASSERTS_UNoceSetting_Language;

// Class GameNoce.NoceBattlePositionSubsystem
// 0x0048 (0x0090 - 0x0048)
class UNoceBattlePositionSubsystem : public UNoceTickableWorldSubsystem
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DebugInfo;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackRightTweak;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         IsLockedTargetScore;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         IsRenderedScore;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            DistanceScoreTable;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInEvent;                                         // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AnyFading;                                         // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceOperating;                                    // 0x006A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsEnemyCountEnough;                                // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FlagAttackRight;                                   // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceAISystem*                          CacheAISystem;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFadeSubsystem*                     CacheFadeSystem;                                   // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANoceGameMode*                          CacheGameMode;                                     // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnabledRecord;                                     // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDistanceScore(float Distance);
	float GetDistanceScoreByLocation(const struct FVector& v1, struct FVector* v2);
	bool IsSystemEnabled();
	bool IsSystemOperating();
	void OnPlayerEnterEvent();
	void OnPlayerExitEvent();
	void OnSystemEnabledChanged(bool NewValue);
	void SetDevForceOperating(bool InValue);
	void SetSystemEnabled(bool InValue, bool IsForce);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBattlePositionSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBattlePositionSubsystem")
	}
	static class UNoceBattlePositionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBattlePositionSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceBattlePositionSubsystem;

// Class GameNoce.NoceSubtitleSection
// 0x0020 (0x0110 - 0x00F0)
class UNoceSubtitleSection final : public UMovieSceneSection
{
public:
	struct FNoceSubtitleSectionParams             Params_0;                                          // 0x00F0(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSubtitleSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSubtitleSection")
	}
	static class UNoceSubtitleSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSubtitleSection>();
	}
};
DUMPER7_ASSERTS_UNoceSubtitleSection;

// Class GameNoce.NoceBinkSubsystem
// 0x0000 (0x0038 - 0x0038)
class UNoceBinkSubsystem : public UNoceWorldSubsystem
{
public:
	void PreloadBinkVideo_BP(const struct FNoceBinkPreloadData& InData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBinkSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBinkSubsystem")
	}
	static class UNoceBinkSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBinkSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceBinkSubsystem;

// Class GameNoce.NoceBodyPartGroup
// 0x0050 (0x0080 - 0x0030)
class UNoceBodyPartGroup final : public UDataAsset
{
public:
	TMap<class FName, struct FBodyPartGroup>      BodyPartGroupMap;                                  // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBodyPartGroup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBodyPartGroup")
	}
	static class UNoceBodyPartGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBodyPartGroup>();
	}
};
DUMPER7_ASSERTS_UNoceBodyPartGroup;

// Class GameNoce.NoceBodyPartGroupAttributeSet
// 0x0020 (0x0050 - 0x0030)
class UNoceBodyPartGroupAttributeSet final : public UNoceAttributeSet
{
public:
	struct FGameplayAttributeData                 Health;                                            // 0x0030(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxHealth;                                         // 0x0040(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBodyPartGroupAttributeSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBodyPartGroupAttributeSet")
	}
	static class UNoceBodyPartGroupAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBodyPartGroupAttributeSet>();
	}
};
DUMPER7_ASSERTS_UNoceBodyPartGroupAttributeSet;

// Class GameNoce.NoceShortcutItemWidget
// 0x0000 (0x0368 - 0x0368)
class UNoceShortcutItemWidget final : public UNoceAnimWidget
{
public:
	bool DirectUse();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceShortcutItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceShortcutItemWidget")
	}
	static class UNoceShortcutItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceShortcutItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceShortcutItemWidget;

// Class GameNoce.NoceBodyPartGroupComponent
// 0x00F8 (0x0198 - 0x00A0)
class UNoceBodyPartGroupComponent final : public UActorComponent
{
public:
	class UNoceBoneNameBodyPartMapping*           BoneNameToBodyPartMapping;                         // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceBodyPartGroup*                     BodyPartGroup;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           ActiveBodyPartGroups;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_BodyPartGroupHealthCostSetByCaller;             // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_BodyPartGroupHealthSetByCaller;                // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& Content)> OnActiveBodyPartGroupChanged;       // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnBodyPartValueChangedEvent;                       // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class ACharacter*                             OwnerCharacter;                                    // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class ANoceBodyPartGroupHealth*> BodyPartGroupHealthMap;                       // 0x00F8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, float>                      BodyPartRecord;                                    // 0x0148(0x0050)(SaveGame, NativeAccessSpecifierPublic)

public:
	void AddActiveGroups(const TArray<class FName>& InGroupNames);
	void CostBodyPartGroupHealth(bool DebugLog, class FName InBodyPartGroupName, float InValue, bool InIsLimitHealth, bool* OutIsBreak, bool* OutIsDamageToHealth);
	class FString GetActiveGroupsString();
	void PrintActiveGroups();
	void RemoveActiveGroups(const TArray<class FName>& InGroupNames);
	void RemoveAllActiveGroups();
	void ResetBodyPartGroupHealthToMax(class FName InBodyPartGroupName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBodyPartGroupComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBodyPartGroupComponent")
	}
	static class UNoceBodyPartGroupComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBodyPartGroupComponent>();
	}
};
DUMPER7_ASSERTS_UNoceBodyPartGroupComponent;

// Class GameNoce.NoceReplaceWeaponWidget
// 0x0088 (0x0508 - 0x0480)
class UNoceReplaceWeaponWidget : public UNoceReplaceWidget
{
public:
	TMulticastInlineDelegate<void(bool IsSuccess, bool IsEquippedWeapon, class FName ID)> OnReplaceEnd; // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UNoceWepShortcutItemWidget*             WBP_WepShortcut_Item_0;                            // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWepShortcutItemWidget*             WBP_WepShortcut_Item_1;                            // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWepShortcutItemWidget*             WBP_WepShortcut_Item_2;                            // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Weapon;                                            // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Weapon_Mat;                                        // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWepDurabilityWidget*               WBP_WepShortcut_Durability;                        // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     WeaponMaterial;                                    // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceHorizontalList*                    List;                                              // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WeaponID;                                          // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EquippedIndex;                                     // 0x04D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNoceWepShortcutItemWidget*>     AllWeaponChilds;                                   // 0x04E0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceInventoryWeapon>           Weapons;                                           // 0x04F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WeaponDynamicMaterial;                             // 0x0500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRefreshSelection(int32 Index_0);
	void ShowWeapon(class FName ID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceReplaceWeaponWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceReplaceWeaponWidget")
	}
	static class UNoceReplaceWeaponWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceReplaceWeaponWidget>();
	}
};
DUMPER7_ASSERTS_UNoceReplaceWeaponWidget;

// Class GameNoce.NoceBoneNameBodyPartMapping
// 0x0050 (0x0080 - 0x0030)
class UNoceBoneNameBodyPartMapping final : public UDataAsset
{
public:
	TMap<class FName, struct FBodyPartData>       BoneNameBodyPartMap;                               // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceBoneNameBodyPartMapping")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceBoneNameBodyPartMapping")
	}
	static class UNoceBoneNameBodyPartMapping* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceBoneNameBodyPartMapping>();
	}
};
DUMPER7_ASSERTS_UNoceBoneNameBodyPartMapping;

// Class GameNoce.NoceCameraArmComponent
// 0x0020 (0x0350 - 0x0330)
class UNoceCameraArmComponent final : public USpringArmComponent
{
public:
	ENoceSpringArmType                            CollisionHandleType;                               // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WalkIteration;                                     // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CornerCheckSize;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDebugInfo;                                     // 0x033C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33D[0x13];                                     // 0x033D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCameraArmComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCameraArmComponent")
	}
	static class UNoceCameraArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCameraArmComponent>();
	}
};
DUMPER7_ASSERTS_UNoceCameraArmComponent;

// Class GameNoce.NoceSkyDomeVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceSkyDomeVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSkyDomeDataRowHandle              SkyDomeDataRow;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceSkyDomeProgress>           SkyDomeDataByProgress;                             // 0x00E0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSkyDomeVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSkyDomeVolumeComponent")
	}
	static class UNoceSkyDomeVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSkyDomeVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSkyDomeVolumeComponent;

// Class GameNoce.NoceCharacterAttachmentComponent
// 0x0000 (0x00B8 - 0x00B8)
class UNoceCharacterAttachmentComponent final : public UNoceAttachmentBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCharacterAttachmentComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCharacterAttachmentComponent")
	}
	static class UNoceCharacterAttachmentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCharacterAttachmentComponent>();
	}
};
DUMPER7_ASSERTS_UNoceCharacterAttachmentComponent;

// Class GameNoce.NoceTableRowHandleLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceTableRowHandleLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UDataTable* GetChapterJumpDataTable();
	static class UDataTable* GetConsumableDataTable();
	static class UDataTable* GetDarknessDataTable();
	static class UDataTable* GetDirLightDataTable();
	static class UDataTable* GetFogNiagaraTable();
	static class UDataTable* GetHeightFogDataTable();
	static class UDataTable* GetHinaCharMeshTypeDataTable();
	static class UDataTable* GetInputActionToKeyDataTable();
	static class UDataTable* GetKeyItemDataTable();
	static class UDataTable* GetKeyItemEmaDataTable();
	static class UDataTable* GetLanternNiagaraTable();
	static class UDataTable* GetLetterDataTable();
	static class UDataTable* GetLetterGroupDataTable();
	static class UDataTable* GetLocationDataTable();
	static class UDataTable* GetLumenTranslucencyTable();
	static class UDataTable* GetNotebookCharacterContentDataTable();
	static class UDataTable* GetNotebookCharacterNameDataTable();
	static class UDataTable* GetNotebookEnemyContentDataTable();
	static class UDataTable* GetNotebookEnemyNameDataTable();
	static class UDataTable* GetNotebookInfoContentDataTable();
	static class UDataTable* GetNotebookInfoNameDataTable();
	static class UDataTable* GetNotebookPuzzleContentDataTable();
	static class UDataTable* GetNotebookPuzzleNameDataTable();
	static class UDataTable* GetNotebookTutorialContentDataTable();
	static class UDataTable* GetNotebookTutorialNameDataTable();
	static class UDataTable* GetOmamoriDataTable();
	static class UDataTable* GetPickupsDeploymentDataTable();
	static class UDataTable* GetSkyAtmosphereDataTable();
	static class UDataTable* GetSkyDomeDataTable();
	static class UDataTable* GetSkyLightDataTable();
	static class UDataTable* GetSSFSDataTable();
	static class UDataTable* GetSweetLightDataTable();
	static class UDataTable* GetTutorialDataTable();
	static class UDataTable* GetVolumetricsFogDataTable();
	static class UDataTable* GetWeaponDataTable();
	static class UDataTable* GetWindDataTable();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTableRowHandleLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTableRowHandleLibrary")
	}
	static class UNoceTableRowHandleLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTableRowHandleLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceTableRowHandleLibrary;

// Class GameNoce.NoceWepShortcutItemWidget
// 0x0000 (0x0378 - 0x0378)
class UNoceWepShortcutItemWidget : public UNoceSelectItemWidget
{
public:
	void SetWeapon(class FName ID, float InDurability);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWepShortcutItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWepShortcutItemWidget")
	}
	static class UNoceWepShortcutItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWepShortcutItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceWepShortcutItemWidget;

// Class GameNoce.NoceCheatActivityExtension
// 0x0080 (0x0168 - 0x00E8)
class UNoceCheatActivityExtension final : public UNeoCheatManagerExtension
{
public:
	int32                                         LastChapterIndex;                                  // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastActivityIDIndex;                               // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           ChapterNames;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           ChapterTags;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceActivityIDList>            AllChapterActivityIDs;                             // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LastActivityOutcomeIndex;                          // 0x0120(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           EndActivityOutcomes;                               // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LastAvailabilityIndex;                             // 0x0138(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Availabilities;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LastResumeActionIndex;                             // 0x0150(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ResumeActions;                                     // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void Debug_CancelAndHideActivity();
	void Debug_CompleteAndHideActivity();
	void Debug_EndActivity();
	void Debug_HideAllActivities();
	void Debug_ResetAllActivities();
	void Debug_ResumeActivity();
	void Debug_SetActivityAvailabilityChange();
	void Debug_SetUpdateProgressType(int32 InType);
	void Debug_ShowActivityDebugInfo(bool IsShow);
	void Debug_StartActivity();
	void Debug_StartAndShowActivity();
	void Debug_TrimActivityLog();
	void Debug_UpdateActivitiesByCurrentProgress();
	TArray<class FText> GetActivityAvailibities(int32 Index_0);
	TArray<class FText> GetActivityIDs(int32 Index_0);
	TArray<class FText> GetActivityOutcomes(int32 Index_0);
	TArray<class FText> GetChapters(int32 Index_0);
	TArray<class FText> GetResumeActions(int32 Index_0);
	void OnCancelAndHideActivityWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnCompleteAndHideActivityWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnEndActivityWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnResumeActivityWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnSetActivityAvailabilityChangeWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnStartActivityWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnStartAndShowActivityWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatActivityExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatActivityExtension")
	}
	static class UNoceCheatActivityExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatActivityExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatActivityExtension;

// Class GameNoce.NoceCheatAudioExtension
// 0x0010 (0x00F8 - 0x00E8)
class UNoceCheatAudioExtension final : public UNeoCheatManagerExtension
{
public:
	TArray<class FText>                           CurrentDrawPostedEventSettings;                    // 0x00E8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void DrawEnvImpactSound(bool Show);
	void DrawEventDistance(bool Show);
	void DrawEventPosition(bool Show);
	void DrawEventSphere(bool Show);
	void DrawListener(bool Show);
	void DrawPostedEvents(bool Show);
	void HideInvalidStateValue(bool Hide);
	void ShowStateMonitor(bool Show);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatAudioExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatAudioExtension")
	}
	static class UNoceCheatAudioExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatAudioExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatAudioExtension;

// Class GameNoce.NoceCheatChunkExtension
// 0x0040 (0x0128 - 0x00E8)
class UNoceCheatChunkExtension final : public UNeoCheatManagerExtension
{
public:
	int32                                         LastRowNameIndex;                                  // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastTypeIndex;                                     // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastActionIndex;                                   // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ChunkRowNames;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           ChunkTypeNames;                                    // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           ChunkActionNames;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void CheckByRowNameAndType();
	void CheckChunkAndDLC();
	void Debug_IsShowDebugDataInfo(bool InIsShow);
	void Debug_Login();
	void Debug_Logout();
	void Debug_SetUsingDebugData(bool InIsEnable);
	void Debug_StartQueryDLC();
	void Debug_StopQueryDLC();
	void Debug_UpdateDebugChunkData();
	TArray<class FText> GetChunkActionNames(int32 Index_0);
	TArray<class FText> GetChunkRowNames(int32 Index_0);
	TArray<class FText> GetChunkTypeNames(int32 Index_0);
	void OnCheckByRowNameAndTypeWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnCheckChunkAndDLCWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnUpdateDebugChunkDataWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatChunkExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatChunkExtension")
	}
	static class UNoceCheatChunkExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatChunkExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatChunkExtension;

// Class GameNoce.NoceCheatGeneralTextWidget
// 0x0008 (0x02E8 - 0x02E0)
class UNoceCheatGeneralTextWidget final : public UUserWidget
{
public:
	class UNoceRichTextBlock*                     RichTextBlock;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatGeneralTextWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatGeneralTextWidget")
	}
	static class UNoceCheatGeneralTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatGeneralTextWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCheatGeneralTextWidget;

// Class GameNoce.NoceWorldTriggerRequest
// 0x0058 (0x0080 - 0x0028)
class UNoceWorldTriggerRequest final : public UObject
{
public:
	class FString                                 DataLayerName;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        DataLayerAsset;                                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerInstance*                     DataLayerInstance;                                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnloadedTriggerNames;                              // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LoadedTriggerNames;                                // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivateTriggerNames;                              // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        ProgressRuntimeState;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        DefaultRuntimeState;                               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        CurrentRuntimeState;                               // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWorldTriggerRequest")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWorldTriggerRequest")
	}
	static class UNoceWorldTriggerRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWorldTriggerRequest>();
	}
};
DUMPER7_ASSERTS_UNoceWorldTriggerRequest;

// Class GameNoce.NoceCheatInventoryExtension
// 0x0088 (0x0170 - 0x00E8)
class UNoceCheatInventoryExtension final : public UNeoCheatManagerExtension
{
public:
	int32                                         LastCategoryIndex;                                 // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastPickupIndex;                                   // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ItemType;                                          // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ItemNames;                                         // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         LastWeaponIndex;                                   // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastConsumableIndex;                               // 0x010C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastKeyItemIndex;                                  // 0x0110(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastOmamoriIndex;                                  // 0x0114(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastNotebookIndex;                                 // 0x0118(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastNotebookSubCategoryIndex;                      // 0x011C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastNotebookIDIndex;                               // 0x0120(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastLetterGroupIndex;                              // 0x0124(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastLetterIndex;                                   // 0x0128(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           NotebookCategories;                                // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   CurrentSubCategory;                                // 0x0140(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           CurrentNotebookNames;                              // 0x0148(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class FName                                   CurrentLetterGroup;                                // 0x0158(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           CurrentLetterNames;                                // 0x0160(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void Debug_AddAllClawAlter();
	void Debug_AddAllConsumables();
	void Debug_AddAllKeyItem();
	void Debug_AddAllLetter();
	void Debug_AddAllNotebook();
	void Debug_AddAllOmamoris();
	void Debug_AddAllWeapons();
	void Debug_AddAllWeaponsCore(bool AddMainWeapon);
	void Debug_AddConsumableItem();
	void Debug_AddConsumableItemByID(class FName ID, int32 Quantity);
	void Debug_AddFaithValue(int32 Delta);
	void Debug_AddKeyItem();
	void Debug_AddLetter();
	void Debug_AddNotebookID();
	void Debug_AddOmamori();
	void Debug_AddShortcutConsumable(int32 InIndex, int32 InAddQuantity);
	void Debug_AddWeapon();
	void Debug_ClearErrorHint();
	void Debug_PrintEma();
	void Debug_RemoveKeyItem();
	void Debug_RemoveOmamori();
	void Debug_ReplaceShortcutConsumables(int32 InConsumablePageIndex, int32 InAddQuantity);
	void Debug_ResetAttributeUpgradeLevels();
	void Debug_ResetDarkWeaponInventory();
	void Debug_ResetFogWeaponInventory();
	void Debug_ResetInventory();
	void Debug_ResetWeaponInventory();
	void Debug_SetConsumableSlotNum(int32 InNewNum);
	void Debug_SetOmamoriSlotNum(int32 InNewNum);
	void Debug_SpawnPickup();
	TArray<class FText> GetPickupCategories(int32 Index_0);
	TArray<class FText> GetPickupsInCategory(int32 Index_0);
	void OnAddItemWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnAddLetterWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnAddNotebookIDWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnRemoveItemWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void OnSpawnPickupWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	bool OnSpawnPickupWindowDecided_BP(const struct FNeoCheatPopWindowOutputParam& Result);
	void SetupChapterJumpSetting(const struct FNoceChapterJumpSettingTableRow& InData, bool InReset);
	void SetupChapterJumpSettingByRowName(const class FName RowName, bool InReset);
	bool SetupChapterJumpSettingByTag(const struct FGameplayTag& InTag, bool InReset, ENoceRoundType round);
	void SetupChapterJumpSettingForStory(const struct FGameplayTag& InTag, bool InReset, ENoceRoundType round);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatInventoryExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatInventoryExtension")
	}
	static class UNoceCheatInventoryExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatInventoryExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatInventoryExtension;

// Class GameNoce.NoceTimeManager
// 0x0070 (0x0300 - 0x0290)
class ANoceTimeManager final : public AActor
{
public:
	uint8                                         Pad_290[0x70];                                     // 0x0290(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyGlobalTimeDilation(float InTimeDilation, float InDuration);
	void ApplyTimeDilation(ENoceTimeEffectType InType, float InTimeDilation);
	void OnExitNotebook();
	void OnGlobalTimerUp();
	void OnOpenNotebook();
	void OnPlayerEnterEvent();
	void RemoveTimeDilation(ENoceTimeEffectType InType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTimeManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTimeManager")
	}
	static class ANoceTimeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceTimeManager>();
	}
};
DUMPER7_ASSERTS_ANoceTimeManager;

// Class GameNoce.PauseListObject
// 0x0040 (0x0068 - 0x0028)
class UPauseListObject final : public UObject
{
public:
	class FText                                   NameText;                                          // 0x0028(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0038(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               Sound;                                             // 0x0048(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsDisable;                                         // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PauseListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PauseListObject")
	}
	static class UPauseListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPauseListObject>();
	}
};
DUMPER7_ASSERTS_UPauseListObject;

// Class GameNoce.NoceCheatTitleLevelExtension
// 0x0088 (0x0170 - 0x00E8)
class UNoceCheatTitleLevelExtension final : public UNeoCheatManagerExtension
{
public:
	int32                                         LastLevelIndex;                                    // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastLevelTagIndex;                                 // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           ChapterNames;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ProgressRootTag;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   AllTeleportTags;                                   // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   AllProgressTags;                                   // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              CutSceneMultiRoundDT;                              // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   AllCutSceneProgressTags;                           // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           AllCutSceneNames;                                  // 0x0160(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void Debug_DeleteAllAutoSave();
	void Debug_DeleteAllGameSave();
	void Debug_DeleteAllMaunalSave();
	void Debug_DeleteSlot(int32 SlotIndex);
	void Debug_DeleteSystemSave();
	void Debug_JumpLevel();
	void Debug_NewGameActionLevel(int32 InLevel);
	void Debug_NewGameClearUFO(int32 InValue);
	void Debug_NewGameRiddleLevel(int32 InLevel);
	void Debug_NewGameSimulateEnding(int32 InEndingType);
	void Debug_NewGameSimulateRound(int32 InRound);
	void Debug_PlayerOutfit(int32 InType);
	void Debug_SetEndingCleared(int32 InEndingType);
	void Debug_SetEndingNotCleared(int32 InEndingType);
	void Debug_SetLastEndingType(int32 InEndingType);
	void Debug_SetTitleCorruptLevel(int32 InLevel);
	void Debug_ToggleStorageInfo();
	TArray<struct FGameplayTag> GetAllProgressTags();
	TArray<class FText> GetAllProgressTagsAndNames();
	TArray<class FText> GetAllTeleportTagsAndNames();
	TArray<class FText> GetLevels(int32 Index_0);
	TArray<class FText> GetLevelTags(int32 Index_0);
	bool JumpLevel();
	void OnJumpLevelWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);
	void UpdateCutSceneNamesAndProgressTags();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatTitleLevelExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatTitleLevelExtension")
	}
	static class UNoceCheatTitleLevelExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatTitleLevelExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatTitleLevelExtension;

// Class GameNoce.NoceCheatUIExtension
// 0x0018 (0x0100 - 0x00E8)
class UNoceCheatUIExtension final : public UNeoCheatManagerExtension
{
public:
	int32                                         LastMissionIndex;                                  // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           MissionTexts;                                      // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void Debug_AutoSwitchInputIcon(bool InEnable);
	void Debug_EnableSavePointFixWeapon(bool InEnable);
	void Debug_EnableSavePointOffering(bool InEnable);
	void Debug_EnableSavePointUpgrade(bool InEnable);
	void Debug_HideCredit();
	void Debug_TestQuestUI();
	void OnTestQuestWindowDecided(const struct FNeoCheatPopWindowOutputParam& Result);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheatUIExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheatUIExtension")
	}
	static class UNoceCheatUIExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheatUIExtension>();
	}
};
DUMPER7_ASSERTS_UNoceCheatUIExtension;

// Class GameNoce.PlayerHealthExecutionCalculation
// 0x0000 (0x0040 - 0x0040)
class UPlayerHealthExecutionCalculation final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerHealthExecutionCalculation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerHealthExecutionCalculation")
	}
	static class UPlayerHealthExecutionCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerHealthExecutionCalculation>();
	}
};
DUMPER7_ASSERTS_UPlayerHealthExecutionCalculation;

// Class GameNoce.NoceCheckCameraByProgressComp
// 0x0010 (0x0140 - 0x0130)
class UNoceCheckCameraByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	class APostProcessVolume*                     OwnerVolume;                                       // 0x0130(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCheckCameraByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCheckCameraByProgressComp")
	}
	static class UNoceCheckCameraByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCheckCameraByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceCheckCameraByProgressComp;

// Class GameNoce.NoceTutorialSubsystem
// 0x0038 (0x0070 - 0x0038)
class UNoceTutorialSubsystem final : public UNoceWorldSubsystem
{
public:
	TArray<bool>                                  ClearFlagArray;                                    // 0x0038(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  InProgressArray;                                   // 0x0048(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANoceTutorialInstructor*>        InstructorArray;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void CompleteAllTutorial();
	void EndTutorial(ENoceTutorialType TutorialType);
	void EndTutorialByName(class FName TutorialName);
	void EndTutorialByRowHandle(const struct FNoceTutorialDataRowHandle& RowHandle);
	void InitializeData();
	bool IsClearAll();
	bool IsCleared(ENoceTutorialType TutorialType);
	bool IsInProgress(ENoceTutorialType TutorialType);
	void StartTutorial(ENoceTutorialType TutorialType);
	void StartTutorialByName(class FName TutorialName);
	void StartTutorialByRowHandle(const struct FNoceTutorialDataRowHandle& RowHandle);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTutorialSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTutorialSubsystem")
	}
	static class UNoceTutorialSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTutorialSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceTutorialSubsystem;

// Class GameNoce.NoceTileView
// 0x0060 (0x0D00 - 0x0CA0)
class UNoceTileView final : public UTileView
{
public:
	TMulticastInlineDelegate<void(int32 Index)>   MouseDownEvent;                                    // 0x0C98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   MouseEnterEvent;                                   // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   RefreshSelection;                                  // 0x0CB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ENoceUIScrollBarVisibility                    ScrollbarVisibility;                               // 0x0CC8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0CC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanPageUpDown;                                     // 0x0CCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCB[0x5];                                      // 0x0CCB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TileSpacing;                                       // 0x0CD0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x0CE0(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               MouseHoverSound;                                   // 0x0CE8(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableMouseInput;                                  // 0x0CF0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CF1[0xF];                                      // 0x0CF1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUserWidget* BP_GetEntryWidgetFromItem(const class UObject* Item);
	class UObject* BP_ItemFromEntryWidget(class UUserWidget* EntryWidget);
	void BP_UpdateScrollbarVisibility();
	void DisableInputs();
	void EnableInputs();
	int32 GetSelectingIndex();
	bool IsUserScrolling();
	void PlaySound(const struct FNeoAudioTriggerIdHandle& TriggerId);
	void SetSound(const struct FNeoAudioTriggerIdHandle& InSelectSound, const struct FNeoAudioTriggerIdHandle& InMouseHoverSound);
	bool UpdateInput(const struct FInputEvent& InputEvent, const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTileView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTileView")
	}
	static class UNoceTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTileView>();
	}
};
DUMPER7_ASSERTS_UNoceTileView;

// Class GameNoce.NoceChooserWidget
// 0x0030 (0x03A8 - 0x0378)
class UNoceChooserWidget final : public UNoceSelectItemWidget
{
public:
	TMulticastInlineDelegate<void()>              RefreshSelection;                                  // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNoceChooserArrowWidget*                ArrowLeft;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceChooserArrowWidget*                ArrowRight;                                        // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlock;                                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void BP_UpdateSelectionIndex(bool IsLeft, bool* NoUse);
	class FText GetText();
	void OnMouseDownLeftArrow();
	void OnMouseDownRightArrow();
	void RefreshText();
	void SetSetting(class UObject* InSetting, bool* NoUse);
	void UpdateInput(bool IsLeft);
	void UpdateIsDisable();
	void UpdateSelectionIndex(bool IsLeft);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceChooserWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceChooserWidget")
	}
	static class UNoceChooserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceChooserWidget>();
	}
};
DUMPER7_ASSERTS_UNoceChooserWidget;

// Class GameNoce.NoceCineCharInterface
// 0x0000 (0x0000 - 0x0000)
class INoceCineCharInterface final
{
public:
	void DisableClothingWeightWhenSeqStart();
	void DisablePropertyForCineChar(bool* NoUse);
	void EnablePropertyForCineChar(const class UNoceCinematicActorComponent* inCineComponent);
	void ResetClothingWeightWhenSeqStart();
	void ResetWeaponStateForGameplay();
	void SetClearCineActorMeshTransform(bool bEnable);
	void SetEnableLastCamBlendStart(bool bEnable);
	void SetPreSeamlessTrigger(class AActor* InTrigger);
	void ShowWeaponForCinematic(bool bShow);
	void UpdateHinaMeshTypeByCurrentSeqData();
	void UpdateWhenSequenceStartForReBindingChar(class AActor* SequenceActor);
	void UpdateWhenSequenceStopForReBindingChar(class AActor* SequenceActor);

	struct FGameplayTag GetCharacterTag() const;
	bool GetEnableLastCamBlendStart() const;
	class AActor* GetPreSeamlessTrigger() const;
	bool IsCineChar(bool* NoUse) const;
	bool IsInCinematic() const;
	bool IsUseSeqData() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCineCharInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCineCharInterface")
	}
	static class INoceCineCharInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceCineCharInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceCineCharInterface;

// Class GameNoce.NocePlayerController
// 0x0198 (0x0A08 - 0x0870)
class ANocePlayerController : public ANoceBasePlayerController
{
public:
	TMap<ENoceInputGamepadType, struct FGamepadHoldingActionBlockKeysSetting> GamepadTypeHoldingActionBlockKeysSettingMap; // 0x0870(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         InputMoveDeadZone;                                 // 0x08C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputForward;                                      // 0x08C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalInputForward;                              // 0x08C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputRight;                                        // 0x08CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalInputRight;                                // 0x08D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTurn;                                         // 0x08D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTurnRate;                                     // 0x08D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputLookUp;                                       // 0x08DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputLookUpRate;                                   // 0x08E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E4[0x4];                                      // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ENoceInputAction InInputAction, bool InPressed)> OnInputAction;    // 0x08E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENoceUIInputAction InInputAction, bool InPressed)> OnUIInputAction; // 0x08F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENoceInputAxis InInputAxis, float InValue)> OnInputAxis;           // 0x0908(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputModeChanged;                                // 0x0918(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InOpen)>   OnNoteBookWidgetOpen;                              // 0x0928(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<struct FNoceControllerVibrationSetting> ControllerVibrationSettings;                      // 0x0938(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ForbidInputActionToken;                            // 0x0948(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ForbidUIInputActionToken;                          // 0x0958(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ForbidInputAxisToken;                              // 0x0968(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ForbidInputCameraToken;                            // 0x0978(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsReadyForInput;                                   // 0x0988(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANoceTimeManager*                       TimeManager;                                       // 0x0990(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_998[0x70];                                     // 0x0998(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddForbiddenInputActions(const TArray<ENoceInputAction>& InInputActions, class FName InToken);
	void DoFlushPressedKeys();
	void DoInteractAction();
	void DoSimulateInputAction(ENoceInputAction InputAction, bool Pressed);
	void DoSprintAction();
	bool GetAcceptInputAction();
	bool GetAcceptInputAxis();
	bool GetAcceptInputCamera();
	bool GetAcceptUIInputAction();
	float GetInputActionDownTime(class FName InputAction);
	class FName GetInputActionName(ENoceInputAction InInputAction);
	bool HaveInputAxis();
	bool IsInputActionDown(class FName InputAction);
	bool IsInputActionForbidden(ENoceInputAction InInputAction);
	bool IsInputActionPressed(class FName InputAction);
	bool IsPlayerInputValid(class FName InInputAction);
	void RemoveForbiddenInputActions(const TArray<ENoceInputAction>& InInputActions, class FName InToken);
	void ResetForbiddenInputActions(class FName InToken);
	void SetAcceptInputAction(bool InAcceptAction, bool InAcceptAxis, bool InAcceptUIAction, class FName InToken);
	void SetAcceptInputActionAndCamera(bool InAcceptAction, bool InAcceptAxis, bool InAcceptUIAction, bool InAcceptCamera, class FName InToken);
	void SetNonForbiddenInputActions(const TArray<ENoceInputAction>& InInputActions, class FName InToken);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerController")
	}
	static class ANocePlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePlayerController>();
	}
};
DUMPER7_ASSERTS_ANocePlayerController;

// Class GameNoce.NoceTitlePlayerController
// 0x00A8 (0x0AB0 - 0x0A08)
class ANoceTitlePlayerController final : public ANocePlayerController
{
public:
	struct FSoftClassPath                         BackgroundWidgetClass;                             // 0x0A08(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         TitleFlowWidgetClass;                              // 0x0A28(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         TitleWidgetClass;                                  // 0x0A48(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         MainMenuWidgetClass;                               // 0x0A68(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            BackgroundWidget;                                  // 0x0A88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   TitleFlowWidget;                                   // 0x0A90(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   TitleWidget;                                       // 0x0A98(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   MainMenuWidget;                                    // 0x0AA0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AA8[0x8];                                      // 0x0AA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMainMenuClosed();
	void OnTitleClose();
	void OnTitleFlowClose();
	void ShowMainMenu();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTitlePlayerController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTitlePlayerController")
	}
	static class ANoceTitlePlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceTitlePlayerController>();
	}
};
DUMPER7_ASSERTS_ANoceTitlePlayerController;

// Class GameNoce.NoceCinematicActorInterface
// 0x0000 (0x0000 - 0x0000)
class INoceCinematicActorInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCinematicActorInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCinematicActorInterface")
	}
	static class INoceCinematicActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceCinematicActorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceCinematicActorInterface;

// Class GameNoce.NoceClawAttrackSoulWidget
// 0x0000 (0x0300 - 0x0300)
class UNoceClawAttrackSoulWidget : public UNoceUserWidgetBase
{
public:
	void BP_SetBarRatio(float InRatio);
	void BP_SetHoldTime(float InHoldTime);
	void BP_StartPressing();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceClawAttrackSoulWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceClawAttrackSoulWidget")
	}
	static class UNoceClawAttrackSoulWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceClawAttrackSoulWidget>();
	}
};
DUMPER7_ASSERTS_UNoceClawAttrackSoulWidget;

// Class GameNoce.NoceNotebookPageTabChildWidget
// 0x00D0 (0x0448 - 0x0378)
class UNoceNotebookPageTabChildWidget : public UNoceSelectItemWidget
{
public:
	class UImage*                                 DefaultImage;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SelectImage;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SelectImageAdd;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DefaultText;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             SelectText;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNewIconWidget*                     NewIcon;                                           // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UObject>                 DefaultTextureAsset;                               // 0x03A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UObject>                 MITextureAsset;                                    // 0x03D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UObject>                 SelectTextureAsset;                                // 0x03F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DesiredSize;                                       // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaterialParent;                                    // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AddTextureName;                                    // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsNew;                                             // 0x0440(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(const struct FNoceUINotebookCategoryData& InData, const struct FLinearColor& InDefaultColor, const struct FLinearColor& InSelectColor);
	void SetViewed();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotebookPageTabChildWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotebookPageTabChildWidget")
	}
	static class UNoceNotebookPageTabChildWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotebookPageTabChildWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNotebookPageTabChildWidget;

// Class GameNoce.NoceClawRemoveByProgressComp
// 0x0008 (0x0138 - 0x0130)
class UNoceClawRemoveByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	ENoceClawAlterType                            ClawAlterType;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DoNotApplyWithEmptyProgressTag;                    // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceClawRemoveByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceClawRemoveByProgressComp")
	}
	static class UNoceClawRemoveByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceClawRemoveByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceClawRemoveByProgressComp;

// Class GameNoce.NoceTutorialInstructor
// 0x0078 (0x0308 - 0x0290)
class ANoceTutorialInstructor : public AActor
{
public:
	ENoceTutorialType                             MyType;                                            // 0x0290(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceTutorialType                             MyPrevious;                                        // 0x0291(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MySimpleText;                                      // 0x0298(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETutorialStep                                 MyStep;                                            // 0x02A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayStartSec;                                     // 0x02AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoFinishSec;                                     // 0x02B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayCloseHintSec;                                 // 0x02B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MyNotebookID;                                      // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookTutorialContentRowHandle> MyNotebookArray;                            // 0x02C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookCharacterContentRowHandle> MyNotebookCharacter;                       // 0x02D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceNotebookEnemyContentRowHandle> MyNotebookEnemy;                               // 0x02E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CanGoStart;                                        // 0x02F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanGoFinish;                                       // 0x02F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x16];                                     // 0x02F2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsCompleteCondition();
	bool IsInProgress();
	bool IsPreviousTutorialClear();
	bool IsStartCondition();
	void OnTutorialClose();
	void OnTutorialFinish();
	void OnTutorialStart();
	void OnTutorialTrigger();
	void TickFinish(float DeltaTime);
	void TickListening(float DeltaTime);
	void TickStart(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTutorialInstructor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTutorialInstructor")
	}
	static class ANoceTutorialInstructor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceTutorialInstructor>();
	}
};
DUMPER7_ASSERTS_ANoceTutorialInstructor;

// Class GameNoce.NoceCollectibleListItemWidget
// 0x0030 (0x03F0 - 0x03C0)
class UNoceCollectibleListItemWidget : public UNoceScrollItemWidget
{
public:
	class UTextBlock*                             Count;                                             // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             ItemName;                                          // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Item;                                              // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNewIconWidget*                     WBP_Inventory_NewIcon;                             // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointGroupWidget*            LetterPointGroup;                                  // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCollectibleListObject*                 CurrentData;                                       // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCollectibleListItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCollectibleListItemWidget")
	}
	static class UNoceCollectibleListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCollectibleListItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCollectibleListItemWidget;

// Class GameNoce.NoceUICommonMessageSubsystem
// 0x0050 (0x0080 - 0x0030)
class UNoceUICommonMessageSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          HasStart;                                          // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceFocusableWidget*                   SystemMessageUI;                                   // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInputSubsystem*                    InputSubsystem;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFadeSubsystem*                     FadeSubsystem;                                     // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceUICommonMessageType                      CurrentType;                                       // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENoceUICommonMessageType>              RequestedMessages;                                 // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           Restrictions;                                      // 0x0070(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void AddRestriction(class FName Reason);
	void HideMessage(ENoceUICommonMessageType InType);
	void OnConnectionChanged(bool IsConnected, int32 UserId, ENoceInputDeviceType DeviceType);
	void OnPlayerControllerEndPlay(class AActor* Player, EEndPlayReason EndPlayReason);
	void RemoveRestriction(class FName Reason);
	void ShowMessage(ENoceUICommonMessageType InType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUICommonMessageSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUICommonMessageSubsystem")
	}
	static class UNoceUICommonMessageSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUICommonMessageSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceUICommonMessageSubsystem;

// Class GameNoce.NoceCommandCreditWidget
// 0x0040 (0x03A8 - 0x0368)
class UNoceCommandCreditWidget final : public UNoceAnimWidget
{
public:
	class UDataTable*                             CreditDataTable;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentIndex;                                      // 0x0370(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CreditRowNames;                                    // 0x0378(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         NextCommandTimer;                                  // 0x0388(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NextCommandAnimStartTime;                          // 0x038C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateSpeed;                                       // 0x0390(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentDeltaTime;                                  // 0x0394(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               FadeAnimations;                                    // 0x0398(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void AddDeltaTime(float InDeltaTime);
	void ResetDeltaTime();
	bool UpdateDebugSpeed(float Speed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCommandCreditWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCommandCreditWidget")
	}
	static class UNoceCommandCreditWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCommandCreditWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCommandCreditWidget;

// Class GameNoce.NoceCommonGuideItemWidget
// 0x0050 (0x0350 - 0x0300)
class UNoceCommonGuideItemWidget : public UNoceUserWidgetBase
{
public:
	class FName                                   ActionName;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0308(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UNoceUIInputImage*                      GuideIcon;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIInputImage*                      GuideIcon2;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIInputImage*                      GuideIcon3;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIInputImage*                      GuideIcon4;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             GuideText;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceUIInputImage*>              Icons;                                             // 0x0340(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void SetData();
	void UpdateIcons(const TArray<class FName>& IconNames);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCommonGuideItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCommonGuideItemWidget")
	}
	static class UNoceCommonGuideItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCommonGuideItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCommonGuideItemWidget;

// Class GameNoce.NoceCommonGuideWidgetBase
// 0x0048 (0x0348 - 0x0300)
class UNoceCommonGuideWidgetBase final : public UNoceUserWidgetBase
{
public:
	class UHorizontalBox*                         GuideBox;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         GuideBox_Left;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNoceCommonGuideItemWidget> CommonGuideItemWidgetClass;                        // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             GuideTable;                                        // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PaddingLeft;                                       // 0x0320(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNoceCommonGuideItemWidget*>     CreatedGuides;                                     // 0x0328(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceCommonGuideItemWidget*>     CreatedLeftGuides;                                 // 0x0338(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCommonGuideWidgetBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCommonGuideWidgetBase")
	}
	static class UNoceCommonGuideWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCommonGuideWidgetBase>();
	}
};
DUMPER7_ASSERTS_UNoceCommonGuideWidgetBase;

// Class GameNoce.NoceCommonMessageWidget
// 0x0000 (0x03B0 - 0x03B0)
class UNoceCommonMessageWidget final : public UNoceFocusableWidget
{
public:
	void OnGuideChanged();
	void OnTopWidgetChanged(int32 Size);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCommonMessageWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCommonMessageWidget")
	}
	static class UNoceCommonMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCommonMessageWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCommonMessageWidget;

// Class GameNoce.NoceSanityVolumeComponent
// 0x0040 (0x0118 - 0x00D8)
class UNoceSanityVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	uint8                                         Pad_D8[0x40];                                      // 0x00D8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSanityVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSanityVolumeComponent")
	}
	static class UNoceSanityVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSanityVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSanityVolumeComponent;

// Class GameNoce.NoceCommonWindowWidget
// 0x0010 (0x03C0 - 0x03B0)
class UNoceCommonWindowWidget final : public UNoceFocusableWidget
{
public:
	class UTextBlock*                             TextBlock;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Black;                                             // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowText(const class FText& InText, const struct FLinearColor& InColor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCommonWindowWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCommonWindowWidget")
	}
	static class UNoceCommonWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCommonWindowWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCommonWindowWidget;

// Class GameNoce.NoceSaveGameBase
// 0x0008 (0x0030 - 0x0028)
class UNoceSaveGameBase : public USaveGame
{
public:
	int32                                         SaveVersion;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSaveGameBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSaveGameBase")
	}
	static class UNoceSaveGameBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSaveGameBase>();
	}
};
DUMPER7_ASSERTS_UNoceSaveGameBase;

// Class GameNoce.NoceSaveGame
// 0x03F0 (0x0420 - 0x0030)
class UNoceSaveGame final : public UNoceSaveGameBase
{
public:
	class FString                                 SaveGameName;                                      // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreationTime;                                      // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SaveDate;                                          // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LoadDate;                                          // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              GameplayTime;                                      // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameProgressTag;                                   // 0x0060(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameProgressUsedDebug;                             // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StateMachineProgressTag;                           // 0x006C(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalProgressTag;                             // 0x0078(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HistoryProgressTag;                                // 0x0098(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HistoryAdditionalProgressTag;                      // 0x00B8(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CheckPointProgressTag;                             // 0x00D8(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BGMProgressTag;                                    // 0x00F8(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceActionLevel                              ActionLevel;                                       // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceRiddleLevel                              RiddleLevel;                                       // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameOverCount;                                     // 0x0104(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManualSaveCount;                                   // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceObjectRecord                      CheckPointRecord;                                  // 0x0110(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceActorRecord                       PlayerStateRecord;                                 // 0x0140(0x00A0)(NativeAccessSpecifierPublic)
	struct FNoceCharacterRecord                   HinakoRecord;                                      // 0x01E0(0x00C0)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNoceCharacterRecord                   ClawRecord;                                        // 0x02A0(0x00C0)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UseClawCharacter;                                  // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecifyStartLocation;                           // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_362[0xE];                                      // 0x0362(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpecifyTransform;                                  // 0x0370(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           WorldGateWayFromTrigger;                           // 0x03D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceActorRecord>               LevelActorRecord;                                  // 0x03E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceObjectRecord>              SubsystemRecord;                                   // 0x03F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GameSlotIndex;                                     // 0x0400(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManualSaveSlot;                                    // 0x0404(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndingClearedBit;                                  // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceEndingType                               DefiniteEndingType;                                // 0x0414(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGameClearSaveGame;                               // 0x0415(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENocePlayerOutfit                             PlayerOutfitValue;                                 // 0x0416(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequestHinaFullRecoverOnLoad;                      // 0x0417(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AnyEndingCleared();
	int32 GetCurrentRound();
	ENoceRoundType GetCurrentRoundType();
	ENoceEndingType GetDefiniteEndingType();
	int32 GetEndingClearedCount();
	ENocePlayerOutfit GetPlayerOutfitValue();
	struct FTransform GetPlayerStartTransform();
	void HandleInheritToNextRound(bool ClearProgress);
	bool HasSaveRecord();
	bool IsEndingCleared(ENoceEndingType EndingType);
	void RemoveEndingFlag(ENoceEndingType EndingType);
	void SetDefiniteEndingType(ENoceEndingType EndingType);
	void SetEndingCleared(ENoceEndingType EndingType);
	void SetPlayerOutfitValue(ENocePlayerOutfit InType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSaveGame")
	}
	static class UNoceSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSaveGame>();
	}
};
DUMPER7_ASSERTS_UNoceSaveGame;

// Class GameNoce.NoceOrCondition
// 0x0000 (0x0048 - 0x0048)
class UNoceOrCondition final : public UNoceConditionList
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOrCondition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOrCondition")
	}
	static class UNoceOrCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOrCondition>();
	}
};
DUMPER7_ASSERTS_UNoceOrCondition;

// Class GameNoce.NoceConditionHandler
// 0x0080 (0x0120 - 0x00A0)
class UNoceConditionHandler : public UActorComponent
{
public:
	ENoceConditionHandlerType                     HandleType;                                        // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentActionIndex;                                // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceActionBase*                        CurrentAction;                                     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceConditionBase*                     Condition;                                         // 0x00B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNoceActionBase*>                SuccessActions;                                    // 0x00B8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNoceActionBase*>                FailedActions;                                     // 0x00C8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCheckConditionMatch;                             // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExecuteSuccessActions;                           // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExecuteFailedActions;                            // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          IsExecutingActions;                                // 0x0108(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExecutingSuccessActions;                         // 0x0109(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlertProcessTime;                                  // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDebugInfo;                                     // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CompleteExecutingActions();
	void ExecuteAction(class UNoceActionBase* Action);
	void ExecuteFailedActions();
	void ExecuteNextAction();
	void ExecuteSuccessActions();
	class UNoceConditionBase* GetCondition();
	void HandleCondition();
	bool IsConditionMatch();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceConditionHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceConditionHandler")
	}
	static class UNoceConditionHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceConditionHandler>();
	}
};
DUMPER7_ASSERTS_UNoceConditionHandler;

// Class GameNoce.NoceSavePointPageWidget
// 0x0020 (0x03D0 - 0x03B0)
class UNoceSavePointPageWidget final : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void()>              OnUpdateFaithValue;                                // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUpdateEmaNum;                                    // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSavePointPageWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSavePointPageWidget")
	}
	static class UNoceSavePointPageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSavePointPageWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSavePointPageWidget;

// Class GameNoce.NoceCreditListItemWidget
// 0x0000 (0x02E0 - 0x02E0)
class UNoceCreditListItemWidget final : public UUserWidget
{
public:
	void SetData(const struct FNoceUICreditData& Data, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCreditListItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCreditListItemWidget")
	}
	static class UNoceCreditListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCreditListItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCreditListItemWidget;

// Class GameNoce.NoceSaveSubsystem
// 0x02F0 (0x0320 - 0x0030)
class UNoceSaveSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceSaveGame*                          CurrentSaveGame;                                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceSaveGame*                          TemporarySaveGame;                                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceSystemSaveGame*                    SystemSaveGame;                                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsAutoSave)> OnRequestSaveGameSlotEvent;                      // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRequestLoadGameSlotEvent;                        // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UNoceSystemSaveGame* SavedData)> OnSystemSlotSavedEvent;     // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UNoceSystemSaveGame* SavedData)> OnSystemSlotLoadedEvent;    // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x20];                                      // 0x0090(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ShowDebugInfo;                                     // 0x00B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x1F];                                      // 0x00B1(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceStorageSetting                    CacheStorageSetting;                               // 0x00D0(0x0178)(Protected, NativeAccessSpecifierProtected)
	class AActor*                                 MyCacheActor;                                      // 0x0248(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CacheLocationName;                                 // 0x0250(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULocalPlayer*                           OwningPlayer;                                      // 0x0258(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasSpecifyStartTransform;                          // 0x0260(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0xF];                                      // 0x0261(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CacheTriggerTransform;                             // 0x0270(0x0060)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           CacheWorldSetting;                                 // 0x02D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class FString                                 CacheLocationString;                               // 0x02E0(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CacheMissionString;                                // 0x02F0(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CacheSlotString;                                   // 0x0308(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsRequestWriteBinary;                              // 0x0318(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          WriteBinaryDelayFrame;                             // 0x0319(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGameOverCount();
	bool AnyGameSlotExist();
	bool AutoLoadContinueGameSave();
	bool AutoLoadGameData_BP();
	bool AutoSaveGameData_BP(class FName LocationName, class AActor* InActor);
	void CacheCheckPointActor(class AActor* Actor, class FName LocationName);
	void CacheSpecifyStartTransform(const struct FTransform& InTransform, const TArray<class FName>& WorldTriggerSetting);
	void ClearCheckPointActor();
	void ClearCurrentGameData();
	void ClearTemporarySaveGame();
	void DeleteAllAutoSaveGameData();
	void DeleteAllGameData();
	void DeleteAllManualSaveGameData();
	bool DeleteGameData(int32 Index_0);
	bool DeleteSystemData();
	bool DeserializeGameDataBeforeOpenLevel();
	bool DeserializeGameDataOnStart();
	bool DoesGameSlotExist(int32 Index_0);
	bool DoesSystemSlotExist();
	int32 GetAutoSaveCount();
	int32 GetAutoSaveLastIndex();
	int32 GetAutoSaveSlotIndex();
	int32 GetAutoSaveStartIndex();
	class UNoceSaveGame* GetCurrentSaveGame();
	int32 GetCurrentSaveGameSlotIndex();
	int32 GetGameSaveMaxIndex();
	int32 GetLastLoadGameSlotIndex();
	int32 GetLastManualSaveSlotIndex();
	int32 GetLastTimeStampSlotIndex(bool StartFromAutoSlot);
	int32 GetManualSaveStartIndex();
	class UNoceSaveGame* GetSaveGameByIndex(int32 Index_0);
	class UNoceSaveGame* GetSaveGameBySlot(const class FString& SlotName);
	TArray<class UNoceSaveGame*> GetSaveGameList(bool StartFromAutoSlot);
	TArray<class USaveLoadUIObject*> GetSaveLoadObjectList(bool StartFromAutoSlot);
	int32 GetSuitableManualSaveSlot();
	class UNoceSystemSaveGame* GetSystemSaveGame();
	bool HasLoadedGame();
	bool IsAutoSaveSlot(const int32 InIndex);
	bool IsBusy();
	bool IsCheckPointAlreadySaved(const struct FGameplayTag& InProgressTag);
	bool IsManualSaveSlot(const int32 InIndex);
	bool IsPlayGoRangeTag(const struct FGameplayTag& InProgressTag);
	bool IsTemporarySaveExist();
	bool LoadGameData_BP(int32 Index_0);
	bool LoadTemporarySaveGameData();
	void MakeClearGameData(const int32 Index_0, ENoceEndingType ClearEndingType, bool ClearProgress);
	void MakeSaveGameData(int32 Index_0, class FName LocationName, class AActor* InActor);
	void MakeTemporarySaveGameData(class AActor* InActor);
	bool RequestLoadGeneralActor(class AActor* InActor, bool RestoreTransform);
	void RequestLoadSubsystem(class UObject* InObject);
	bool RequestSaveGeneralActor(class AActor* InActor, bool InExistForever);
	void RequestSaveSubsystem(class UObject* InObject);
	void ResetSpecifyTransform();
	bool SaveClearGame(const int32 Index_0, ENoceEndingType ClearEndingType, bool ClearProgress);
	bool SaveGameData_BP(int32 Index_0, class FName LocationName, class AActor* InActor);
	bool SaveSystemSave();
	class USaveLoadUIObject* TransferToUIObject(const class UNoceSaveGame* SaveGame);

	int32 GetPlatformUserIndex() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSaveSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSaveSubsystem")
	}
	static class UNoceSaveSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSaveSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceSaveSubsystem;

// Class GameNoce.NoceCustomGrid
// 0x0010 (0x00B8 - 0x00A8)
class UNoceCustomGrid final : public UNoceSimpleGrid
{
public:
	TArray<struct FNoceUICustomGridNavigationSetting> NavigationSetting;                             // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void SetupNavigationSetting(const TArray<struct FNoceUICustomGridNavigationSetting>& InSetting);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCustomGrid")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCustomGrid")
	}
	static class UNoceCustomGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCustomGrid>();
	}
};
DUMPER7_ASSERTS_UNoceCustomGrid;

// Class GameNoce.NoceUIStyleTextBase
// 0x0000 (0x0370 - 0x0370)
#pragma pack(push, 0x1)
class alignas(0x10) UNoceUIStyleTextBase : public UTextBlock
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIStyleTextBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIStyleTextBase")
	}
	static class UNoceUIStyleTextBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIStyleTextBase>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UNoceUIStyleTextBase;

// Class GameNoce.NoceUIKeyMappingText
// 0x01A0 (0x0510 - 0x0370)
class UNoceUIKeyMappingText final : public UNoceUIStyleTextBase
{
public:
	TMap<int32, class FText>                      Texts;                                             // 0x0368(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultColor;                                      // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FLinearColor>              Colors;                                            // 0x03C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFontOutlineSettings                   DefaultOutlineSetting;                             // 0x0418(0x0028)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FFontOutlineSettings>      OutlineSettings;                                   // 0x0440(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 DefaultFontMaterial;                               // 0x0490(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FNoceUIFontMaterialStruct> FontMaterials;                                     // 0x04B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TextStyleKey;                                      // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTextStyleKey(int32 Key);
	void SetWrapTextAt(float InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIKeyMappingText")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIKeyMappingText")
	}
	static class UNoceUIKeyMappingText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIKeyMappingText>();
	}
};
DUMPER7_ASSERTS_UNoceUIKeyMappingText;

// Class GameNoce.NoceCutsceneSkipWidget
// 0x0008 (0x03B8 - 0x03B0)
class UNoceCutsceneSkipWidget final : public UNoceFocusableWidget
{
public:
	bool                                          IsConfirm;                                         // 0x03B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceCutsceneSkipWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceCutsceneSkipWidget")
	}
	static class UNoceCutsceneSkipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceCutsceneSkipWidget>();
	}
};
DUMPER7_ASSERTS_UNoceCutsceneSkipWidget;

// Class GameNoce.NoceDamageHandleComponent
// 0x0020 (0x00C0 - 0x00A0)
class UNoceDamageHandleComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(float InHealthDamage, float InMaxSanityDamage)> PreDamageHitHandler; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Attacker, class FName ComboName, float InHealthDamage)> OnDamage; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void NotifyOnDamageEvent(class AActor* Attacker, class FName ComboName, float InHealthDamage);
	void NotifyPreDamageEvent(float InHealthDamage, float InMaxSanityDamage);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDamageHandleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDamageHandleComponent")
	}
	static class UNoceDamageHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDamageHandleComponent>();
	}
};
DUMPER7_ASSERTS_UNoceDamageHandleComponent;

// Class GameNoce.NoceUISelectableWidgetInterface
// 0x0000 (0x0000 - 0x0000)
class INoceUISelectableWidgetInterface final
{
public:
	void OnDecide(bool* NoUse);
	void OnFocus(bool* NoUse);
	void OnReset(bool* NoUse);
	void OnSelect(bool* NoUse);
	void OnUnfocus(bool* NoUse);
	void SetContainer(class UObject* NewContainer, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUISelectableWidgetInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUISelectableWidgetInterface")
	}
	static class INoceUISelectableWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceUISelectableWidgetInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceUISelectableWidgetInterface;

// Class GameNoce.NoceDarknessVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceDarknessVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceDarknessDataRowHandle             SanityMaxNewDataRow;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDarknessProgress>          DarknessDataByProgress;                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDarknessVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDarknessVolumeComponent")
	}
	static class UNoceDarknessVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDarknessVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceDarknessVolumeComponent;

// Class GameNoce.NoceDebugCameraHUD
// 0x0020 (0x03A0 - 0x0380)
class ANoceDebugCameraHUD final : public ADebugCameraHUD
{
public:
	uint8                                         Pad_380[0x20];                                     // 0x0380(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDebugCameraHUD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDebugCameraHUD")
	}
	static class ANoceDebugCameraHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceDebugCameraHUD>();
	}
};
DUMPER7_ASSERTS_ANoceDebugCameraHUD;

// Class GameNoce.NoceDebugDrawComponent
// 0x0038 (0x00D8 - 0x00A0)
class UNoceDebugDrawComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TextPosition;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddText(const class FString& InStr, const struct FColor& InColor);
	void ClearPendingText();
	void DrawBox(const struct FVector2D& Pos, const struct FVector2D& Extent, const struct FColor& LineColor, float Thickness);
	void DrawLine(const struct FVector2D& Start, const struct FVector2D& End, const struct FColor& LineColor, float Thickness);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDebugDrawComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDebugDrawComponent")
	}
	static class UNoceDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDebugDrawComponent>();
	}
};
DUMPER7_ASSERTS_UNoceDebugDrawComponent;

// Class GameNoce.NoceVerticalList
// 0x0000 (0x00A0 - 0x00A0)
class UNoceVerticalList final : public UNoceSimpleList
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceVerticalList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceVerticalList")
	}
	static class UNoceVerticalList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceVerticalList>();
	}
};
DUMPER7_ASSERTS_UNoceVerticalList;

// Class GameNoce.NoceDecalStreamingHelperComponent
// 0x0010 (0x0530 - 0x0520)
class UNoceDecalStreamingHelperComponent final : public UPrimitiveComponent
{
public:
	class UDecalComponent*                        TrackedDecal;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_521[0xF];                                      // 0x0521(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTrackedDecal(class UDecalComponent* InDecal);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDecalStreamingHelperComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDecalStreamingHelperComponent")
	}
	static class UNoceDecalStreamingHelperComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDecalStreamingHelperComponent>();
	}
};
DUMPER7_ASSERTS_UNoceDecalStreamingHelperComponent;

// Class GameNoce.NoceDeflectPerformDataAsset
// 0x00A0 (0x00D0 - 0x0030)
class UNoceDeflectPerformDataAsset final : public UDataAsset
{
public:
	TMap<class FName, struct FNoceDeflectPerformSetting> DeflectPerformSettingMap;                   // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                DeflectPerformSettingWeaponMap;                    // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDeflectPerformDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDeflectPerformDataAsset")
	}
	static class UNoceDeflectPerformDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDeflectPerformDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceDeflectPerformDataAsset;

// Class GameNoce.NoceTitleWidget
// 0x0030 (0x03E0 - 0x03B0)
class UNoceTitleWidget final : public UNoceFocusableWidget
{
public:
	bool                                          IsLogoPhase;                                       // 0x03B0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LogoTime;                                          // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Default;                                           // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       LogoToPress;                                       // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PressDefaultLoop;                                  // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               LogoFadeOutSound;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           LogoTimerHandle;                                   // 0x03D8(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnLogoDefaultFinished();
	void OnLogoToPressCompleted();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTitleWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTitleWidget")
	}
	static class UNoceTitleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTitleWidget>();
	}
};
DUMPER7_ASSERTS_UNoceTitleWidget;

// Class GameNoce.NoceDestroyByProgressComponent
// 0x0000 (0x0130 - 0x0130)
class UNoceDestroyByProgressComponent final : public UNoceShowByProgressBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDestroyByProgressComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDestroyByProgressComponent")
	}
	static class UNoceDestroyByProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDestroyByProgressComponent>();
	}
};
DUMPER7_ASSERTS_UNoceDestroyByProgressComponent;

// Class GameNoce.NoceWeaponAttributeSet
// 0x0040 (0x0070 - 0x0030)
class UNoceWeaponAttributeSet final : public UNoceAttributeSet
{
public:
	struct FGameplayAttributeData                 Durability;                                        // 0x0030(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxDurability;                                     // 0x0040(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 DefenseCostRatio;                                  // 0x0050(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 EasyModeCostRatio;                                 // 0x0060(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWeaponAttributeSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWeaponAttributeSet")
	}
	static class UNoceWeaponAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWeaponAttributeSet>();
	}
};
DUMPER7_ASSERTS_UNoceWeaponAttributeSet;

// Class GameNoce.NoceDialogSubsystem
// 0x02E0 (0x0328 - 0x0048)
class UNoceDialogSubsystem final : public UNoceTickableWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(class FName DialogLineId)> OnDialogEnd;                            // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceDialogRequestSingle>       DialogQueue;                                       // 0x0060(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogSerialSet>           DialogSetOnScreen;                                 // 0x0070(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogRequestSingle>       DialogOnScreen;                                    // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogCooldown>            DialogInCooldown;                                  // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      RandomSetCooldownTime;                             // 0x00A0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogCooldown>            RandomSetInCooldown;                               // 0x00F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           UniqueDialogPlayed;                                // 0x0100(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogPlayingAudioEvent>   PlayingDialogAudioEvent;                           // 0x0110(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogRequestSingle>       PendingInterrupts;                                 // 0x0120(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogRequestSingle>       PendingOverlaps;                                   // 0x0130(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDialogRequestSingle>       PendingQueues;                                     // 0x0140(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         GlobalCoolDownRemainTime;                          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HistoryMaxLength;                                  // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         HistoryDialog;                                     // 0x0158(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UNoceSpeakerDataHolderAsset*            SpeakerDataHolderAsset;                            // 0x0168(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENoceDialogSpeaker, struct FNoceDialogSpeakerInfo> SpeakerActorMap;                         // 0x0170(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0x58];                                     // 0x01C0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceSystemSaveGame*                    SystemSave;                                        // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_220[0x78];                                     // 0x0220(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FNoceSelfTalkDataRow> SelfTalkMap;                                      // 0x0298(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class FString>                         MuteRequest;                                       // 0x02E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ImportantMuteRequest;                              // 0x02F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UDataTable*                             DialogLineTable;                                   // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             DialogSetTable;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             DialogDurationTable;                               // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             DialogStyleTable;                                  // 0x0320(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CancelSerialDialogSet(class FName TagOrId);
	void ClearCurrentDialog();
	class UNoceSpeakerDataHolderAsset* GetSpeakerDataHolderAsset();
	bool HasAnyDialog();
	bool IsDialogLineOrSetOnScreen(class FName TagOrId);
	bool IsDialogOnScreen(class FName TagOrId);
	bool IsDialogSetOnScreen(class FName TagOrId);
	void MuteDialog(const class FString& RequestID, bool MuteImportantDialog, bool NeedClearCurrentDialog);
	void OnDialogAudioEventEnd(int32 PlayingID);
	void OnEnterEvent();
	void OnExitEvent();
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void OnProgressInitialized(const struct FGameplayTag& InTag);
	void OnSettingChanged(class UNoceSystemSaveGame* Settings);
	void OnSystemSaveLoaded(class UNoceSystemSaveGame* InSystemSave);
	void RegisterDialogToSpeaker(ENoceDialogSpeaker Speaker, class UDataTable* Table);
	void RequestDialog(class FName TagOrId, const struct FNoceDialogLine& InDialogLine, const struct FNoceDialogAnimSetting& AnimSetting);
	bool RequestDialogByRowHandle(const struct FNoceDialogDataRowHandle& DialogRowHandle);
	bool RequestDialogOrSet(const struct FDataTableRowHandle& DialogRowHandle);
	void RequestDialogSet(class FName TagOrId, const struct FNoceDialogSet& InDialogSet);
	void SetForbitChangeVoiceLanguage(bool InForbit);
	void SetSpeakerDataHolderAsset(class UNoceSpeakerDataHolderAsset* SpeakerData);
	void UnmuteDialog(const class FString& RequestID);
	void UnregisterDialogFromSpeaker(ENoceDialogSpeaker Speaker, class UDataTable* Table);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDialogSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDialogSubsystem")
	}
	static class UNoceDialogSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDialogSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceDialogSubsystem;

// Class GameNoce.NoceDirLightVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceDirLightVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceDirLightDataRowHandle             DirectionalLightRow;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceDirLightProgress>          LightDataByProgress;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDirLightVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDirLightVolumeComponent")
	}
	static class UNoceDirLightVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDirLightVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceDirLightVolumeComponent;

// Class GameNoce.NoceDurabilityBallWidget
// 0x0018 (0x02F8 - 0x02E0)
class UNoceDurabilityBallWidget : public UUserWidget
{
public:
	class UWidgetAnimation*                       Blank;                                             // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Full;                                              // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Broken;                                            // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetProperty(bool IsBroken, bool IsFull);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDurabilityBallWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDurabilityBallWidget")
	}
	static class UNoceDurabilityBallWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDurabilityBallWidget>();
	}
};
DUMPER7_ASSERTS_UNoceDurabilityBallWidget;

// Class GameNoce.NoceDurabilityWidget
// 0x00E8 (0x03E8 - 0x0300)
class UNoceDurabilityWidget : public UNoceUserWidgetBase
{
public:
	class UWidgetAnimation*                       Blank;                                             // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Full;                                              // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Broken;                                            // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Danger;                                            // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                              ScaleBox;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlock;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall;                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall_1;                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall_2;                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall_3;                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall_4;                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall_5;                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDurabilityBallWidget*              WBP_Inventory_DurabilityBall_6;                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup1;                                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup2;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup3;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup4;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup5;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup6;                                        // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               BallGroup7;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InUserSpecifiedScale;                              // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              TextVisibility;                                    // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentDurability;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDurability;                                     // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceDurabilityBallWidget*>      Balls;                                             // 0x03B0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UOverlay*>                       BallGroups;                                        // 0x03C0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               DurabilityAnimations;                              // 0x03D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          IsBroken;                                          // 0x03E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFull;                                            // 0x03E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayStopDanger(bool IsPlay);
	void SetDurability(class FName WeaponName, float Durability);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDurabilityWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDurabilityWidget")
	}
	static class UNoceDurabilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDurabilityWidget>();
	}
};
DUMPER7_ASSERTS_UNoceDurabilityWidget;

// Class GameNoce.NoceMapLocationWidget
// 0x0050 (0x0330 - 0x02E0)
class UNoceMapLocationWidget final : public UUserWidget
{
public:
	ENoceMapLocation                              Location;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ImageTexture;                                      // 0x02E8(0x0020)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AlwaysLoaded;                                      // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoadRange;                                         // 0x030C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UnloadRange;                                       // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsImageLoaded;                                     // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Image;                                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAlwaysLoaded();
	void UpdateVisibility(class ANocePlayerState* PlayerState);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapLocationWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapLocationWidget")
	}
	static class UNoceMapLocationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapLocationWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapLocationWidget;

// Class GameNoce.NoceDynamicMapIconWidget
// 0x0050 (0x03B8 - 0x0368)
class UNoceDynamicMapIconWidget : public UNoceAnimWidget
{
public:
	ENoceDynamicMapIconType                       IconType;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceDynamicMapIconChapterType                IconChapterType;                                   // 0x0369(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceDynamicMapIconIndexType                  IconIndexType;                                     // 0x036A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36B[0x1];                                      // 0x036B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MissionPriority;                                   // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AlwaysFadeIn;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ImageTexture;                                      // 0x0378(0x0020)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Icon;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceMapStatus                                CurrentStatus;                                     // 0x03A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsImageLoaded;                                     // 0x03A1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A2[0x16];                                     // 0x03A2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadTexture();
	void UpdateVisibility(bool ForceUpdate);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDynamicMapIconWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDynamicMapIconWidget")
	}
	static class UNoceDynamicMapIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDynamicMapIconWidget>();
	}
};
DUMPER7_ASSERTS_UNoceDynamicMapIconWidget;

// Class GameNoce.NoceLockOnTargetComponent
// 0x00C8 (0x0168 - 0x00A0)
class UNoceLockOnTargetComponent final : public UActorComponent
{
public:
	class FName                                   WidgetLockOnTargetTag;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GE_LockOnTarget;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GE_LockedTarget;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeLockOnTargetThresholdGamepad;                // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeLockOnTargetThresholdMouse;                  // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeLockOnTargetCoolDown;                        // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* NewTargetActor)> OnLockOnTargetActorChanged;         // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputActionWithoutFindingLockTarget;             // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          SwitchStopAutoEndLockOnWhenTentacleLinkMotion;     // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RestoreLockWithSameLockedLinker;                   // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FindLockOnTargetByNearestDistance;                 // 0x00EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x1D];                                      // 0x00EB(0x001D)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerController*                  PlayerController;                                  // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0118(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerInputHelperComponent*        PlayerInputHelper;                                 // 0x0120(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UATPCCameraComponent*                   CameraComponent;                                   // 0x0130(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetComponent*                       LockOnTargetWidget;                                // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUILockOnTarget*                    UILockOnTarget;                                    // 0x0140(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 LockTargetActor;                                   // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UATPCLockOnTargetLocationComponent*     LockTarget;                                        // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UATPCLockOnTargetLocationComponent*     BeforeLinkMotionLockTarget;                        // 0x0158(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanPlayerLockOnTarget();
	bool GetCanLockOnTarget();
	class AActor* GetLockOnTargetActor();
	void HandleInputAction(ENoceInputAction InInputAction, bool InPressed);
	void HandleInputAxis(ENoceInputAxis InInputAxis, float InValue);
	void HandleOnPossessed(bool InPossessed);
	bool IsLockingOnTarget();
	void OnDelayFadeOutTimerUp();
	void OnEndLockOn();
	void OnPlayerDie();
	void OnPlayerEndLinked(class ULinkRequest* LinkRequest);
	void OnPlayerEnterEvent();
	void OnPlayerFSMInteractTagChanged(const struct FGameplayTag& Tag, int32 NewCount);
	void OnPlayerStartLinked(class ULinkRequest* LinkRequest);
	void OnPlayerUsingGimmick(bool IsUsing);
	void OnStartLockOn();
	void OnTargetChangeDelegate(class AActor* NewTarget, EATPCChangeTargetReason ChangeTargetReason);
	void RegisterOnPossessed();
	void SetCanLockOnTarget(bool InValue);
	void UnlockCurrentLockTarget();
	void UnlockLockTarget(class UATPCLockOnTargetLocationComponent* InLockTarget);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLockOnTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLockOnTargetComponent")
	}
	static class UNoceLockOnTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLockOnTargetComponent>();
	}
};
DUMPER7_ASSERTS_UNoceLockOnTargetComponent;

// Class GameNoce.NoceDynamicMapIconWithCondWidget
// 0x0008 (0x03C0 - 0x03B8)
class UNoceDynamicMapIconWithCondWidget final : public UNoceDynamicMapIconWidget
{
public:
	ENoceMapLocation                              RequiredLocation;                                  // 0x03B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDynamicMapIconWithCondWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDynamicMapIconWithCondWidget")
	}
	static class UNoceDynamicMapIconWithCondWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDynamicMapIconWithCondWidget>();
	}
};
DUMPER7_ASSERTS_UNoceDynamicMapIconWithCondWidget;

// Class GameNoce.NoceFadeComponentBase
// 0x00A8 (0x0148 - 0x00A0)
class UNoceFadeComponentBase : public UActorComponent
{
public:
	bool                                          Enable;                                            // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableAsSequencerActor;                            // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NearDistance;                                      // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceLightFadeParameter                NearParameter;                                     // 0x00A8(0x0008)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FarDistance;                                       // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceLightFadeParameter                FarParameter;                                      // 0x00B4(0x0008)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FadeCurve;                                         // 0x00C0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UsePlayerLocation;                                 // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DrawDebug;                                         // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseFlicker;                                        // 0x00CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FlickerCurve;                                      // 0x00D0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlickerSpeed;                                      // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RandomOffset;                                      // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlickerOffset;                                     // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlickerMagnitude;                                  // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RegisterIndex;                                     // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNoceLightFadeFullSetting              MySetting;                                         // 0x00F0(0x0058)(NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void EndLightFade();
	void InitializeLightFade();
	void RestartLightFade();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFadeComponentBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFadeComponentBase")
	}
	static class UNoceFadeComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFadeComponentBase>();
	}
};
DUMPER7_ASSERTS_UNoceFadeComponentBase;

// Class GameNoce.NoceEmissiveFadeComponent
// 0x0020 (0x0168 - 0x0148)
class UNoceEmissiveFadeComponent final : public UNoceFadeComponentBase
{
public:
	class UMaterialInstanceDynamic*               EmissiveMI;                                        // 0x0148(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetMaterialIndex;                               // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetMeshTag;                                     // 0x0154(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCPD;                                            // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmissiveCPDIndex;                                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEmissiveFadeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEmissiveFadeComponent")
	}
	static class UNoceEmissiveFadeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEmissiveFadeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceEmissiveFadeComponent;

// Class GameNoce.NoceMapWidget
// 0x0000 (0x03B0 - 0x03B0)
class UNoceMapWidget : public UNoceFocusableWidget
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapWidget")
	}
	static class UNoceMapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapWidget;

// Class GameNoce.NoceEnemyActionLevelComponent
// 0x0028 (0x00C8 - 0x00A0)
class UNoceEnemyActionLevelComponent final : public UActorComponent
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    GE_HealthBuffForActionLevels;                      // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    GE_AttackBuffForActionLevels;                      // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_FullHealth;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyActionLevelComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyActionLevelComponent")
	}
	static class UNoceEnemyActionLevelComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyActionLevelComponent>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyActionLevelComponent;

// Class GameNoce.NocePauseListItemWidget
// 0x0010 (0x0388 - 0x0378)
class UNocePauseListItemWidget : public UNoceSelectItemWidget
{
public:
	class UTextBlock*                             PauseText;                                         // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DetailText;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init(class UObject* Object);
	void UpdateDescription(const class FText& InDescriptionText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePauseListItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePauseListItemWidget")
	}
	static class UNocePauseListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePauseListItemWidget>();
	}
};
DUMPER7_ASSERTS_UNocePauseListItemWidget;

// Class GameNoce.NoceEnemyAnimInstance
// 0x0140 (0x06A0 - 0x0560)
class UNoceEnemyAnimInstance : public UNoceAnimInstance
{
public:
	ENoceEnemyAnimInstanceBoolVar                 ActionFlag;                                        // 0x0558(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoving;                                         // 0x0559(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_55A[0x2];                                      // 0x055A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementYaw;                                       // 0x055C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsStrafing;                                       // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_561[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrafeAngle;                                       // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDamaged;                                        // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFullBodySlotActive;                             // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInDamageState;                                  // 0x056A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWillReEnterDamageState;                           // 0x056B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDead;                                           // 0x056C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFakeDead;                                       // 0x056D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsResurrect;                                      // 0x056E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPossessing;                                     // 0x056F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFaceUp;                                         // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInDownState;                                    // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterDown;                                      // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanWakeUp;                                         // 0x0573(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterResurrect;                                 // 0x0574(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInIdleState;                                     // 0x0575(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_576[0x2];                                      // 0x0576(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                vLastHitLocation;                                  // 0x0578(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceWinceType                                CurrentWinceType;                                  // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceWinceType                                LastWinceType;                                     // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_592[0x2];                                      // 0x0592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastDamageAngle;                                   // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          LastDamageIsInvertWinceDirection;                  // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          RagdollPoseCache;                                  // 0x05A0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          FullBodyActive;                                    // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FullBodyControlTransform;                          // 0x05E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullBodyControlApha;                               // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FullBodyHitDirection;                              // 0x0648(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0660(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullBodyBlendTimer;                                // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PhysicsAnimationHitAlpha;                          // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ApplyPhysicsAnimationHit;                          // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0x3];                                      // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FullBodyControlBone;                               // 0x0674(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullBodyHitForce;                                  // 0x067C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullBodyBlendTime;                                 // 0x0680(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FullBodyApplyFixedDetlaTime;                       // 0x0684(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FullBodyApplyFixedGlobalDetlaTime;                 // 0x0685(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_686[0x2];                                      // 0x0686(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HeadBoneName;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANoceEnemyCharacter*                    EnemyCharacter;                                    // 0x0690(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyGameplayEffect(TSubclassOf<class UGameplayEffect> InGameplayEffect);
	void CancelEnterDamageState();
	void HandleGameplayEvent(const struct FGameplayTag& EventTag);
	void HandleHitPoint(const struct FVector& InHitPoint, const struct FVector& AttackDirection);
	bool IsForwardPose();
	void OnAnimFakeDead_BP();
	void OnAnimResurrectBegin_BP();
	void OnAnimResurrectExit();
	void OnAnimResurrectExit_BP();
	void OnDamageCheckAngle(ENoceWinceType InWinceType);
	void OnDamageStateEntry(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnDamageStateExit(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnDeadStateEntry(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnDeadStateExit(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnDie_BP();
	void OnDownStateEntry(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnDownStateExit(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnIdleStateEntry(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnIdleStateExit(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnLinkStateEntry(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnLinkStateExit(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnResurrectStateEntry(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void OnResurrectStateExit(struct FAnimUpdateContext& Content, struct FAnimNodeReference& Node);
	void ReceiveDeathEvent();
	void ReceiveFakeDeadEvent();
	void ReceiveResurrectionEvent();
	void RemoveGameplayEffect(TSubclassOf<class UGameplayEffect> InGameplayEffect);
	void SetCanEnterDown(bool InEnable, float InDuration);
	void SetEnterDamageState(ENoceWinceType WinceType);
	void UpdateFullBodyIk(float DeltaTime);
	void UpdateIsFaceUpFlag();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyAnimInstance")
	}
	static class UNoceEnemyAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyAnimInstance>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyAnimInstance;

// Class GameNoce.NoceEnemyAttackInfoComponent
// 0x0180 (0x0220 - 0x00A0)
class UNoceEnemyAttackInfoComponent final : public UActorComponent
{
public:
	class UNoceEnemyComboDataAsset*               EnemyComboDataAsset;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     HealthAttackAttribute;                             // 0x00A8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     WinceAttackAttribute;                              // 0x00E0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     MaxSanityAttackAttribute;                          // 0x0118(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     HealthToMaxSanityAttackAttribute;                  // 0x0150(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     StaminaAttackAttribute;                            // 0x0188(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENoceActionLevel, float>                 ActionLevelHealthToMaxSanityAttackRatioMap;        // 0x01C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0210(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0218(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	float ComputeHealthDamage(class FName InComboName);
	float ComputeHealthDamageValue(float Damage, float FloatRate);
	float ComputeMaxSanityDamage(class FName InComboName, float InFinalHealthDamage);
	float ComputeMaxSanityDamageValue(float InFinalHealthDamage, float InMaxSanityDamage, float FloatRate);
	float ComputeStaminaDamage(class FName InComboName);
	float ComputeStaminaDamageValue(float Damage, float FloatRate);
	float ComputeWinceDamage(class FName InComboName);
	float ComputeWinceDamageValue(float Damage, float FloatRate);
	void GetAttackInfo(class FName ComboName, float* HealthDamage, float* WinceDamage, float* MaxSanityDamage, float* StaminaDamage, bool* IsForceWince, ENoceWinceType* WinceType, ENoceDeathType* DeathType, TSubclassOf<class UGameplayEffect>* DebuffEffect);
	bool GetCanBeAxeDefensed(class FName InComboName);
	bool GetCanBeKatanaDefensed(class FName InComboName);
	bool GetCheckJustDodgeCounterDistance(class FName InComboName);
	void GetComboCheckInfo(class FName InComboName, bool* OutCheckJustDodge, bool* OutCheckInvincible, bool* OutCheckOmamoriKagami);
	ENoceDeathType GetDeathType(class FName InComboName);
	TSubclassOf<class UGameplayEffect> GetDebuffEffectData(class FName InComboName);
	bool GetIsChannelingAttack(class FName InComboName);
	bool GetIsForceWince(class FName InComboName);
	float GetMaxSanityDamageToHealthDamageRatio(class FName InComboName);
	bool GetNeedCheckSuperArmor(class FName InComboName);
	ENoceWinceType GetWinceType(class FName InComboName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyAttackInfoComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyAttackInfoComponent")
	}
	static class UNoceEnemyAttackInfoComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyAttackInfoComponent>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyAttackInfoComponent;

// Class GameNoce.NoceEnemyAttributeSet
// 0x00A0 (0x0120 - 0x0080)
class UNoceEnemyAttributeSet final : public UNoceCharacterAttributeSet
{
public:
	struct FGameplayAttributeData                 HealthAttack;                                      // 0x0080(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 WinceAttack;                                       // 0x0090(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxSanityAttack;                                   // 0x00A0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 StaminaAttack;                                     // 0x00B0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 HealthToMaxSanityAttack;                           // 0x00C0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 DamageRatioHealth;                                 // 0x00D0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 DamageRatioWince;                                  // 0x00E0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Jealous;                                           // 0x00F0(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 LinkAttackRatio;                                   // 0x0100(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 FakeDeadWakeupRatio;                               // 0x0110(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyAttributeSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyAttributeSet")
	}
	static class UNoceEnemyAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyAttributeSet>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyAttributeSet;

// Class GameNoce.NoceWeapon
// 0x0150 (0x03E0 - 0x0290)
class ANoceWeapon : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool InShowOnUI, class FName InWeaponName, float InDurability, bool InIsDiscarded)> OnShowWeaponDurabilityHint; // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName InWeaponName, float InDurability, bool InIsDiscarded, bool InIsBroken)> OnWeaponDurabilityChanged; // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ENoceWeaponType                               WeaponType;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceWeaponMotionType                         WeaponMotionType;                                  // 0x02B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           WeaponAudioType;                                   // 0x02BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CollisionComp;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 WeaponMesh;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WeaponName;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CounterComboName;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HitPerformGroupName;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvironmentDeflectDurabilityCostRatio;             // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WeaponMeshEquippedSocket;                          // 0x02F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EquippedSocketRelativeTransform;                   // 0x0300(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    GE_WeaponDefaults;                                 // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    GE_WeaponCurrents;                                 // 0x0370(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_DurabilityCostSetByCaller;                      // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_DurabilitySetByCaller;                          // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_DurabilitySetByCaller;                         // 0x0390(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWeaponAttributeSet*                AttributeSet;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWeaponSubsystem*                   NoceWeaponSubsystem;                               // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerKatanaComponent*             PlayerKatanaComponent;                             // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x20];                                     // 0x03C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddDurability(float InValue);
	void ApplyCurrentEffects();
	void CostDurability(float InValue, bool InIsAdd, bool InLimitDurability, bool* OutForceDeflect);
	void CostDurabilityByDefesne(float InValue, bool InLimitDurability);
	void Equip(float InCurrentDurability, bool InWeaponMeshForceSetVisibility, bool InWeaponMeshForceShow);
	void Equip_BP();
	bool ForceDeflectPostCostDurablity_BP();
	float GetActionLevelDurabilityCostRatio();
	void GetAttackInfo(float InWeaponDurability, float* AttackMultiplier, float* ExtraAttackMultiplier, float* WinceMultiplier);
	bool GetCanBeBroken();
	bool GetCanCostDurability();
	bool GetCanDiscard();
	bool GetCanFocusAttack();
	float GetDefenseCostRatio();
	float GetDeflectRate();
	float GetDurabilityRatio();
	float GetEasyModeCostRatio();
	bool GetIsDiscarded();
	class USkeletalMeshComponent* GetMesh();
	void GetOverrideComboInfo(class FName InComboName, bool* OutFound, struct FNoceWeaponInfoOverride* OutComboInfo);
	void GetOverrideStaminaKeyCost(class FName InStaminaKey, bool* OutFound, float* OutStaminaCost);
	bool GetUseFocusAttackWhenFullCharged();
	ENoceWeaponMotionType GetWeaponMotionType();
	ENoceWeaponType GetWeaponType();
	void HandleClawTransform_BP(bool InTransformToClawG);
	void HideWeapon(class FName InWeaponName, bool InHide, class FName InToken);
	bool IsBroken();
	bool IsInLowDurability();
	void RemoveCurrentEffects();
	void SetCounterComboName(class FName InCounterComboName);
	void SetDurability(float InValue);
	void SetIsDiscarded();
	void SetWeaponAudioType(const struct FGameplayTag& InTag);
	void SetWeaponMotionType(ENoceWeaponMotionType InWeaponMotionType);
	void SetWeaponName(class FName InWeaponName);
	void SetWeaponType(ENoceWeaponType InWeaponType);
	void Unequip();
	void UnEquip_BP();

	float GetDurability() const;
	float GetMaxDurability() const;
	bool IsVisible() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWeapon")
	}
	static class ANoceWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceWeapon>();
	}
};
DUMPER7_ASSERTS_ANoceWeapon;

// Class GameNoce.NoceEnemyCharacter
// 0x01E0 (0x0F00 - 0x0D20)
class ANoceEnemyCharacter : public ANoceCharacter
{
public:
	uint8                                         Pad_D20[0x10];                                     // 0x0D20(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceEnemyAnimInstance*                 EnemyAnimInstance;                                 // 0x0D30(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFakeDead;                                        // 0x0D38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnResurrect;                                       // 0x0D48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsShow)>   OnShowHideChanged;                                 // 0x0D58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsEnter)>  OnEnterBrightRoom;                                 // 0x0D68(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsEnable)> OnAttractSoul;                                     // 0x0D78(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float IsRatio)> OnAttractSoulSetRatio;                             // 0x0D88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector& InHitLocation, const struct FVector& InAttackDirection)> OnApplyAdditiveWince; // 0x0D98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          DisableRMLocomotion;                               // 0x0DA8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceEnemyInSight;                                 // 0x0DA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAA[0x6];                                      // 0x0DAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceEnemyAttributeSet*                 EnemyAttributeSet;                                 // 0x0DB0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceGameplayTagDataAsset*              TagDataAsset;                                      // 0x0DB8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLinkMotionComponent*               LinkMotionComponent;                               // 0x0DC0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANoceAIController*                      EnemyAIController;                                 // 0x0DC8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_BrightRoomDebuff;                               // 0x0DD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsNonCounterableWhenInactive;                      // 0x0DD8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsCounterableHintLarget;                           // 0x0DD9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DDA[0x2];                                      // 0x0DDA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CounterableHintSocket;                             // 0x0DDC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CountableHintSize;                                 // 0x0DE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HitPerformGroupName;                               // 0x0DE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           MayNotRevivePlayerCombos;                          // 0x0DF0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           MayNotRevivePlayerWeaponNames;                     // 0x0E00(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          CanPushPlayer;                                     // 0x0E10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanBePushedByPlayer;                               // 0x0E11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanPlayerSlideByDodgePush;                         // 0x0E12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E13[0x1];                                      // 0x0E13(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FakeDeadWakeupTimeMin;                             // 0x0E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FakeDeadWakeupTimeMax;                             // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReviveHealthRatio;                                 // 0x0E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExtendAutoAimDistance;                             // 0x0E20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Unkillable;                                        // 0x0E24(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RecordAlertLocation;                               // 0x0E25(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCachedMovementModeOnLoad;                       // 0x0E26(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E27[0x1];                                      // 0x0E27(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeathRangeByClaw;                                  // 0x0E28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInLoadRecord;                                     // 0x0E2C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2D[0x3];                                      // 0x0E2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceAISystem*                          NoceAISystemInstance;                              // 0x0E30(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceBodyPartGroupComponent*            BodyPartGroupComponent;                            // 0x0E38(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceLockLocationComponent*             LockLocationComponent;                             // 0x0E40(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E48[0x34];                                     // 0x0E48(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSpawnFromFreak;                                   // 0x0E7C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsFakeDead;                                       // 0x0E7D(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E7E[0x2];                                      // 0x0E7E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FakeDeadProgressTime;                              // 0x0E80(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FakeDeadCount;                                     // 0x0E84(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          CacheAIThinkEnable;                                // 0x0E88(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E89[0x7];                                      // 0x0E89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CacheAIAlertFinalTransform;                        // 0x0E90(0x0060)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          RecordLockAlertness;                               // 0x0EF0(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EF1[0x3];                                      // 0x0EF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecordAlertness;                                   // 0x0EF4(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          RecordNeedRestoreAlert;                            // 0x0EF8(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EF9[0x7];                                      // 0x0EF9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddFakeDeadProgressTime(float InValue);
	bool CanBeLockedOnTarget();
	bool CanFakeDead();
	bool CanSeePlayer(bool InDebugDraw, EDrawDebugTrace InDrawDebugTrace);
	bool CheckAlive();
	bool CheckIsInBrightRoom();
	bool CheckMayNotReviveRule();
	bool Die_BP();
	void EndFakeDead();
	bool EndResurrect();
	void EnterBrightRoom();
	void ExitBrightRoom();
	void FakeDeadToDie();
	ENoceAIAlertType GetAIAlertType();
	int32 GetBattlePositionScore(ENoceBattlePositionTier InTier);
	bool GetCanAcceptAttrackSoul();
	bool GetCanBePushedByPlayer();
	bool GetCanPlayerSlideByDodgePush();
	bool GetCanPushPlayer();
	bool GetCanTakeDamage();
	float GetExtendAutoAimDistance();
	int32 GetFakeDeadCount();
	float GetFakeDeadProgressTime();
	float GetFakeDeadRemainingTime();
	bool GetIsNonCounterableWhenInactive();
	struct FVector GetPossiblePositionOnLoad();
	bool HasBattlePositionScore();
	bool HasFakeDeadAbility();
	bool InstantRevival();
	bool IsBreakDown();
	bool IsCounterable(bool InCounterHint);
	bool IsEngagedStatus();
	bool IsLockedTarget();
	bool IsNoCostPlayerWeaponDurability();
	bool IsSpawnFromFreak();
	bool IsVisibileToPlayer(bool InDebugDraw, float InCapsuleRadiusRatio, float InBackSideDiffDistance, bool InOnlyCheckCenter, EDrawDebugTrace InDrawDebugTrace);
	bool IsVisibleForEnemyInSight();
	void Kill();
	bool NoFightingStrength();
	bool OnDamaged_BP(const struct FNoceAttackHitResult& AttackHitResult);
	void OnFinishEvent_BP();
	void OnStartEvent_BP();
	void RequestFakeDead(bool FromLoad, bool ResetAI);
	void ResetMovementState();
	void SendGameplayEventToAnimation(const struct FGameplayTag& EventTag);
	void SetCanAcceptAttrackSoul(bool InValue);
	void SetCanTakeDamage(bool InValue);
	void SetFakeDeadCount(int32 InValue);
	void SetIsHiddenBeforeCutscene(bool IsHidden);
	void SetIsVisibleForEnemyInSight(bool InValue);
	void SetJealous(float InValue);
	void SetRootMotionScale(float InScale);
	void SetSpawnerFreak(class ANoceEnemyCharacter* FreakCharacter);
	void ShowHideEnemy(bool InShow);
	void StartFakeDead(bool FromLoad);
	bool StartResurrect();
	void TryCreateRecord();

	float GetDamageRatioHealth() const;
	float GetDamageRatioWince() const;
	float GetFakeDeadWakeupRatio() const;
	float GetHealthAttackRatio() const;
	float GetJealous() const;
	float GetLinkAttackRatio() const;
	bool IsDead() const;
	bool IsFakeDead() const;
	bool IsResurrect() const;
	bool OnCanCreateRecord() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyCharacter")
	}
	static class ANoceEnemyCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceEnemyCharacter>();
	}
};
DUMPER7_ASSERTS_ANoceEnemyCharacter;

// Class GameNoce.NoceMapIconWidget
// 0x0050 (0x0350 - 0x0300)
class UNoceMapIconWidget : public UNoceUserWidgetBase
{
public:
	class UWidgetAnimation*                       FadeIn;                                            // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select;                                            // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceMapGeneralIconData                Data;                                              // 0x0310(0x0038)(BlueprintVisible, Transient, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Icon;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FVector GetWorldPos();
	void OnFadeInCompleted();
	void UpdateRotation(float InvMapYaw);
	void UpdateScale(float MapScale, float IconScale);
	void UpdateVisibility(bool IsInView);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapIconWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapIconWidget")
	}
	static class UNoceMapIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapIconWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapIconWidget;

// Class GameNoce.NoceEnemyComboDataAsset
// 0x0050 (0x0080 - 0x0030)
class UNoceEnemyComboDataAsset final : public UDataAsset
{
public:
	TMap<class FName, struct FNoceEnemyComboSetting> EnemyComboSettingMap;                           // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyComboDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyComboDataAsset")
	}
	static class UNoceEnemyComboDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyComboDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyComboDataAsset;

// Class GameNoce.NoceEnemyDamageHandleComponent
// 0x0180 (0x0240 - 0x00C0)
class UNoceEnemyDamageHandleComponent final : public UNoceDamageHandleComponent
{
public:
	struct FGameplayAttribute                     HealthAttribute;                                   // 0x00C0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     DamageRatioHealthAttribute;                        // 0x00F8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_HealthCostSetByCaller;                          // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_HealthCostSetByCaller;                         // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     ArmorAttribute;                                    // 0x0140(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     DamageRatioWinceAttribute;                         // 0x0178(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_ArmorCostSetByCaller;                           // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_ArmorCostSetByCaller;                          // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_ArmorFull;                                      // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENoceWinceType, ENoceWinceType>          WinceTypeFallbackMap;                              // 0x01C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceBodyPartGroupComponent*            BodyPartGroupComponent;                            // 0x0228(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceSuperArmorComponent*               SuperArmorComponent;                               // 0x0230(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceWinceDamageReduceComponent*        WinceDamageReduceComponent;                        // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleBodyPartGroupDamage(class FName InBodyPartGroupName, float InHealthDamage, bool InIsLimitHealth, bool* OutIsBreak, bool* OutIsDamageToHealth);
	ENoceWinceType HandleDamage(float InHealthDamage, float InWinceDamage, bool InIsForceWince, bool InAttackWinceToAdditvie, ENoceWinceType InWinceType, bool InIsLimitHealth, bool InIsLimitWince);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyDamageHandleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyDamageHandleComponent")
	}
	static class UNoceEnemyDamageHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyDamageHandleComponent>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyDamageHandleComponent;

// Class GameNoce.NoceEnemyGroupSpawnComponent
// 0x0120 (0x01C0 - 0x00A0)
class UNoceEnemyGroupSpawnComponent final : public UActorComponent
{
public:
	TArray<struct FEnemyGroupSpawnSetting>        GroupSpawnSetting;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEnemyGroupSpawnSetting                CurrSpawnSetting;                                  // 0x00B0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Spawning;                                          // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANoceEnemyCharacter*>            SpawnedEnemies;                                    // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ANoceEnemyCharacter*>            SpawnedMainEnemies;                                // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x50];                                     // 0x0170(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentGroupTime(ENoceActionLevel InLevel);
	void HandleUnhideSpawnedEnemy(class ANoceEnemyCharacter* Char, float Time);
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);
	void UpdateSpawnedEnemies();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyGroupSpawnComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyGroupSpawnComponent")
	}
	static class UNoceEnemyGroupSpawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyGroupSpawnComponent>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyGroupSpawnComponent;

// Class GameNoce.NoceMontageStateMonitorComponent
// 0x0028 (0x00C8 - 0x00A0)
class UNoceMontageStateMonitorComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(ENoceMontageState NewMontageState)> OnMontageStateChanged;         // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAnimInstance*                          OwnerAnimInstance;                                 // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           PlayAnimMontage;                                   // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ENoceMontageState GetMontageState();
	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void RecordMontageState(class UAnimMontage* InMontage, ENoceMontageState InMontageState);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMontageStateMonitorComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMontageStateMonitorComponent")
	}
	static class UNoceMontageStateMonitorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMontageStateMonitorComponent>();
	}
};
DUMPER7_ASSERTS_UNoceMontageStateMonitorComponent;

// Class GameNoce.NoceEnemyGroupSpawner
// 0x00B8 (0x0348 - 0x0290)
class ANoceEnemyGroupSpawner final : public AActor
{
public:
	TArray<struct FEnemyGroupSpawnSetting>        GroupSpawnSetting;                                 // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEnemyGroupSpawnSetting                CurrSpawnSetting;                                  // 0x02A0(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class ANoceEnemyCharacter*>            SpawnedEnemies;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyGroupSpawner")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyGroupSpawner")
	}
	static class ANoceEnemyGroupSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceEnemyGroupSpawner>();
	}
};
DUMPER7_ASSERTS_ANoceEnemyGroupSpawner;

// Class GameNoce.NoceLoadBarWidget
// 0x0008 (0x0370 - 0x0368)
class UNoceLoadBarWidget final : public UNoceAnimWidget
{
public:
	class UProgressBar*                           Bar;                                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateProgress(float InProgress);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLoadBarWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLoadBarWidget")
	}
	static class UNoceLoadBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLoadBarWidget>();
	}
};
DUMPER7_ASSERTS_UNoceLoadBarWidget;

// Class GameNoce.NoceEnemyPhysicsAssetSwapComp
// 0x0060 (0x0100 - 0x00A0)
class UNoceEnemyPhysicsAssetSwapComp final : public UActorComponent
{
public:
	class UPhysicsAsset*                          ShrinkPhysicsAsset;                                // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HeadMeshTag;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                          ShrinkHeadPhysicsAsset;                            // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerDistanceThreshold;                           // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool InUseShrink)> OnChangePhyscisAsset;                           // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 OwnerMesh;                                         // 0x00D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 OwnerHeadMesh;                                     // 0x00D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANoceEnemyCharacter*                    OwnerCharacter;                                    // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                          DefaultPhysicsAsset;                               // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                          DefaultHeadPhysicsAsset;                           // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangePhysicsAsset(bool InShrink);
	void InitializeDefaultAssetData();
	void OnPossessedPawnChanged(class APawn* InOldPawn, class APawn* InNewPawn);
	void OnUseCapsuleShrink(bool InUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnemyPhysicsAssetSwapComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnemyPhysicsAssetSwapComp")
	}
	static class UNoceEnemyPhysicsAssetSwapComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnemyPhysicsAssetSwapComp>();
	}
};
DUMPER7_ASSERTS_UNoceEnemyPhysicsAssetSwapComp;

// Class GameNoce.NoceEnvHandler
// 0x00E8 (0x0110 - 0x0028)
class UNoceEnvHandler : public UObject
{
public:
	uint8                                         Pad_28[0xE8];                                      // 0x0028(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnvHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnvHandler")
	}
	static class UNoceEnvHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnvHandler>();
	}
};
DUMPER7_ASSERTS_UNoceEnvHandler;

// Class GameNoce.NoceHeightFogHandler
// 0x0150 (0x0260 - 0x0110)
class UNoceHeightFogHandler final : public UNoceEnvHandler
{
public:
	class UExponentialHeightFogComponent*         TargetFogComponent;                                // 0x0110(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x148];                                    // 0x0118(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHeightFogHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHeightFogHandler")
	}
	static class UNoceHeightFogHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHeightFogHandler>();
	}
};
DUMPER7_ASSERTS_UNoceHeightFogHandler;

// Class GameNoce.NoceVolumetricFogHandler
// 0x0170 (0x0280 - 0x0110)
class UNoceVolumetricFogHandler final : public UNoceEnvHandler
{
public:
	TArray<class UStaticMeshComponent*>           DarkFogCube;                                       // 0x0110(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       DarkActiveMI;                                      // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           TownFogCube;                                       // 0x0130(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       TownActiveMI;                                      // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNoceVolumetricFogSetting              CurrentParam;                                      // 0x0150(0x00D0)(Protected, NativeAccessSpecifierProtected)
	class UTexture*                               CurrentVolumeTex;                                  // 0x0220(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_228[0x58];                                     // 0x0228(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceVolumetricFogHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceVolumetricFogHandler")
	}
	static class UNoceVolumetricFogHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceVolumetricFogHandler>();
	}
};
DUMPER7_ASSERTS_UNoceVolumetricFogHandler;

// Class GameNoce.NoceSanityFlowerWidget
// 0x00B0 (0x0390 - 0x02E0)
class UNoceSanityFlowerWidget : public UUserWidget
{
public:
	class UImage*                                 Small1;                                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small2;                                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small3;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small4;                                            // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small5;                                            // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small6;                                            // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small7;                                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small8;                                            // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Small9;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small1;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small2;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small3;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small4;                                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small5;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small6;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small7;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small8;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 MI_Small9;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         SmallFlowers;                                      // 0x0370(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         SmallMIFlowers;                                    // 0x0380(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void UpdateFlowerVisibility(int32 SmallFlowerNum);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSanityFlowerWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSanityFlowerWidget")
	}
	static class UNoceSanityFlowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSanityFlowerWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSanityFlowerWidget;

// Class GameNoce.NoceDarknessHandler
// 0x0078 (0x0188 - 0x0110)
class UNoceDarknessHandler final : public UNoceEnvHandler
{
public:
	uint8                                         Pad_110[0x20];                                     // 0x0110(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                TargetWorldContextObject;                          // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x50];                                     // 0x0138(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDarknessHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDarknessHandler")
	}
	static class UNoceDarknessHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDarknessHandler>();
	}
};
DUMPER7_ASSERTS_UNoceDarknessHandler;

// Class GameNoce.NoceDirectionalLightHandler
// 0x00D8 (0x01E8 - 0x0110)
class UNoceDirectionalLightHandler final : public UNoceEnvHandler
{
public:
	uint8                                         Pad_110[0xD8];                                     // 0x0110(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceDirectionalLightHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceDirectionalLightHandler")
	}
	static class UNoceDirectionalLightHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceDirectionalLightHandler>();
	}
};
DUMPER7_ASSERTS_UNoceDirectionalLightHandler;

// Class GameNoce.NoceSpotLightHandler
// 0x00D0 (0x01E0 - 0x0110)
class UNoceSpotLightHandler final : public UNoceEnvHandler
{
public:
	uint8                                         Pad_110[0xD0];                                     // 0x0110(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSpotLightHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSpotLightHandler")
	}
	static class UNoceSpotLightHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSpotLightHandler>();
	}
};
DUMPER7_ASSERTS_UNoceSpotLightHandler;

// Class GameNoce.NocePlayerInputHelperComponent
// 0x01B8 (0x0258 - 0x00A0)
class UNocePlayerInputHelperComponent final : public UActorComponent
{
public:
	struct FGameplayTagContainer                  ShortcutItemEnableStateTags;                       // 0x00A0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ShortcutTags;                                      // 0x00C0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ShortcutItemDisableStateTags;                      // 0x00E0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ShortcutItemEventTag;                              // 0x0100(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   InputActionShortcutItem;                           // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           InputActionShortcutItemsTypeB;                     // 0x0110(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         ShortcutItemEventDelayTime;                        // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FocusEnableStateTags;                              // 0x0128(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FocusPauseStateTags;                               // 0x0148(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FocusDisableStateTags;                             // 0x0168(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  UpperBodyMotionTags;                               // 0x0188(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	class FName                                   InputActionFocus;                                  // 0x01A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool InUsingFocus)> OnEnterCounterState;                           // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UNoceSystemSaveGame*                    SystemSaveGame;                                    // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C8[0x60];                                     // 0x01C8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerController*                  PlayerController;                                  // 0x0228(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0230(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSanityComponent*                   SanityComponent;                                   // 0x0240(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceGameplayTagDataAsset*              TagDataAsset;                                      // 0x0248(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_250[0x8];                                      // 0x0250(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnPossessed(bool InPossessed);
	bool IsInputActionValid(class FName InInputAction);
	void OnFocusDisableStateTagChanged(const struct FGameplayTag& InTag, int32 InNewCount);
	void OnFocusEnableStateTagChanged(const struct FGameplayTag& InTag, int32 InNewCount);
	void OnFocusPauseStateTagChanged(const struct FGameplayTag& InTag, int32 InNewCount);
	void OnInputModeChanged();
	void OnPlayerUsingGimmick(bool InIsUsing);
	void OnShortcutItemEnableStateTagChanged(const struct FGameplayTag& InTag, int32 InNewCount);
	void OnShortcutTagChanged(const struct FGameplayTag& InTag, int32 InNewCount);
	void OnUISubsystemWidgetStackSizeChanged(int32 InSize);
	void OnUpperBodyMotionTagChanged(const struct FGameplayTag& InTag, int32 InNewCount);
	void RegisterOnPossessed();
	bool StopSprintWhenInputExtraSprintReleased();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerInputHelperComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerInputHelperComponent")
	}
	static class UNocePlayerInputHelperComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerInputHelperComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerInputHelperComponent;

// Class GameNoce.NoceSkyLightHandler
// 0x00F8 (0x0208 - 0x0110)
class UNoceSkyLightHandler final : public UNoceEnvHandler
{
public:
	uint8                                         Pad_110[0xD8];                                     // 0x0110(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           CurrentSourceCubemap;                              // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureCube*                           CurrentDestinationCubemap;                         // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F8[0x10];                                     // 0x01F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSkyLightHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSkyLightHandler")
	}
	static class UNoceSkyLightHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSkyLightHandler>();
	}
};
DUMPER7_ASSERTS_UNoceSkyLightHandler;

// Class GameNoce.NoceMapBackgroundWidget
// 0x0028 (0x0308 - 0x02E0)
class UNoceMapBackgroundWidget final : public UUserWidget
{
public:
	class UImage*                                 Image;                                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ImagePath;                                         // 0x02E8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapBackgroundWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapBackgroundWidget")
	}
	static class UNoceMapBackgroundWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapBackgroundWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapBackgroundWidget;

// Class GameNoce.NoceSkyAtmosphereHandler
// 0x00F8 (0x0208 - 0x0110)
class UNoceSkyAtmosphereHandler final : public UNoceEnvHandler
{
public:
	uint8                                         Pad_110[0xF8];                                     // 0x0110(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSkyAtmosphereHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSkyAtmosphereHandler")
	}
	static class UNoceSkyAtmosphereHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSkyAtmosphereHandler>();
	}
};
DUMPER7_ASSERTS_UNoceSkyAtmosphereHandler;

// Class GameNoce.NoceSkyDomeHandler
// 0x0268 (0x0378 - 0x0110)
class UNoceSkyDomeHandler final : public UNoceEnvHandler
{
public:
	uint8                                         Pad_110[0x240];                                    // 0x0110(0x0240)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CurrentSkybox;                                     // 0x0350(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               CurrentFlowMap;                                    // 0x0358(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               CurrentGleamMask;                                  // 0x0360(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               CurrentCloudMask;                                  // 0x0368(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               CurrentSunMap;                                     // 0x0370(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSkyDomeHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSkyDomeHandler")
	}
	static class UNoceSkyDomeHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSkyDomeHandler>();
	}
};
DUMPER7_ASSERTS_UNoceSkyDomeHandler;

// Class GameNoce.NoceSSFSHandler
// 0x0068 (0x0178 - 0x0110)
class UNoceSSFSHandler final : public UNoceEnvHandler
{
public:
	class UObject*                                TargetWorldContextObject;                          // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x60];                                     // 0x0118(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSSFSHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSSFSHandler")
	}
	static class UNoceSSFSHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSSFSHandler>();
	}
};
DUMPER7_ASSERTS_UNoceSSFSHandler;

// Class GameNoce.NocePlayerLookAtTargetComponent
// 0x0010 (0x0240 - 0x0230)
class UNocePlayerLookAtTargetComponent final : public USceneComponent
{
public:
	bool                                          Enable;                                            // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OnlyUseForMotionWarp;                              // 0x0231(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SkipAutoAimMeshCheck;                              // 0x0232(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_233[0xD];                                      // 0x0233(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsEnable();
	bool GetOnlyUseForMotionWarp();
	bool GetSkipAutoAimMeshCheck();
	void HandleEnemyFakeDead();
	void HandleEnemyOnDie();
	void HandleEnemyRevive();
	void HandleEnemyShowHide(bool InShow);
	void HandleInteractEnableChanged(bool InEnable);
	void SetEnable(bool InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerLookAtTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerLookAtTargetComponent")
	}
	static class UNocePlayerLookAtTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerLookAtTargetComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerLookAtTargetComponent;

// Class GameNoce.NoceLumenTranslucencyHandler
// 0x0068 (0x0178 - 0x0110)
class UNoceLumenTranslucencyHandler final : public UNoceEnvHandler
{
public:
	class UObject*                                TargetWorldContextObject;                          // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x60];                                     // 0x0118(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLumenTranslucencyHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLumenTranslucencyHandler")
	}
	static class UNoceLumenTranslucencyHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLumenTranslucencyHandler>();
	}
};
DUMPER7_ASSERTS_UNoceLumenTranslucencyHandler;

// Class GameNoce.NoceMovieSceneDataLayerSection
// 0x0010 (0x0130 - 0x0120)
class UNoceMovieSceneDataLayerSection final : public UMovieSceneDataLayerSection
{
public:
	class UNoceSeqDataAsset*                      SeqDataAsset;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseInRunTime;                                     // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMovieSceneDataLayerSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMovieSceneDataLayerSection")
	}
	static class UNoceMovieSceneDataLayerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMovieSceneDataLayerSection>();
	}
};
DUMPER7_ASSERTS_UNoceMovieSceneDataLayerSection;

// Class GameNoce.NoceLanternNiagaraHandler
// 0x00D0 (0x01E0 - 0x0110)
class UNoceLanternNiagaraHandler final : public UNoceEnvHandler
{
public:
	TArray<class UNiagaraComponent*>              TargetNiagaraComp;                                 // 0x0110(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0xC0];                                     // 0x0120(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLanternNiagaraHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLanternNiagaraHandler")
	}
	static class UNoceLanternNiagaraHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLanternNiagaraHandler>();
	}
};
DUMPER7_ASSERTS_UNoceLanternNiagaraHandler;

// Class GameNoce.NoceFogNiagaraHandler
// 0x0180 (0x0290 - 0x0110)
class UNoceFogNiagaraHandler final : public UNoceEnvHandler
{
public:
	class UNiagaraParameterCollectionInstance*    NPCEnvFog;                                         // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraParameterCollectionInstance*    NPAreaAllFog;                                      // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraParameterCollectionInstance*    NPHellSmoke;                                       // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollectionInstance*   MPCHellSmoke;                                      // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNoceFogNiagaraSetting                 OriginalParams;                                    // 0x0130(0x0088)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0xD8];                                     // 0x01B8(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFogNiagaraHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFogNiagaraHandler")
	}
	static class UNoceFogNiagaraHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFogNiagaraHandler>();
	}
};
DUMPER7_ASSERTS_UNoceFogNiagaraHandler;

// Class GameNoce.NoceWindHandler
// 0x00C8 (0x01D8 - 0x0110)
class UNoceWindHandler final : public UNoceEnvHandler
{
public:
	TArray<class UNeoWindComponent*>              TargetWindComponent;                               // 0x0110(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FNoceWindSetting                       CurrentParam;                                      // 0x0120(0x0048)(NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float WindSpeed, int32 AudioLevel)> OnUpdateEnvEvent;              // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FNoceWindSetting>    SettingMap;                                        // 0x0180(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWindHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWindHandler")
	}
	static class UNoceWindHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWindHandler>();
	}
};
DUMPER7_ASSERTS_UNoceWindHandler;

// Class GameNoce.NocePlayerSanityRecoverExecution
// 0x0000 (0x0040 - 0x0040)
class UNocePlayerSanityRecoverExecution final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerSanityRecoverExecution")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerSanityRecoverExecution")
	}
	static class UNocePlayerSanityRecoverExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerSanityRecoverExecution>();
	}
};
DUMPER7_ASSERTS_UNocePlayerSanityRecoverExecution;

// Class GameNoce.NoceFadeHandler
// 0x0090 (0x00B8 - 0x0028)
class UNoceFadeHandler : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LightLocation;                                     // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NearDistance;                                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FarDistance;                                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceLightFadeParameter                NearParameter;                                     // 0x0078(0x0008)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNoceLightFadeParameter                FarParameter;                                      // 0x0080(0x0008)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x30];                                      // 0x0088(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFadeHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFadeHandler")
	}
	static class UNoceFadeHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFadeHandler>();
	}
};
DUMPER7_ASSERTS_UNoceFadeHandler;

// Class GameNoce.NoceTabWidget
// 0x0018 (0x0318 - 0x0300)
class UNoceTabWidget : public UNoceUserWidgetBase
{
public:
	class UNoceUIActionImage*                     UITabLeft;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIActionImage*                     UITabRight;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceTabList*                           TabList;                                           // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class UUserWidget*> GetListSlots();
	void InitializeTab();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTabWidget")
	}
	static class UNoceTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTabWidget>();
	}
};
DUMPER7_ASSERTS_UNoceTabWidget;

// Class GameNoce.NoceMapTabWidget
// 0x0018 (0x0330 - 0x0318)
class UNoceMapTabWidget : public UNoceTabWidget
{
public:
	class UHorizontalBox*                         HorizontalBox;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeIn;                                            // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNoceMapTabChildWidget>     TabChildWidgetClass;                               // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void InitTabs(const TArray<class FText>& TabNames);
	void Show();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapTabWidget")
	}
	static class UNoceMapTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapTabWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapTabWidget;

// Class GameNoce.NoceLightFadeHandler
// 0x0018 (0x00D0 - 0x00B8)
class UNoceLightFadeHandler final : public UNoceFadeHandler
{
public:
	class ULocalLightComponent*                   TargetLightComp;                                   // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLightFadeHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLightFadeHandler")
	}
	static class UNoceLightFadeHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLightFadeHandler>();
	}
};
DUMPER7_ASSERTS_UNoceLightFadeHandler;

// Class GameNoce.NoceEmissiveFadeHandler
// 0x0020 (0x00D8 - 0x00B8)
class UNoceEmissiveFadeHandler final : public UNoceFadeHandler
{
public:
	class UMaterialInstanceDynamic*               TargetMI;                                          // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 EmissiveActor;                                     // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   EmissiveSMComp;                                    // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCPD;                                            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmissiveCPDIndex;                                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEmissiveFadeHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEmissiveFadeHandler")
	}
	static class UNoceEmissiveFadeHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEmissiveFadeHandler>();
	}
};
DUMPER7_ASSERTS_UNoceEmissiveFadeHandler;

// Class GameNoce.NoceEnvironmentSubsystem
// 0x0200 (0x0240 - 0x0040)
class UNoceEnvironmentSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ShowDebugInfo;                                     // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDetailDebugInfo;                               // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x1E];                                      // 0x004A(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNocePPVInfo>                   EmcompassedPPVs;                                   // 0x0068(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class APostProcessVolume*>             NocePPV;                                           // 0x0078(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnHeightFogUpdateDelegate;                         // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNoceHeightFogHandler*                  HeightFogHandler;                                  // 0x0098(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceVolumetricFogHandler*              VolumetricFogHandler;                              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(float Alpha, const struct FLinearColor& DarknessColor, float EdgeContrast, float EffectOffset)> OnDarknessUpdateDelegate; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNoceDarknessHandler*                   DarknessHandler;                                   // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceDirectionalLightHandler*           DirectionalLightHandler;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceSpotLightHandler*                  CharacterSweetLightHandler;                        // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSpotLightHandler*                  EnvSweetLightHandler;                              // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSpotLightHandler*                  MoonSweetLightHandler;                             // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSpotLightHandler*                  LanternPointLightHandler;                          // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSpotLightHandler*                  LanternVolumeLightHandler;                         // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSpotLightHandler*                  LanternMainLightHandler;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSpotLightHandler*                  NPCLanternPointLightHandler;                       // 0x0100(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPlayerHoldingLantern;                            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_109[0x17];                                     // 0x0109(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceSkyLightHandler*                   SkyLightHandler;                                   // 0x0120(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSkyAtmosphereHandler*              SkyAtmosphereHandler;                              // 0x0128(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSkyDomeHandler*                    SkyDomeHandler;                                    // 0x0130(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSSFSHandler*                       SSFSHandler;                                       // 0x0138(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLumenTranslucencyHandler*          LumenTranslucencyHandler;                          // 0x0140(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLanternNiagaraHandler*             NPCLanternNiagaraHandler;                          // 0x0148(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFogNiagaraHandler*                 FogNiagaraHandler;                                 // 0x0150(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(float WindSpeed, int32 AudioLevel)> OnWindUpdateDelegate;          // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNoceWindHandler*                       WindHandler;                                       // 0x0168(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, class UNoceFadeHandler*>          LightFadeHandlers;                                 // 0x0170(0x0050)(Protected, NativeAccessSpecifierProtected)
	int32                                         LightFadeIndex;                                    // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InvalidFadeCount;                                  // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasLoadedSaveData;                                 // 0x01C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    OnewayLightControlMap;                             // 0x01D0(0x0050)(SaveGame, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_220[0x20];                                     // 0x0220(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddHeightFogSetting(class FName RowName, const struct FNoceExpFogSetting& InData);
	void AddSkyLightSetting(class FName RowName, const struct FNoceSkyLightSetting& InData);
	void AddSpotLightSetting(class FName RowName, const struct FNoceSpotLightSetting& InData);
	void AddVolumeFogSetting(class FName RowName, const struct FNoceVolumetricFogSetting& InData);
	void ClearAllOnewayLightControl();
	void DebugRequestDarkness(bool Enable, class FName InRowName, const struct FNoceDarknessSetting& InData);
	void DebugRequestHeightFog(bool Enable, class FName RowName, const struct FNoceExpFogSetting& InData);
	void DebugRequestVolumeFog(bool Enable, class FName RowName, const struct FNoceVolumetricFogSetting& InData);
	void EnableLanternBlending(bool InEnable);
	void EnableLanternLightUpdate(bool InEnable);
	void ForceUpdateHandlersWithTargetLocation(bool NeedOverride, const struct FVector& InTargetLocation);
	class FName GetDirectionalLightRowName();
	float GetHeightFogEnemyInSightDistance();
	float GetHeightFogFadeDistance();
	class FName GetHeightFogRowName();
	float GetOnewayLightControlAlpha(const class FString& ObjectName);
	class FName GetSkyLightRowName();
	class FName GetSSFSRowName();
	class FName GetVolumetricFogRowName();
	int32 GetWindAudioLevel();
	bool HasAnyLanternSetting();
	bool HasOnewayLightControlSaved(const class FString& ObjectName);
	void OnDarknessUpdateEvent(float InAlpha, const struct FLinearColor& InDarknessColor, float InEdgeContrast, float InEffectOffset);
	void OnHeightFogUpdateEvent();
	void OnResumeFromSequence();
	void OnSpecialEnvironmentAdjustChanged(const class FString& SourceName, const class FString& CompStr, float InPriority, float InBlendWeight, class APostProcessVolume* InPPV);
	void OnWindUpdateEvent(float InWindSpeed, int32 InAudioLevel);
	void RegisterDarknessMaterial(class UMaterialParameterCollection* InMPC, class UObject* WorldContextObject);
	void RegisterDirectionalLight(class UDirectionalLightComponent* InDL);
	int32 RegisterEmissiveFade(class UMaterialInstanceDynamic* InMI, class AActor* InActor, const struct FNoceLightFadeFullSetting& InParam, bool InUseCPD, int32 InEmissiveCPDIndex);
	void RegisterLanternLight(class UPointLightComponent* InPL, ENoceLanternLightType InType);
	void RegisterLanternNiagara(class UNiagaraComponent* InNC);
	int32 RegisterLightFade(class ULocalLightComponent* InLL, const struct FNoceLightFadeFullSetting& InParam, bool PossibleConflict);
	void RegisterNPCLanternLight(class UPointLightComponent* InPL);
	void RegisterOnewayLightControl(const class FString& ObjectName, float InAlpha);
	void RegisterSkyAtmosphere(class USkyAtmosphereComponent* InSL);
	void RegisterSkyDome(class UMaterialInstanceDynamic* InMI, class AActor* InActor);
	void RegisterSkyLight(class USkyLightComponent* InSL);
	void RegisterSweetLight(class USpotLightComponent* InSL, ENoceSweetLightType InType);
	bool RegisterTargetFogComponent(class UExponentialHeightFogComponent* InComp);
	void RegisterVolumetricFogMaterial(class UStaticMeshComponent* InStaticMesh, bool IsFogTown);
	void RegisterWindSource(class UNeoWindComponent* InWind);
	void SetForceUseCameraLocation(bool InForce);
	void SetLanternBlending(class FName RowName, const struct FNoceSpotLightSetting& InData, float InBlendTime);
	void SetLightFadeDebugDraw(int32 InIndex, bool EnableDebugDraw);
	void SetLightFadeExtraIntensityAlpha(int32 InIndex, float InAlpha);
	void SetNocePPVBlendWeight(class FName TagName, float InBlendWeight);
	void SetNPCLanternExtraColorAlpha(float InAlpha);
	void SetNPCLanternExtraIntensityAlpha(float InAlpha);
	void SetPauseUpdate(bool InPauseHandler, bool InPauseFade);
	void SetPlayerLanternExtraIntensityAlpha(float InAlpha);
	void SetSweetLightExtraIntensityAlpha(float InAlpha);
	void UnregisterDarknessMaterial(class UMaterialParameterCollection* InMPC);
	void UnregisterDirectionalLight(class UDirectionalLightComponent* InDL);
	void UnregisterEmissiveFade(int32 InIndex);
	void UnregisterLanternLight(class UPointLightComponent* InPL, ENoceLanternLightType InType);
	void UnregisterLanternNiagara(class UNiagaraComponent* InNC);
	void UnregisterLightFade(int32 InIndex);
	void UnregisterNPCLanternLight(class UPointLightComponent* InPL);
	void UnregisterSkyAtmosphere(class USkyAtmosphereComponent* InSL);
	void UnregisterSkyDome(class UMaterialInstanceDynamic* InMI, class AActor* InActor);
	void UnregisterSkyLight(class USkyLightComponent* InSL);
	void UnregisterSweetLight(class USpotLightComponent* InSL, ENoceSweetLightType InType);
	void UnregisterTargetFogComponent(class UExponentialHeightFogComponent* InComp);
	void UnregisterVolumetricFogMaterial(class UStaticMeshComponent* InStaticMesh);
	void UnregisterWindSource(class UNeoWindComponent* InWind);
	void UpdateHeightFogWeight(class FName RowName, float InPriority, const class FString& PPVName, float InWeight);
	void UpdateSkyLightWeight(class FName RowName, float InPriority, const class FString& PPVName, float InWeight);
	void UpdateSweetLightWeight(class FName RowName, float InPriority, ENoceSweetLightType InType, const class FString& PPVName, float InWeight);
	void UpdateVolumeFogWeight(class FName RowName, float InPriority, const class FString& PPVName, float InWeight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnvironmentSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnvironmentSubsystem")
	}
	static class UNoceEnvironmentSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnvironmentSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceEnvironmentSubsystem;

// Class GameNoce.NoceNPCLookTargetComponent
// 0x00D0 (0x0300 - 0x0230)
class UNoceNPCLookTargetComponent final : public USceneComponent
{
public:
	float                                         EnableBlendTime;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableBlendTime;                                  // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadSocketName;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SpineSocketName;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LookTargetSocketName;                              // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LerpAlpha;                                         // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LengthRange;                                       // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchRange;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRange;                                          // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseDeadZone;                                       // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadZoneAngle;                                     // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseMaxLookDistance;                                // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxLookDistance;                                   // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x68];                                     // 0x0270(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceCheatManager*                      CheatManager;                                      // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACharacter*                             OwnerCharacter;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  LookTarget;                                        // 0x02E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  CachedLookTarget;                                  // 0x02F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AActor* GetCachedLookTarget();
	bool GetEnable();
	class AActor* GetLookTarget();
	struct FVector GetPreviousLookAtLocation();
	void SetEnable(bool InValue);
	void SetLookTarget(class AActor* InLookTarget);
	void SetUseDeadZone(bool InValue, float InAngle);
	void SetUseMaxLookDistance(bool InValue, float InMaxDistance);
	void Update(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNPCLookTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNPCLookTargetComponent")
	}
	static class UNoceNPCLookTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNPCLookTargetComponent>();
	}
};
DUMPER7_ASSERTS_UNoceNPCLookTargetComponent;

// Class GameNoce.NoceUIEndingWidgetData
// 0x0020 (0x0050 - 0x0030)
class UNoceUIEndingWidgetData final : public UDataAsset
{
public:
	TArray<struct FNoceUIEndingData>              Endings;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   UnknownText;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIEndingWidgetData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIEndingWidgetData")
	}
	static class UNoceUIEndingWidgetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIEndingWidgetData>();
	}
};
DUMPER7_ASSERTS_UNoceUIEndingWidgetData;

// Class GameNoce.NoceEnvNiagaraActor
// 0x0020 (0x02C0 - 0x02A0)
class ANoceEnvNiagaraActor : public ANiagaraActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bNeedSave;                                         // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSaved;                                            // 0x02A9(0x0001)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNiagaraVariable>               Saved_OverrideParameters;                          // 0x02B0(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, AdvancedDisplay, NativeAccessSpecifierPrivate)

public:
	bool IsLoadLoadRecordData() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnvNiagaraActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnvNiagaraActor")
	}
	static class ANoceEnvNiagaraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceEnvNiagaraActor>();
	}
};
DUMPER7_ASSERTS_ANoceEnvNiagaraActor;

// Class GameNoce.NoceNotebookContent
// 0x0008 (0x0308 - 0x0300)
class UNoceNotebookContent final : public UNoceUserWidgetBase
{
public:
	bool                                          IsNew;                                             // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(const bool InIsVisible, const bool InIsNew, bool InNeedTop, bool InNeedBottom, bool* NoUse);
	void InitImage(const bool InIsVisible, const bool InIsNew, const bool InIsDoodle, const struct FSoftObjectPath& InImage, bool* NoUse);
	void InitImageWithMask(const bool InIsVisible, const bool InIsNew, const bool InIsDoodle, const struct FSoftObjectPath& InImage, const struct FSoftObjectPath& InMask, bool* NoUse);
	void InitText(const bool InIsVisible, const bool InIsNew, bool InNeedTop, bool InNeedBottom, const class FText& InText, bool* NoUse);
	void OnFadeIn(bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotebookContent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotebookContent")
	}
	static class UNoceNotebookContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotebookContent>();
	}
};
DUMPER7_ASSERTS_UNoceNotebookContent;

// Class GameNoce.NoceEnvQueryTest_InSight
// 0x00F0 (0x02E8 - 0x01F8)
class UNoceEnvQueryTest_InSight final : public UEnvQueryTest
{
public:
	struct FEnvTraceData                          TraceData;                                         // 0x01F8(0x0040)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               TraceFromContext;                                  // 0x0238(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              ItemHeightOffset;                                  // 0x0270(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              ContextHeightOffset;                               // 0x02A8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           Context;                                           // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnvQueryTest_InSight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnvQueryTest_InSight")
	}
	static class UNoceEnvQueryTest_InSight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEnvQueryTest_InSight>();
	}
};
DUMPER7_ASSERTS_UNoceEnvQueryTest_InSight;

// Class GameNoce.NoceEnvVolumeFogActor
// 0x00B8 (0x0358 - 0x02A0)
class ANoceEnvVolumeFogActor : public AStaticMeshActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bNeedSave;                                         // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      FloatParams;                                       // 0x02B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLinearColor>        VectorParams;                                      // 0x0300(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, Protected, NativeAccessSpecifierProtected)
	bool                                          bSaved;                                            // 0x0350(0x0001)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsLoadLoadRecordData() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEnvVolumeFogActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEnvVolumeFogActor")
	}
	static class ANoceEnvVolumeFogActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceEnvVolumeFogActor>();
	}
};
DUMPER7_ASSERTS_ANoceEnvVolumeFogActor;

// Class GameNoce.NoceEventPauseWidget
// 0x0008 (0x03B8 - 0x03B0)
class UNoceEventPauseWidget final : public UNoceFocusableWidget
{
public:
	struct FGameplayTag                           HideShortcutTag;                                   // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEventPauseWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEventPauseWidget")
	}
	static class UNoceEventPauseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEventPauseWidget>();
	}
};
DUMPER7_ASSERTS_UNoceEventPauseWidget;

// Class GameNoce.NoceOmamoriDrawingSubsystem
// 0x0020 (0x0058 - 0x0038)
class UNoceOmamoriDrawingSubsystem final : public UNoceWorldSubsystem
{
public:
	class UNoceOmamoriDrawingDataAsset*           DataAsset;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FNoceOmamoriDrawingInfo>        OmamoriList;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint32                                        CurrentPoolNumber;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawOmamori(ENoceOmamoriDrawingType* out_Type, class FName* out_Name);
	int32 GetRequiredFaith();
	bool IsOmamoriLeft();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOmamoriDrawingSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOmamoriDrawingSubsystem")
	}
	static class UNoceOmamoriDrawingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOmamoriDrawingSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceOmamoriDrawingSubsystem;

// Class GameNoce.NoceUIDataTableMappingText
// 0x0080 (0x03F0 - 0x0370)
class UNoceUIDataTableMappingText final : public UNoceUIStyleTextBase
{
public:
	struct FLinearColor                           DefaultColor;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontOutlineSettings                   DefaultOutlineSetting;                             // 0x0378(0x0028)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 DefaultFontMaterial;                               // 0x03A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DataTablePath;                                     // 0x03C8(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextStyleKey;                                      // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTextStyleKey(int32 Key);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIDataTableMappingText")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIDataTableMappingText")
	}
	static class UNoceUIDataTableMappingText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIDataTableMappingText>();
	}
};
DUMPER7_ASSERTS_UNoceUIDataTableMappingText;

// Class GameNoce.NoceExtractAudioDurationTool
// 0x0010 (0x02A0 - 0x0290)
class ANoceExtractAudioDurationTool final : public AActor
{
public:
	TArray<class UDataTable*>                     SourceDialogLineTables;                            // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void WriteAudioDurationToDatatable(class UDataTable* InTable, class FName InRowName, bool ExtractJP, float duration);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceExtractAudioDurationTool")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceExtractAudioDurationTool")
	}
	static class ANoceExtractAudioDurationTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceExtractAudioDurationTool>();
	}
};
DUMPER7_ASSERTS_ANoceExtractAudioDurationTool;

// Class GameNoce.NoceEyeball
// 0x0070 (0x0098 - 0x0028)
class UNoceEyeball final : public UObject
{
public:
	uint8                                         Pad_28[0x70];                                      // 0x0028(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEyeball")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEyeball")
	}
	static class UNoceEyeball* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEyeball>();
	}
};
DUMPER7_ASSERTS_UNoceEyeball;

// Class GameNoce.NoceEyeballGroupComponent
// 0x0070 (0x0110 - 0x00A0)
class UNoceEyeballGroupComponent final : public UActorComponent
{
public:
	bool                                          Enabled;                                           // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNoceEyeball*>                   Eyeballs;                                          // 0x00A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         UpdateRange;                                       // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AngleLimit;                                        // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerLocationOffset;                              // 0x00C0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetChildTag;                                    // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAxis                                         LookAtAxis;                                        // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableRatio;                                       // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FollowRatio;                                       // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DelayFollow;                                       // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            DegreePerSecond;                                   // 0x00F0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RandomMovementTime;                                // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RandomMovementDegreeMax;                           // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FollowNoiseRatio;                                  // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CollectEyeballFromChildren();
	void RegisterEyeball(class AActor* InActor, bool FollowPlayer);
	void UnregisterEyeball(const class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceEyeballGroupComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceEyeballGroupComponent")
	}
	static class UNoceEyeballGroupComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceEyeballGroupComponent>();
	}
};
DUMPER7_ASSERTS_UNoceEyeballGroupComponent;

// Class GameNoce.NoceFloatIconSubsystem
// 0x00F0 (0x0120 - 0x0030)
class UNoceFloatIconSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnSettingChanged;                                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsShow)>   OnShowIconChanged;                                 // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class AActor*, class UNoceInteractIconBase*> InteractIconInUse;                             // 0x0050(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceInteractIconBase*>          InteractIconPool;                                  // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          CanShowInteractIcon;                               // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, class UNoceIndicatorIconBase*> IndicatorInUse;                               // 0x00B8(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceIndicatorIconBase*>         IndicatorPool;                                     // 0x0108(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearIconPool();
	ESlateVisibility GetActiveIndicatorVisiblity();
	bool IsShowIndicatorIcon();
	void RequestIndicatorIcon(class AActor* Owner, const struct FVector& IndicateLocation, bool IsActive);
	void RequestInteractIcon(class AActor* Owner, ENoceInteractIconState TargetState, const struct FVector& IconPosition, const class FText& PromptText);
	void SetCanShowInteractIcon(bool InCanShow);
	void SetShowIndicatorIcon(bool InEnable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFloatIconSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFloatIconSubsystem")
	}
	static class UNoceFloatIconSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFloatIconSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceFloatIconSubsystem;

// Class GameNoce.NoceOptionWidgetBase
// 0x0000 (0x03B0 - 0x03B0)
class UNoceOptionWidgetBase : public UNoceFocusableWidget
{
public:
	void ResetSettingToDefault(class UGameSetting* Setting);
	void SetSetting(class UGameSetting* InSetting, bool* NoUse);
	void SetSettings(const TArray<class UGameSetting*>& InSettings, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOptionWidgetBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOptionWidgetBase")
	}
	static class UNoceOptionWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOptionWidgetBase>();
	}
};
DUMPER7_ASSERTS_UNoceOptionWidgetBase;

// Class GameNoce.NoceOptionWidget
// 0x0468 (0x0818 - 0x03B0)
class UNoceOptionWidget final : public UNoceOptionWidgetBase
{
public:
	bool                                          CheckChangedAndSaveOnHide;                         // 0x03B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SaveOnHide;                                        // 0x03B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B2[0x66];                                     // 0x03B2(0x0066)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceGameSettingRegistry*               Registry;                                          // 0x0418(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameSetting*>                   VisibleSettings;                                   // 0x0430(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FGameSettingFilterState                FilterState;                                       // 0x0440(0x03A0)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FGameSettingFilterState>        FilterNavigationStack;                             // 0x07E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F0[0x10];                                     // 0x07F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceListView*                          ListView_Settings;                                 // 0x0800(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UGameSetting* Setting, const struct FGameplayTag& Action)> BP_OnExecuteNamedAction; // 0x0808(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void ApplyModifiedKeyBindings();
	void ApplyPendingChanges();
	void CheckChangedAndSave(bool Save);
	class UNoceListView* GetListView();
	class UGameSetting* GetSetting(class FName SettingDevName);
	void HandleKeyBindingModified();
	void OnSettingsDirtyStateChanged(bool bSettingsDirty);
	void SaveSettings();
	void SaveSystemSave();
	void SelectSetting(const class FName& SettingDevName);
	void SelectSettings(const TArray<class FName>& SettingDevNames);

	bool HaveSettingsBeenChanged() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOptionWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOptionWidget")
	}
	static class UNoceOptionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOptionWidget>();
	}
};
DUMPER7_ASSERTS_UNoceOptionWidget;

// Class GameNoce.NoceUIGameplayTagMappingText
// 0x01A0 (0x0510 - 0x0370)
class UNoceUIGameplayTagMappingText final : public UNoceUIStyleTextBase
{
public:
	TMap<struct FGameplayTag, class FText>        Texts;                                             // 0x0368(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultColor;                                      // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FLinearColor> Colors;                                           // 0x03C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFontOutlineSettings                   DefaultOutlineSetting;                             // 0x0418(0x0028)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FFontOutlineSettings> OutlineSettings;                          // 0x0440(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 DefaultFontMaterial;                               // 0x0490(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FNoceUIFontMaterialStruct> FontMaterials;                       // 0x04B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTextStyleByKey(const struct FGameplayTag& Key);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIGameplayTagMappingText")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIGameplayTagMappingText")
	}
	static class UNoceUIGameplayTagMappingText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIGameplayTagMappingText>();
	}
};
DUMPER7_ASSERTS_UNoceUIGameplayTagMappingText;

// Class GameNoce.NoceFocusablePage
// 0x0008 (0x03B8 - 0x03B0)
class UNoceFocusablePage : public UNoceFocusableWidget
{
public:
	class UWidgetAnimation*                       Default;                                           // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnSwitchInCompleted();
	void OnSwitchOutCompleted();
	void SwitchIn();
	void SwitchOut();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFocusablePage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFocusablePage")
	}
	static class UNoceFocusablePage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFocusablePage>();
	}
};
DUMPER7_ASSERTS_UNoceFocusablePage;

// Class GameNoce.NoceNpcCharacter
// 0x0060 (0x0D80 - 0x0D20)
class ANoceNpcCharacter : public ANoceCharacter
{
public:
	uint8                                         Pad_D20[0x10];                                     // 0x0D20(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceEnemyAnimInstance*                 NpcAnimInstance;                                   // 0x0D30(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRMLocomotion;                               // 0x0D38(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D39[0x47];                                     // 0x0D39(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Kill();
	void ResetMovementState();
	void SetRootMotionScale(float InScale);
	void TryCreateRecord();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNpcCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNpcCharacter")
	}
	static class ANoceNpcCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceNpcCharacter>();
	}
};
DUMPER7_ASSERTS_ANoceNpcCharacter;

// Class GameNoce.NoceFogControlComponent
// 0x0000 (0x00A0 - 0x00A0)
class UNoceFogControlComponent : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFogControlComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFogControlComponent")
	}
	static class UNoceFogControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFogControlComponent>();
	}
};
DUMPER7_ASSERTS_UNoceFogControlComponent;

// Class GameNoce.NoceFogNiagaraVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceFogNiagaraVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceFogNiagaraRowHandle               DataRow;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceFogNiagaraProgress>        DataByProgress;                                    // 0x00E0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFogNiagaraVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFogNiagaraVolumeComponent")
	}
	static class UNoceFogNiagaraVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFogNiagaraVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceFogNiagaraVolumeComponent;

// Class GameNoce.NoceFogVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceFogVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceHeightFogDataRowHandle            SanityMaxRow;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceExpFogProgress>            FogDataByProgress;                                 // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFogVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFogVolumeComponent")
	}
	static class UNoceFogVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFogVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceFogVolumeComponent;

// Class GameNoce.NocePauseWidget
// 0x0288 (0x0638 - 0x03B0)
class UNocePauseWidget : public UNoceFocusableWidget
{
public:
	class FText                                   EquipmentText;                                     // 0x03B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   EquipmentDesText;                                  // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   CollectibleText;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   CollectibleDesText;                                // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   MapText;                                           // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   MapDesText;                                        // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NotebookText;                                      // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NotebookDesText;                                   // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   OptionText;                                        // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   OptionDesText;                                     // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   TitleText;                                         // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   TitleDesText;                                      // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PopWindowDialogText;                               // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         EquipmentWidgetPath;                               // 0x0480(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         CollectibleWidgetPath;                             // 0x04A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         MapWidgetPath;                                     // 0x04C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         NotebookWidgetPath;                                // 0x04E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         OptionWidgetPath;                                  // 0x0500(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         PopWindowWidgetPath;                               // 0x0520(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MapIndex;                                          // 0x0540(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NotebookIndex;                                     // 0x0544(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CombatTags;                                        // 0x0548(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           HideShortcutTag;                                   // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BlackTop;                                          // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           CanvasPanel;                                       // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay;                                           // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePauseListWidget*                   WBP_PauseList;                                     // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOutToTitle;                                    // 0x0590(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ConfirmSound;                                      // 0x0598(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ConfirmErrorSound;                                 // 0x05A0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ToWorldSound;                                      // 0x05A8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x05B0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowFadeInSound;                              // 0x05B8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowFadeOutSound;                             // 0x05C0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               OptionFadeOutSound;                                // 0x05C8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsOpenByMap;                                       // 0x05D0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsOpenByNotebook;                                  // 0x05D1(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsOpenByEquipment;                                 // 0x05D2(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsToTitle;                                         // 0x05D3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceFocusableWidget*                   EquipmentWidget;                                   // 0x05D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   CollectibleWidget;                                 // 0x05E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   MapWidget;                                         // 0x05E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   NotebookWidget;                                    // 0x05F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   OptionWidget;                                      // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   CurrentWidget;                                     // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceFocusableWidget*>           AllPages;                                          // 0x0608(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UPauseListObject*>               CurrentObjs;                                       // 0x0618(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UNoceGeneralHintWidget*                 HintWidget;                                        // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePopWindowWidget*                   PopWindowWidget;                                   // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CreatePageWidget(const struct FSoftClassPath& Path, class UNoceFocusableWidget** NewWidget);
	bool DoToTitle();
	void ExecuteObj(class UPauseListObject* Obj);
	TArray<class UPauseListObject*> GetPauseListObjs();
	void HideChangeLevel();
	bool IsInCombat();
	bool IsInEquipment();
	bool IsInMap();
	bool IsInNotebook();
	bool IsInPage();
	void OnFadeOutToTitleCompleted();
	void OnListMouseConfirm(int32 Index_0);
	void OnOptionClosed();
	void OnPageClose();
	void OnPlayerEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnPopWindowClose();
	void PrepareSeamlessTravel();
	void ShowEquipment();
	void ShowMap();
	void ShowNotebook();
	void ToCollectible();
	void ToEquipment();
	void ToMap();
	void ToNotebook();
	void ToOption();
	void ToShortcutItem();
	void ToTitle();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePauseWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePauseWidget")
	}
	static class UNocePauseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePauseWidget>();
	}
};
DUMPER7_ASSERTS_UNocePauseWidget;

// Class GameNoce.NoceUIInputImage
// 0x0000 (0x02E0 - 0x02E0)
class UNoceUIInputImage final : public UImage
{
public:
	struct FNoceInputIconRowHandle                InputIconRowHandle;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetInputIcon(class FName IconName);
	void UpdateIcon();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIInputImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIInputImage")
	}
	static class UNoceUIInputImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIInputImage>();
	}
};
DUMPER7_ASSERTS_UNoceUIInputImage;

// Class GameNoce.NoceFootStepVFXDataAsset
// 0x00A0 (0x00D0 - 0x0030)
class UNoceFootStepVFXDataAsset final : public UDataAsset
{
public:
	struct FNoceFootStepVFXSurfaceTypeMap         DefaultSurfaceTypeMap;                             // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FNoceFootStepVFXSurfaceTypeMap> GameplayTagMap;                 // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFootStepVFXDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFootStepVFXDataAsset")
	}
	static class UNoceFootStepVFXDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFootStepVFXDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceFootStepVFXDataAsset;

// Class GameNoce.NoceNewGameWidget
// 0x0020 (0x03D0 - 0x03B0)
class UNoceNewGameWidget final : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void()>              StartGame;                                         // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          IsPlus;                                            // 0x03C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       FadeInNoBlack;                                     // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowNewGame(bool InIsPlus, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNewGameWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNewGameWidget")
	}
	static class UNoceNewGameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNewGameWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNewGameWidget;

// Class GameNoce.NoceFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CalculateAngleBetweenVector(const struct FVector& v1, const struct FVector& v2);
	static float CalculateDamageDirectionAngle(class AActor* InDamagedActor, const struct FVector& InHitPoint);
	static float CalculateDirectionAngle2D(const struct FVector& InForward, const struct FVector& InCenter, const struct FVector& InTarget);
	static void CalculateFootIKOffset(const class UAnimInstance* InAnimInstance, float DeltaSeconds, class FName LeftFootName, class FName RightFootName, float TraceUpDistance, float TraceDownDistance, bool UseMaxLeftRightDifference, float MaxLeftRightDifference, float MaxAdjustOffset, float InterpSpeed, float* OutLeftFootOffset, float* OutRightFootOffset);
	static struct FVector CalculateNormalFromPoints(const struct FVector& Point1, const struct FVector& Point2, const struct FVector& Point3);
	static int32 CalculateStringLineCount(const class FString& InString, int32 CharacterPerLine);
	static int32 CalculateStringLineCountByLetterWidth(const class FString& InString);
	static bool CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& orientation, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& orientation, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& orientation, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& orientation, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CheckActionLevel(ENoceActionLevel InActionLevel, int32 ActionLevelBitmask);
	static bool CheckDefiniteEndingType(class UObject* WorldContextObject, ENoceEndingType EndingType);
	static bool CheckGameActionLevel(class UObject* WorldContextObject, int32 ActionLevelBitmask);
	static bool CheckGameRiddleLevel(class UObject* WorldContextObject, int32 RiddleLevelBitmask);
	static bool CheckGameRound(class UObject* WorldContextObject, int32 GameRoundBitmask);
	static void CheckOnSlope(class UObject* WorldContextObject, const struct FVector& InMeshLocation, const TArray<EObjectTypeQuery>& InSlopeDetectObjectTypes, ECollisionChannel InPawnChannel, bool InDebugLog, bool* OutIsOnStair, ECollisionChannel* OutObjectType, struct FVector* OutHitLocation, struct FVector* OutHitNormal);
	static bool CheckPlayGoDownloadProgress(class UObject* WorldContextObject, const struct FGameplayTag& InProgressTag, bool IsAnyEndingCleared);
	static bool CheckRiddleLevel(ENoceRiddleLevel InRiddleLevel, int32 RiddleLevelBitmask);
	static bool CheckRound(ENoceRoundType InRoundType, int32 GameRoundBitmask);
	static bool CheckStoryEndingBranch(class UObject* WorldContextObject, int32 EndingBitmask);
	static struct FVector ClampLookAtLocation(class AActor* InTargetActor, class FName InSpineSocketName, const struct FVector& InLookAtLocation, const struct FVector& InTargetHeadLocation, float InLengthRange, float InPitchRange, float InYawRange, bool InDebugDraw);
	static void ClearMotionVector(class ANoceCharacter* InChar);
	static class AActor* CloneActor(class AActor* InputActor, class FName ActorName);
	static float ComputeInputAngle(class UObject* WorldContextObject, float InInputForward, float InInputRight);
	static float ComputeStairAngle(class ACharacter* InCharcter, const struct FVector& InHitNrmal);
	static void CorrectActorRotation_Direct(class AActor* InActor);
	static void DeactivateNiagara(class UNiagaraComponent* InNiagaraComponent, bool InDetachFromComponent);
	static void DelayDestroyActors(const TArray<class AActor*>& InData, float InDelaySeconds, const class UObject* WorldContextObject);
	static void DrawCircleArc(class UObject* WorldContextObject, const struct FVector& Center, float Radius, const struct FVector& Direction, float Degree, int32 Segments, const struct FLinearColor& LineColor, bool PersistentLines, float Lifetime, uint8 DepthPriority, float Thickness);
	static void DrawDebugArrowShift(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& LineColor, float ArrowSize, float Offset, float duration, float Thinkness);
	static void DrawDebugFan(class UObject* WorldContextObject, const struct FVector& Origi, const struct FVector& Direction, float MinRadius, float MaxRadius, float Degree, int32 Segments, const struct FLinearColor& LineColor, float Lifetime, uint8 DepthPriority, float Thickness);
	static void DrawDebugFanByCenter(class UObject* WorldContextObject, const struct FVector& Origi, const struct FVector& Center, float FrontDistance, float BackDistance, float Angle, const struct FLinearColor& LineColor, float Lifetime, uint8 DepthPriority, float Thickness);
	static void EnableMaterialSlots(bool bEnable, class USkeletalMeshComponent* InComp, const TArray<class FName>& InMatSlotNames);
	static bool Equal_ActorRecord(const struct FNoceActorRecord& A, const class UObject* B);
	static bool Equal_Record(const struct FNoceObjectRecord& A, const class UObject* B);
	static void ExecuteConsoleCmdFromSeqData(const struct FNoceSeqData& InData);
	static void ExecuteConsoleCommandWithTag(const class FString& Command, const class FString& Param, const class FName& InTagName);
	static void ExecuteSeqDataCmdWithTagForHighSpec(const class FString& Command, const struct FNoceSeqDataCmd& InData, const class FName& InTagName);
	static void ForceClothNextUpdateTeleport(class ANoceCharacter* InCharacter);
	static void ForceStopSlotAnimation(class UAnimInstance* InAnimInstance, float InBlendOutTime, class FName SlotNodeName);
	static struct FVector GenerateRandomForceVector_Hatcher100(const struct FNoceRandomForceVectorData& InData, float InTime, float DeltaTime, const struct FVector& Direction, const struct FVector& DirectionOffset, TArray<struct FVector>& OutRandomVectorStorage_Previous, TArray<struct FVector>& OutRandomVectorStorage_Next, TArray<struct FVector>& OutRandomVectorStorage_LocalTimer);
	static struct FVector GenerateRandomForceVector_TsukumoBody(const struct FNoceRandomForceVectorData& InData, float InTime, float DeltaTime, const struct FVector& Direction, const struct FVector& DirectionOffset, TArray<struct FVector>& OutRandomVectorStorage_Previous, TArray<struct FVector>& OutRandomVectorStorage_Next, TArray<struct FVector>& OutRandomVectorStorage_LocalTimer);
	static struct FVector GenerateRandomForceVector_TsukumoHair(const struct FNoceRandomForceVectorData& InData, float InTime, float DeltaTime, const struct FVector& Direction, const struct FVector& DirectionOffset, TArray<struct FVector>& OutRandomVectorStorage_Previous, TArray<struct FVector>& OutRandomVectorStorage_Next, TArray<struct FVector>& OutRandomVectorStorage_LocalTimer);
	static TArray<class FName> GetAllRoundSequenceNames(ENoceRoundType RoundType);
	static class FString GetAssetName(TSoftObjectPtr<class UObject> Obj);
	static class FString GetBinkUrlWithOutfitSuffix(class UObject* InWorldContextObject, const class FString& InURL);
	static void GetBPCDOMeshComponents(class UClass* InActorClass, TArray<class UMeshComponent*>* OutArray);
	static float GetCharacterSlopeAngle(class ACharacter* Character, const TArray<EObjectTypeQuery>& ObjectTypes, float SizeRatio, bool DebugDraw);
	static ENoceCineEventUserType GetCineEventUserTypeFromString(const class FString& InStr);
	static class UClass* GetClassFromAssetData(const struct FAssetData& InAssetData);
	static ECollisionEnabled GetCompCollisionType(class UPrimitiveComponent* InComp);
	static class FString GetCurrentChapterName(class UObject* WorldContextObject);
	static ENoceEndingType GetCurrentDefiniteEnding(class UObject* WorldContextObject);
	static ENoceEndingType GetCurrentEndingBranch(class UObject* WorldContextObject);
	static struct FGameplayTag GetCurrentProgress(class UObject* WorldContextObject);
	static class FString GetCVarCurrentValue(const class FString& InCVarName);
	static TArray<TSoftObjectPtr<class UObject>> GetDependencySoftObjPtr(class ULevelSequence* InSeq, TSubclassOf<class UObject> InClass);
	static float GetDiffDegree(const struct FVector& AnchorFoward, const struct FVector& Direction);
	static float GetForwardDiffDegree(class AActor* Anchor, const struct FVector& Check);
	static ENoceActionLevel GetGameActionLevel(class UObject* WorldContextObject);
	static ENoceRiddleLevel GetGameRiddleLevel(class UObject* WorldContextObject);
	static ENoceRoundType GetGameRound(class UObject* WorldContextObject);
	static float GetGlobalTimeDilationMultiplier(const class UObject* WorldContextObject);
	static ENoceHitReactionFourWayType GetHitReactionFourWay(class UObject* WorldContextObject, float InAngel);
	static ENoceHitReactionTwoWayType GetHitReactionTwoWay(class UObject* WorldContextObject, float InAngel);
	static struct FVector GetInputMappingVectorFromCameraRotate(const struct FRotator& InCameraRotator, float InInputForward, float InInputRight);
	static class FName GetMediaName(class UMediaPlayer* MediaPlayer);
	static bool GetNiagaraVariableBool(class UNiagaraComponent* NiagaraComponent, class FName InVariableName);
	static float GetNiagaraVariableFloat(class UNiagaraComponent* NiagaraComponent, class FName InVariableName);
	static struct FLinearColor GetNiagaraVariableLinearColor(class UNiagaraComponent* NiagaraComponent, class FName InVariableName);
	static struct FVector GetNiagaraVariableVector(class UNiagaraComponent* NiagaraComponent, class FName InVariableName);
	static class UNoceCheatManager* GetNoceCheatManager(class UObject* WorldContextObject);
	static class UNoceGameInstance* GetNoceGameInstance(class UObject* WorldContextObject);
	static class ANoceGameMode* GetNoceGameMode(class UObject* WorldContextObject);
	static class ANoceGameState* GetNoceGameState(class UObject* WorldContextObject);
	static class UNoceGlobalDelegates* GetNoceGlobalDelegates(const class UObject* WorldContextObject);
	static class ANocePlayerCharacter* GetNocePlayerCharater(class UObject* WorldContextObject);
	static bool GetPhysicsAssetCollision(class USkeletalMeshComponent* InSkeletalMesh, class FName InBoneName, ECollisionEnabled* OutCollisionEnabled);
	static class AActor* GetPlaySequenceStateSeqActor(const class UObject* WorldContextObject);
	static float GetPreSeamlessMontagePlayRate(class UAnimMontage* InMontage, float InDuration);
	static float GetPreSeamlessMotionWarppingDuration(class UAnimMontage* InMontage);
	static class FString GetPreviewLightSet(const class UObject* WorldContextObject);
	static float GetRBANAlphaRatio();
	static class FString GetSeqDataAssetPackageNameFromSeq(TSoftObjectPtr<class UMovieSceneSequence> PlaySeq);
	static class FName GetSequenceName(class ULevelSequencePlayer* SequencePlayer);
	static float GetSkirtSlopeAdjustRatio();
	static float GetSpineSocketRotationYaw(class AActor* InTargetActor, class FName InSpineSocketName);
	static class ANoceTimeManager* GetTimeManager(const class UObject* WorldContextObject, int32 PlayerIndex);
	static float GetTraceOffset(const class UAnimInstance* InAnimInstance, class FName SocketName, float TraceUpDistance, float TraceDownDistance, bool ShowDebug);
	static class UNoceWeaponSubsystem* GetWeaponSubSystem(const class UObject* WorldContextObject);
	static void HandleRestartGame(class UObject* WorldContextObject);
	static bool HasQualitySwitchNode(class UMaterial* InMaterial, class FString* Info);
	static bool IsActiveEffectHandleValid(const struct FActiveGameplayEffectHandle& InEffectHandle);
	static bool IsActiveMovieSceneExecutor();
	static bool IsActivePreloadSequenceAndSeqData();
	static bool IsActivePreloadSeqUpdateDataLayer();
	static bool IsActorOfClass(class AActor* Actor, const TSoftClassPtr<class UClass> Class_0);
	static bool IsForceJumpPlaybackPosByCmd(class UObject* WorldContextObject);
	static bool IsGame(const class UObject* WorldContextObject);
	static bool IsInEndGameProgress(class UObject* WorldContextObject);
	static bool IsInEvent(const class UObject* WorldContextObject);
	static bool IsInPartitionedWorld(const class UObject* WorldContextObject);
	static bool IsInPlaySequenceState(const class UObject* WorldContextObject);
	static bool IsNiagaraComplete(class UNiagaraComponent* InNiagaraComponent);
	static bool IsPlayerInputDirectionIsOppositeToCharacter(class UObject* WorldContextObject);
	static bool IsPointInFanShape(const struct FVector& Origin, const struct FVector& Direction, const struct FVector& TargetPoint, float Angle, float MinRadius, float MaxRadius);
	static bool IsProgressConditionMatch(class UObject* WorldContextObject, const struct FGameplayTagContainer& InProgressCondition, bool ExactProgress, const struct FGameplayTagContainer& InNeedAddTag, bool NeedAllAddTag, int32 NeedAddTagNum, const struct FGameplayTagContainer& InWithoutAddTag, bool WithoutAllTag);
	static bool IsShowDebugInfoForRBANBlending(const class UObject* WorldContextObject);
	static void KawaiiWarmUpForCharacter(class ANoceCharacter* InCharacter, int32 WarmUpFrames);
	static void MessageOpen(const class FString& Message);
	static bool MRQ_TriggerPlayStart(const struct FSoftObjectPath& InSeq);
	static void Noce_Seq_Trace_BookMark(class UObject* WorldContextObject, const class FString& InLogString);
	static void Noce_Trace_BookMark(const class FString& InLogString);
	static bool NoceCapsuleTraceSingleForObjectsFirstBlock(const class UObject* WorldContextObject, ECollisionChannel BlockChannel, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, class FName SkipTag, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool NoceLineTraceSingleForObjectsFirstBlock(const class UObject* WorldContextObject, ECollisionChannel BlockChannel, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, class FName SkipTag, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool NoceSphereTraceSingleForObjectsFirstBlock(const class UObject* WorldContextObject, ECollisionChannel BlockChannel, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, class FName SkipTag, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static void PlayerScarfResetDynmaics(class ANocePlayerCharacter* InPlayer, ETeleportType TeleportType);
	static void PlayerSkirtResetDynmaics(class ANocePlayerCharacter* InPlayer, ETeleportType TeleportType);
	static void ProcessSolveLumenGhostingCmds(const class FName& InSeqName);
	static float RandomFloatRange_ThreadSafe(float InSeed, float InMin, float InMax);
	static void RefreshNoceLightSavableData(const class UObject* WorldContextObject, const class ULightComponent* InLightComp, struct FNoceLightSavableData& OutData);
	static void ReplacePlayerCharMaterialByCharMeshType(class USkeletalMeshComponent* InComp, int32 ReplaceMatIndex, class UMaterialInterface* DefaultMat, class UMaterialInterface* PureWhite, class UMaterialInterface* PinkRabbit);
	static struct FGameplayTag RequestGameplayTagFromString(const class FString& InData);
	static void ResetConsoleCmdFromSeqData(const struct FNoceSeqData& InData);
	static void ResetDynamics(class ANoceCharacter* InCharacter, ETeleportType InTeleportType);
	static void ResetEnableHDROutput();
	static void ResetHDRUICompositeMode();
	static void ResetHDRUILevel();
	static void ResetSolveLumenGhostingCmds(const class FName& InSeqName);
	static void SearchActors(class UObject* WorldContextObject, class AActor* InSelfActor, const struct FVector& InDirection, float InRadius, float InHalfAngle, const TArray<EObjectTypeQuery>& ObjectTypes, TArray<class AActor*>* OutActors, bool DebugDraw);
	static void SearchEnemy(class UObject* WorldContextObject, class AActor* InSelfActor, float InRadius, float InHalfAngle, const struct FGameplayTag& InCountableTag, class AActor** OutActor, class UNocePlayerLookAtTargetComponent** OutLookAtTarget, bool DebugDraw, bool InForMotionWarp);
	static void SearchEnemyWithDirection(class UObject* WorldContextObject, class AActor* InSelfActor, const struct FVector& InDirection, float InRadius, float InHalfAngle, const struct FGameplayTag& InCountableTag, class AActor** OutActor, class UNocePlayerLookAtTargetComponent** OutLookAtTarget, bool DebugDraw, bool InForMotionWarp);
	static void SetActiveEffectHandleInvalid(struct FActiveGameplayEffectHandle& InEffectHandle);
	static void SetConstraintProfileForAll(class UAnimInstance* Instance, class FName ProfileName, bool bDefaultIfNotFound);
	static void SetCVarWithCurrentPriority(const class FString& InCVarName, const class FString& InCVarValue);
	static void SetEnableHDROutput(bool InIsEnable);
	static void SetEventMode(const class UObject* WorldContextObject, bool IsEnable, ENoceEventModeType EventType, ENoceCineEventUserType CineEventUserType);
	static void SetGlobalTimeDilationMultiplier(const class UObject* WorldContextObject, float TimeDilationMultiplier);
	static void SetHDRUICompositeMode(bool InIsEnable);
	static void SetHDRUILevel(float InLevel);
	static void SetNoceCustomPrimitiveDataFloat(class UPrimitiveComponent* InComp, int32 DataIndex, float Value);
	static void SetNoceCustomPrimitiveDataVector2(class UPrimitiveComponent* InComp, int32 DataIndex, const struct FVector2D& Value);
	static void SetNoceCustomPrimitiveDataVector3(class UPrimitiveComponent* InComp, int32 DataIndex, const struct FVector& Value);
	static void SetNoceCustomPrimitiveDataVector4(class UPrimitiveComponent* InComp, int32 DataIndex, const struct FVector4& Value);
	static void SetNoceScalarParameterForCustomPrimitiveData(class UPrimitiveComponent* InComp, class FName ParameterName, float Value);
	static void SetNoceVectorParameterForCustomPrimitiveData(class UPrimitiveComponent* InComp, class FName ParameterName, const struct FVector4& Value);
	static void SetPhysicsAssetCollision(class USkeletalMeshComponent* InSkeletalMesh, class FName InBoneName, ECollisionEnabled InCollisionEnabled);
	static void SetPhysicsAssetCollisions(class USkeletalMeshComponent* InSkeletalMesh, const TArray<class FName>& InBoneNames, ECollisionEnabled InCollisionEnabled);
	static void SetPlaySequenceStateSeqActor(const class UObject* WorldContextObject, class AActor* InSeqActor);
	static void SetSkeletalMeshAssetAndClearOverrideMat(class USkeletalMeshComponent* InComp, class USkeletalMesh* NewMesh);
	static void SetStaticMeshAssetAndClearOverrideMat(class UStaticMeshComponent* InComp, class UStaticMesh* NewMesh);
	static void SolvePhysicsPopping(class ANoceCharacter* InChar, int32 KawaiiWarmUpFrame, bool bResetPhysics);
	static void SolveSeamlessSeqBeginCopyPose(class USkeletalMeshComponent* InSkelComp, bool bResetPhysics);
	static ENoceRoundType StoryEndingBitToGameRound(int32 EndingBitmask);
	static class FString String_Remove(const class FString& InData, const class FString& InSuffix, ESearchDir SearchDir, ESearchCase SearchCase);
	static class FString TimeSecondsToMMSSString(const float InSeconds, const bool bInFloor);
	static void UnlockFOV(class UObject* WorldContextObject);
	static void UnsetConsoleCommandWithTag(const class FString& Command, const class FName& InTagName);
	static void UnsetSeqDataCmdWithTagForHighSpec(const class FString& Command, const class FName& InTagName);
	static void UpdateEveLightSet(const class UObject* WorldContextObject, const class FString& InSetName, bool bDoNotSwitchDataLayer);
	static void UpdateNoceLightCompPropertyFromSaveData(const class UObject* WorldContextObject, class ULightComponent* OutLightComp, const struct FNoceLightSavableData& InData);
	static void UpdateSeqDataAssetDataLayerForPreloadingSeq(TSoftObjectPtr<class ULevelSequence> PlaySeq);
	static void UpdateSlotWeight(const class UAnimInstance* InAnimInstance, class FName SlotNodeName, float InDeltaTime);
	static void UpdateWeight(const class UAnimInstance* InAnimInstance, const class UAnimMontage* InMontage, float InDeltaTime);
	static void VolumetricFogHistoryWeightOff();
	static void VolumetricFogHistoryWeightOn(float Weight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceFunctionLibrary")
	}
	static class UNoceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceFunctionLibrary;

// Class GameNoce.NoceGameClockSubsystem
// 0x0038 (0x0080 - 0x0048)
class UNoceGameClockSubsystem final : public UNoceTickableWorldSubsystem
{
public:
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DebugInfo;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomStopTick;                                    // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceFadeSubsystem*                     CacheFadeSystem;                                   // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        GameTimeSeconds;                                   // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        GameTimeSecondsExcludeEvent;                       // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	double GetPlayTimeSeconds() const;
	struct FTimespan GetPlayTimespanWithoutEvent() const;
	struct FTimespan GetPlayTimespawn() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameClockSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameClockSubsystem")
	}
	static class UNoceGameClockSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameClockSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceGameClockSubsystem;

// Class GameNoce.NoceGameInstance
// 0x00E0 (0x02A0 - 0x01C0)
class UNoceGameInstance : public UGameInstance
{
public:
	struct FGameplayTag                           GameSettingInitialTag;                             // 0x01C0(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpecifiedProgressTag;                              // 0x01C8(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ExactProgressTag;                                  // 0x01D0(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceRoundType                                SpecifiedRoundType;                                // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasEnteredTitle;                                   // 0x01D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoginSuccess;                                    // 0x01DA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSystemSaveReady;                                 // 0x01DB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceActionLevel                              CacheActionLevel;                                  // 0x01DC(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceRiddleLevel                              CacheRiddleLevel;                                  // 0x01DD(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceEndingType                               CacheEndingType;                                   // 0x01DE(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF[0x1];                                      // 0x01DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CacheClearEndingBitMask;                           // 0x01E0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENocePlayerOutfit                             CachePlayerOutfit;                                 // 0x01E4(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CacheViewdEventArray;                              // 0x01E8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         PeriodGameOverCount;                               // 0x01F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppIsInBackground;                                // 0x01FC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD[0x93];                                     // 0x01FD(0x0093)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        RootAssetAndClassInstances;                        // 0x0290(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void AddGameOverCount();
	void AddViewdEvent(class FName InEventName);
	void Clear();
	TArray<ENocePlayerOutfit> GetAvailableOutfits();
	struct FGameplayTag GetInitProgressTag();
	int32 GetPeriodGameOverCount();
	void HandleApplicationHasReactivated();
	void HandleApplicationWillDeactivate();
	bool HasAvailableOutfit(ENocePlayerOutfit OutfitType);
	bool HasBoosterPack();
	bool HasLimitedOmamori();
	bool IsViewdEvent(class FName InEventName);
	void ResetPeriodGameOverCount();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameInstance")
	}
	static class UNoceGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameInstance>();
	}
};
DUMPER7_ASSERTS_UNoceGameInstance;

// Class GameNoce.NoceLinkMotionComponent
// 0x0220 (0x02C0 - 0x00A0)
class alignas(0x10) UNoceLinkMotionComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class ULinkRequest* LinkRequest)> OnStartLinking;                  // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULinkRequest* LinkRequest)> OnStartLinked;                   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULinkRequest* LinkRequest)> OnEndLinked;                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULinkRequest* LinkRequest)> OnInterrupt;                     // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           DefaultLinkAbility;                                // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           BackwardLinkAbility;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceLinkAbilityDataAsset*              LinkDataAsset;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LinkGameplayEventTag;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetBlockLinkTagContainer;                       // 0x0100(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TargetPlayLinkAbilityTag;                          // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RobbedLinkEventTag;                                // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InterruptEventTag;                                 // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugIgnorePiority;                                // 0x0138(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CancelAbilityAndSwitchToCombo;                     // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULinkRequest*                           ExecRequest;                                       // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterMovementComponent*            MovementComp;                                      // 0x0148(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 MyMeshComp;                                        // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CacheConstBoneMesh;                                // 0x0158(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CacheBoneIndex;                                    // 0x0160(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OwnerMeshDefaultRelativeLocation;                  // 0x0168(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180[0x12C];                                    // 0x0180(0x012C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DrawDebug;                                         // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugDuration;                                 // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DrawDebugSize;                                     // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DebugSafeRange;                                    // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanLink(ELinkPriority InPriority);
	void EndConstPosition(float InRestoreRuration);
	void EndLinkMotion();
	ELinkPriority GetCurrentLinkPriority();
	TSubclassOf<class UGameplayAbility> GetLinkAbility(class AActor* TargetActor, class FName AbilityName);
	class AActor* GetLinkOwner();
	class AActor* GetLinkTarget();
	void GetTargetStartMotion(int32* BankID, int32* MotionID);
	bool IsConstPositionActive();
	bool IsCurrentExecutionType();
	bool NotifyInterrupted();
	void NotifyStartLinkMotion();
	bool RequestAttackerLinkAbility(class ANoceCharacter* LinkTarget, class FName ExAbilityName);
	bool RequestLinkMotion(class ULinkRequest* InReuest);
	bool RequestReject(class AActor* LinkTarget);
	void StartConstLocation(const struct FVector& Location, const struct FRotator& Rotator, float BlendTime, bool EnableSweep);
	void StartConstPosition(class ACharacter* ConstTarget, class ACharacter* ConstBoneOwner, class FName ConstBoneName, const struct FRotator& ConstOffsetRot, const struct FVector& ConstOffset, ENoceConstPositionMode ConstMode, float BlendTime, bool EnableSweep);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLinkMotionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLinkMotionComponent")
	}
	static class UNoceLinkMotionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLinkMotionComponent>();
	}
};
DUMPER7_ASSERTS_UNoceLinkMotionComponent;

// Class GameNoce.NoceGameMode
// 0x00A0 (0x0408 - 0x0368)
class ANoceGameMode : public AGameNoceGameModeBase
{
public:
	TMulticastInlineDelegate<void()>              OnGameInitialized;                                 // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          IsPlayerControllerReady;                           // 0x0378(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInitialStreamingReady;                           // 0x0379(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsGameInitialized;                                 // 0x037A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37B[0x35];                                     // 0x037B(0x0035)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableGameOverFlow;                                // 0x03B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWaitForRevive;                                    // 0x03B1(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENocePlayerType, class ANocePlayerCharacter*> PlayerTypeCharacterMap;                       // 0x03B8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool AnyStoryEndingCleared();
	bool CanEnterGameOverFlow();
	void EnableBasicDebugInfo(bool InValue);
	int32 GetAttackRightMaxCount();
	int32 GetAttackRightMaxCount_BP();
	class ANocePlayerCharacter* GetPlayerCharacterByType(ENocePlayerType InPlayerType);
	bool IsStoryEndingCleared(ENoceEndingType EndingType);
	bool IsWaitForRevive();
	void OnDynamicShadowEnableTimerUp();
	void OnGameInitializeBP();
	void OnInitGameBP();
	void OnPlayerReady();
	void OnStreamingFinish();
	void RegisterPlayerCharacter(ENocePlayerType InPlayerType, class ANocePlayerCharacter* InPlayerCharacter);
	void RequestGameOver();
	void RequestGameOver_BP();
	void RequestRestartMyGame();
	void RequestRestartMyGame_BP();
	void SetDebugPlayerAutoRevive(bool InValue);
	void SetDebugPlayerAutoRevive_BP(bool InValue);
	void SetEnableGameOverFlow(bool InValue);
	void SetStoryEndingCleared(ENoceEndingType EndingType);
	void SetWaitForRevive(bool InValue);
	void ToggleDebugInfo();

	bool IsInitializeCompleted() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameMode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameMode")
	}
	static class ANoceGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceGameMode>();
	}
};
DUMPER7_ASSERTS_ANoceGameMode;

// Class GameNoce.NoceOptionListItem
// 0x0008 (0x03C8 - 0x03C0)
class UNoceOptionListItem final : public UNoceScrollItemWidget
{
public:
	class UGameSetting*                           Setting;                                           // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool OnDisableChanged();
	bool OnSettingChanged();
	bool RefreshText();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOptionListItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOptionListItem")
	}
	static class UNoceOptionListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOptionListItem>();
	}
};
DUMPER7_ASSERTS_UNoceOptionListItem;

// Class GameNoce.NoceGameplayAbility
// 0x0020 (0x03D0 - 0x03B0)
class UNoceGameplayAbility : public UGameplayAbility
{
public:
	ENoceAbilityInputID                           AbilityInputID;                                    // 0x03B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AdditionalInputIDs;                                // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENoceAbilityInputID                           AbilityID;                                         // 0x03C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateAbilityOnGranted;                         // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateOnInput;                                  // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CB[0x5];                                      // 0x03CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameplayAbility")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameplayAbility")
	}
	static class UNoceGameplayAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameplayAbility>();
	}
};
DUMPER7_ASSERTS_UNoceGameplayAbility;

// Class GameNoce.NoceGameplayTagDataAsset
// 0x02F0 (0x0320 - 0x0030)
class UNoceGameplayTagDataAsset final : public UDataAsset
{
public:
	struct FGameplayTag                           Damage;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Link;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LinkMotionCoolDown;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LinkingConstPosition;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StaminaFine;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StaminaTired;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DodgeNormal;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DodgeRepeat;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DodgeRecently;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HealthFine;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HealthDanger;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HealthDead;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OnSlope;                                           // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Sprinting;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Battling;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyInSight;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HellMode;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChaseMode;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BossFightMode;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Invincible;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LockOnTarget;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SeeingEnemy;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           JustDodgeAnimCancel;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           JustDodgeCounter;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InSafeZone;                                        // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Linking;                                           // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KatanaAutoDefense;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Claw;                                              // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ClawG;                                             // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ClawAlterBackMark;                                 // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LocomotionFine;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LocomotionDanger;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LocomotionBattle;                                  // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateCounterable;                             // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateCounterableHint;                         // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateBreakDown;                               // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateDead;                                    // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateFakeDead;                                // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateResurrect;                               // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyLinkMotion;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyStateNoCostPlayerWeaponDurability;            // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyLockedByCamera;                               // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyNavLinkJump;                                  // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMAttack;                                   // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMAttack_HeavyAttack;                       // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMAttack_FocusAttack;                       // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMDeflect;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMCounter;                                  // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMAxeDefense;                               // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMAxeDefense_Success;                       // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMClawTransform;                            // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMClawAttrackSoul;                          // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMDodge;                                    // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMDodge1;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMDamage;                                   // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMDead;                                     // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMRespawn;                                  // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMLinkMotion;                               // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMInteract;                                 // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMLocomotion;                               // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMLocomotion_Idle;                          // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMLocomotion_IdleVar;                       // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMLocomotion_Walk;                          // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSMLocomotion_Run;                           // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFSM;                                         // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerChangeWeaponMotion;                   // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerUseShortcutItemMotion;                // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerHellModeDamageMotion;                 // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerClawGTransformToClawMotion;           // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerCustomUpperBodyMotion;                // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerChangeWeapon;                         // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerUseShortcutItem;                      // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerHellModeDamage;                       // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerClawGTrasformToClaw;                  // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerCustomUpperBody;                      // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerShiromukuRevive1;                     // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerShiromukuRevive2;                     // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerShiromukuRevive2UpdatePP;             // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilityPlayerShowShortcutItemUI;                   // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SanityToClawTransform;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FocusCharged;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageWinceToAdditive;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WeaponBreakForceKnockBack;                         // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageLimitHealth;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyLink;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyLinkExecution;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CorruptionLink;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CorruptionLinkExecution;                           // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OmamoriSnake;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OmamoriKagami;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventOmamoriKagami;                                // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OmamoriTanuki;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OmamoriDaisy;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OmamoriShrew;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameplayTagDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameplayTagDataAsset")
	}
	static class UNoceGameplayTagDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameplayTagDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceGameplayTagDataAsset;

// Class GameNoce.NoceGameProgressComponent
// 0x02A0 (0x04C0 - 0x0220)
class UNoceGameProgressComponent final : public USMStateMachineComponent
{
public:
	uint8                                         Pad_220[0x4];                                      // 0x0220(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ProgressTag;                                       // 0x0224(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalProgressTag;                             // 0x0230(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ExactProgressTag;                                  // 0x0250(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_258[0x61];                                     // 0x0258(0x0061)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          OverrideProgressDataFromWorldSetting;              // 0x02B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTagContainer>          SavableProgressForDevelop;                         // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          CurrentProgressSavable;                            // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InitialProgressTag;                                // 0x02D4(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           InitExactTag;                                      // 0x02DC(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceRoundType                                InitRoundType;                                     // 0x02E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DataLayerTable;                                    // 0x02E8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x1D0];                                    // 0x02F0(0x01D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddAdditionalProgressTag(const struct FGameplayTag& InTag, ENoceProgressType InType, const class FString& Reason);
	struct FGameplayTagContainer GetAdditionalProgressTag();
	struct FGameplayTagContainer GetHistoryAdditionalProgressTag();
	struct FGameplayTagContainer GetHistoryProgressTag();
	struct FGameplayTag GetProgressTag();
	struct FGameplayTag GetStateMachineProgressTag();
	bool HasAdditionalTagInHistory(const struct FGameplayTag& InTag, bool ExactMatch);
	bool HasAllAdditionalTag(const struct FGameplayTagContainer& InTagContainer);
	bool HasAnyAdditionalTag(const struct FGameplayTagContainer& InTagContainer);
	bool HasTagInHistory(const struct FGameplayTag& InTag, bool ExactMatch);
	void OnProgressStateBegin(const struct FGameplayTag& StartCondition);
	void RefreshDataLayerStatus();
	bool RemoveAdditionalProgressTag(const struct FGameplayTag& InTag);
	bool RemoveAdditionalProgressTags(const struct FGameplayTagContainer& InTagContainer);
	bool SetProgressTag(const struct FGameplayTag& InTag, ENoceProgressType InType, const class FString& Reason);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameProgressComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameProgressComponent")
	}
	static class UNoceGameProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameProgressComponent>();
	}
};
DUMPER7_ASSERTS_UNoceGameProgressComponent;

// Class GameNoce.NoceLocalPlayer
// 0x0008 (0x02B8 - 0x02B0)
class UNoceLocalPlayer final : public ULocalPlayer
{
public:
	class UNoceSaveSubsystem*                     SaveSystem;                                        // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UNoceSystemSaveGame* GetSharedSettings();

	class UNoceLocalGameUserSettings* GetLocalSettings() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLocalPlayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLocalPlayer")
	}
	static class UNoceLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLocalPlayer>();
	}
};
DUMPER7_ASSERTS_UNoceLocalPlayer;

// Class GameNoce.NoceGameProgressDataAsset
// 0x0028 (0x0058 - 0x0030)
class UNoceGameProgressDataAsset final : public UDataAsset
{
public:
	class UDataTable*                             DataLayerTable;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USMInstance>                StateMachineClass;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USubSMInstance>>     SubStateMachineClass;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InitialProgressTag;                                // 0x0050(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameProgressDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameProgressDataAsset")
	}
	static class UNoceGameProgressDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameProgressDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceGameProgressDataAsset;

// Class GameNoce.NoceNotebookTabWidget
// 0x00D8 (0x03F0 - 0x0318)
class UNoceNotebookTabWidget : public UNoceTabWidget
{
public:
	class UNoceTabChildWidget*                    WBP_NoteB_TabChild;                                // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceTabChildWidget*                    WBP_NoteB_TabChild_1;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceTabChildWidget*                    WBP_NoteB_TabChild_2;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceTabChildWidget*                    WBP_NoteB_TabChild_3;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceTabChildWidget*                    WBP_NoteB_TabChild_4;                              // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_1;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_2;                                          // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_3;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_4;                                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   CharacterText;                                     // 0x0360(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   EnemyText;                                         // 0x0370(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   InfoText;                                          // 0x0380(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PuzzleText;                                        // 0x0390(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   TutorialText;                                      // 0x03A0(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceTabChildWidget*>            AllTabChildren;                                    // 0x03B0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceNotebookType>                     AllTabChildTypes;                                  // 0x03C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class USpacer*>                        AllSpacers;                                        // 0x03D0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceNotebookType>                     CurrentTabTypes;                                   // 0x03E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	ENoceNotebookType GetCurrentTabType();
	void ResetList(ENoceNotebookType DefaultType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotebookTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotebookTabWidget")
	}
	static class UNoceNotebookTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotebookTabWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNotebookTabWidget;

// Class GameNoce.NoceGameProgressInterface
// 0x0000 (0x0000 - 0x0000)
class INoceGameProgressInterface final
{
public:
	bool AddAdditionalProgressTag(const struct FGameplayTag& InTag, ENoceProgressType InType, const class FString& Reason);
	struct FGameplayTagContainer GetAdditionalProgressTagContainer();
	struct FGameplayTag GetBGMProgressTag();
	struct FGameplayTagContainer GetHistoryAdditionalProgressTagContainer();
	struct FGameplayTagContainer GetHistoryProgressTagContainer();
	bool GetManipulatedProgress();
	struct FGameplayTag GetNewGameProgressTag();
	struct FGameplayTag GetProgressTag();
	struct FGameplayTag GetStateMachineProgressTag();
	bool HasAdditionalTag(const struct FGameplayTag& TargetTag);
	bool HasAllAdditionalTag(const struct FGameplayTagContainer& TargetTag);
	bool HasAnyAdditionalTag(const struct FGameplayTagContainer& TargetTag);
	bool IsInDarkShrine();
	bool IsInEnding();
	bool IsInEndingBranchDecidedChapter();
	bool IsInExplore();
	bool IsInHellMode();
	bool IsInMainStory();
	bool IsProgressReady();
	bool MatchProgressTag(const struct FGameplayTag& TargetTag);
	bool RemoveAdditionalProgressTag(const struct FGameplayTag& InTag);
	bool RemoveAdditionalProgressTags(const struct FGameplayTagContainer& InTagContainer);
	bool RemoveLeafAdditionalTags(const struct FGameplayTag& InParentTag);
	void SetBGMProgressTag(const struct FGameplayTag& InTag);
	bool SetProgressTag(const struct FGameplayTag& InTag, ENoceProgressType InType, const class FString& Reason);
	bool UsedProgressDebug();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameProgressInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameProgressInterface")
	}
	static class INoceGameProgressInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceGameProgressInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceGameProgressInterface;

// Class GameNoce.NoceGameSettingDiscreteDynamic_OnOff
// 0x0000 (0x01A0 - 0x01A0)
class UNoceGameSettingDiscreteDynamic_OnOff final : public UGameSettingValueDiscreteDynamic_Bool
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameSettingDiscreteDynamic_OnOff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameSettingDiscreteDynamic_OnOff")
	}
	static class UNoceGameSettingDiscreteDynamic_OnOff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameSettingDiscreteDynamic_OnOff>();
	}
};
DUMPER7_ASSERTS_UNoceGameSettingDiscreteDynamic_OnOff;

// Class GameNoce.NoceGameSettingDiscreteDynamic_ToggleHold
// 0x0000 (0x01A0 - 0x01A0)
class UNoceGameSettingDiscreteDynamic_ToggleHold final : public UGameSettingValueDiscreteDynamic_Bool
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameSettingDiscreteDynamic_ToggleHold")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameSettingDiscreteDynamic_ToggleHold")
	}
	static class UNoceGameSettingDiscreteDynamic_ToggleHold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameSettingDiscreteDynamic_ToggleHold>();
	}
};
DUMPER7_ASSERTS_UNoceGameSettingDiscreteDynamic_ToggleHold;

// Class GameNoce.NoceMainmenuWidget
// 0x0138 (0x04E8 - 0x03B0)
class UNoceMainmenuWidget final : public UNoceFocusableWidget
{
public:
	class UWidgetAnimation*                       FadeInFromTitle;                                   // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       MenuDefault;                                       // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   NewGameText;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ContinueText;                                      // 0x03D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   LoadText;                                          // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   OptionText;                                        // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   EndingListText;                                    // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExitGameText;                                      // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ChapterText;                                       // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ChapterText2;                                      // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   CombatText;                                        // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   DemoText;                                          // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   JPTestText0;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   JPTestText1;                                       // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   JPTestText2;                                       // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   JPTestText3;                                       // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ConfirmSound;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               CancelSound;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ToWorldSound;                                      // 0x04B0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         DevInfoWidgetPath;                                 // 0x04B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D8[0x10];                                     // 0x04D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_NewGameWidgetByIntent(bool InIsContinue);
	void BP_SeamlessTravel();
	void ClearCancelAction();
	TArray<class UMainMenuListObject*> CreateChapterListObjs(const TArray<class FText>& ChapterNames);
	bool CreateDevInfo();
	TArray<class UMainMenuListObject*> CreateExploreListObjs(const TArray<class FText>& ExploreNames);
	void ExecuteObj(class UMainMenuListObject* Obj);
	TArray<class UMainMenuListObject*> GetMainMenuListObjs();
	bool HasContinue();
	void SetupCancelActionToMainMenu();
	bool ToChapter();
	bool ToChapterMenu();
	bool ToChapterMenu2();
	bool ToCombatTest();
	bool ToContinue();
	bool ToDemo();
	bool ToEndingList();
	bool ToExitGame();
	bool ToExplore();
	bool ToExploreMenu();
	bool ToJPTest0();
	bool ToJPTest1();
	bool ToJPTest2();
	bool ToJPTest3();
	bool ToLoadGamePanel();
	bool ToMainMenu();
	bool ToNewGame();
	bool ToOption();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMainmenuWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMainmenuWidget")
	}
	static class UNoceMainmenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMainmenuWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMainmenuWidget;

// Class GameNoce.NoceGameSettingFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceGameSettingFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ExecuteSettingAction(class UGameSettingAction* Action, bool MarkAsDirty);
	static class FText GetOptionText(const class FString& InKey);
	static class FText GetOptionTextWithTableID(const class FName& InTableID, const class FString& InKey);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameSettingFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameSettingFunctionLibrary")
	}
	static class UNoceGameSettingFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameSettingFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceGameSettingFunctionLibrary;

// Class GameNoce.NocePendantLightPostAnimInst
// 0x0040 (0x03B0 - 0x0370)
class UNocePendantLightPostAnimInst final : public UAnimInstance
{
public:
	float                                         WindSpeed;                                         // 0x0368(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WindSpeedRatio;                                    // 0x036C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Frequency;                                         // 0x0370(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForceSeed;                                         // 0x0378(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Force;                                             // 0x0390(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float ComputeForce(float Seed) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePendantLightPostAnimInst")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePendantLightPostAnimInst")
	}
	static class UNocePendantLightPostAnimInst* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePendantLightPostAnimInst>();
	}
};
DUMPER7_ASSERTS_UNocePendantLightPostAnimInst;

// Class GameNoce.NoceGameSettingRegistry
// 0x0030 (0x00E0 - 0x00B0)
class UNoceGameSettingRegistry final : public UGameSettingRegistry
{
public:
	class UGameSettingCollection*                 InitialSettings;                                   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSettingCollection*                 InitialDisplaySettings;                            // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSettingCollection*                 GraphicsSettings;                                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSettingCollection*                 AudioSettings;                                     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSettingCollection*                 ControlSettings;                                   // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSettingCollection*                 LanguageSettings;                                  // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_Init(class ULocalPlayer* InLocalPlayer);
	void BP_SaveChanges();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameSettingRegistry")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameSettingRegistry")
	}
	static class UNoceGameSettingRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameSettingRegistry>();
	}
};
DUMPER7_ASSERTS_UNoceGameSettingRegistry;

// Class GameNoce.NoceGameStateBase
// 0x0000 (0x02E8 - 0x02E8)
class ANoceGameStateBase : public AGameStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameStateBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameStateBase")
	}
	static class ANoceGameStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceGameStateBase>();
	}
};
DUMPER7_ASSERTS_ANoceGameStateBase;

// Class GameNoce.NoceGameState
// 0x0178 (0x0460 - 0x02E8)
class ANoceGameState : public ANoceGameStateBase
{
public:
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& NewTag)> OnGameProgressInitialized;     // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& NewTag)> OnGameProgressChanged;         // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& NewTag)> OnGameProgressAdditionalTagChanged; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          InitializeGameProgressOnBeginPlay;                 // 0x0320(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartStateOnPlayerReady;                           // 0x0321(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceGameProgressComponent*             GameProgress;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DarkShrineChapters;                                // 0x0330(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DarkHinakoBaseChapters;                            // 0x0350(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DarkHinakoNewRoundChapters;                        // 0x0370(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ExploreTagRoot;                                    // 0x0390(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           MainStoryTagRoot;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           StartNewGameTag;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  EndingChapters;                                    // 0x03A8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  EndingBranchDecidedChapters;                       // 0x03C8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  Chapters;                                          // 0x03E8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  EndGameProgress;                                   // 0x0408(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  HellModeGameProgress;                              // 0x0428(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          IsActivatedByDistance;                             // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SyncLocationInterval;                              // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x10];                                     // 0x0450(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FGameplayTag GetGameProgressTag();
	class USMStateInstance_Base* GetProgressStateInstanceStack(TSubclassOf<class USMStateInstance> StateClass, bool bCheckNested, bool bIncludeChildren);
	bool IsDarkHinakoChapter(const struct FGameplayTag& InTag, ENoceRoundType InRound);
	bool IsDarkShrine(const struct FGameplayTag& InTag);
	bool IsEnding(const struct FGameplayTag& InTag);
	bool IsEndingBranchDecidedChapter(const struct FGameplayTag& InTag);
	bool IsExploreMode(const struct FGameplayTag& InTag);
	bool IsHellMode(const struct FGameplayTag& InTag);
	bool IsInChapter(ENoceChapterType InChapterType);
	bool IsInEndGame();
	bool IsMainStory(const struct FGameplayTag& InTag);
	void OnGameInitialized();
	void OnPlayerReady();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameState")
	}
	static class ANoceGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceGameState>();
	}
};
DUMPER7_ASSERTS_ANoceGameState;

// Class GameNoce.NoceMapFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceMapFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UNoceMapTrackerComponent* GetNoceMapTracker(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapFunctionLibrary")
	}
	static class UNoceMapFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceMapFunctionLibrary;

// Class GameNoce.NoceGameViewportClient
// 0x0000 (0x03B0 - 0x03B0)
class UNoceGameViewportClient final : public UGameViewportClient
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGameViewportClient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGameViewportClient")
	}
	static class UNoceGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGameViewportClient>();
	}
};
DUMPER7_ASSERTS_UNoceGameViewportClient;

// Class GameNoce.NocePostProcessAnimInstance
// 0x0190 (0x0500 - 0x0370)
#pragma pack(push, 0x1)
class alignas(0x10) UNocePostProcessAnimInstance : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceEnemyAnimInstance*                 MyABP;                                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFootIK;                                         // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootIKAlpha;                                       // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKInterpSpeed;                                 // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKInterpScale;                                 // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKInterpSpeed_Current;                         // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootIKAlpha_Curve;                                 // 0x0394(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootIKAlpha_Curve_Meta;                            // 0x039C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurLeftFootOffset;                                 // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurRightFootOffset;                                // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftFootName;                                      // 0x03AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightFootName;                                     // 0x03B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKTraceUpDistance;                             // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKTraceDownDistance;                           // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKBlendSpeed;                                  // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKMaxLeftRightDifference;                      // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootIKUseMaxDifference;                            // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootIKMaxAdjustOffset;                             // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLookAt;                                         // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D5[0xB];                                      // 0x03D5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LookAtTransform;                                   // 0x03E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtRerouteBone;                                 // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtEnableBlendTime;                             // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtDisableBlendTime;                            // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddHitReactionActive;                              // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitReactionAlpha;                                  // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitReactionControlTransform;                       // 0x0460(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLinkIK;                                         // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinkIKAplha;                                       // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinkOffsetAlignGroundWeight;                       // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePoseDriver;                                     // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PoseDriverBlendTime;                               // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPhysAlpha;                                     // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HairPhysAlpha;                                     // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReplaceTransferBoneVelocities;                    // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReplaceWorldCollision;                            // 0x04DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             ReplaceWorldCollisionChannel;                      // 0x04DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DF[0x1];                                      // 0x04DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetupLookAtComponent();
	void UpdateApplyFootIK();
	void UpdateApplyLookAtIK(float DeltaTime);
	void UpdateApplyPoseDriverIK();
	void UpdateFootIK(float DeltaSeconds);
	void UpdateRigidbody();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePostProcessAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePostProcessAnimInstance")
	}
	static class UNocePostProcessAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePostProcessAnimInstance>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UNocePostProcessAnimInstance;

// Class GameNoce.NoceNPCPostProcessAnimInstance
// 0x0000 (0x0500 - 0x0500)
class UNoceNPCPostProcessAnimInstance : public UNocePostProcessAnimInstance
{
public:
	class UNoceNPCLookTargetComponent*            LookAtComponent;                                   // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNPCPostProcessAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNPCPostProcessAnimInstance")
	}
	static class UNoceNPCPostProcessAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNPCPostProcessAnimInstance>();
	}
};
DUMPER7_ASSERTS_UNoceNPCPostProcessAnimInstance;

// Class GameNoce.NoceGASFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceGASFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FGameplayAbilitySpecHandle GetPrimaryAbilityHandleFromClass(class UAbilitySystemComponent* AbilitySystemComponent, TSubclassOf<class UGameplayAbility> InAbilityClass);
	static class UNoceGameplayAbility* GetPrimaryAbilityInstanceFromClass(class UAbilitySystemComponent* AbilitySystemComponent, TSubclassOf<class UGameplayAbility> InAbilityClass);
	static class UNoceGameplayAbility* GetPrimaryAbilityInstanceFromHandle(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& Handle);
	static bool IsPrimaryAbilityInstanceActive(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& Handle);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGASFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGASFunctionLibrary")
	}
	static class UNoceGASFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGASFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceGASFunctionLibrary;

// Class GameNoce.NoceGA_DetectEnemyInSight
// 0x0070 (0x0440 - 0x03D0)
class UNoceGA_DetectEnemyInSight : public UNoceGameplayAbility
{
public:
	bool                                          EnemyInSight;                                      // 0x03D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SeeingEnemy;                                       // 0x03D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D2[0x2];                                      // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateInterval;                                    // 0x03D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnemyCapsuleRadiusRatio;                           // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BackSideDiffDistance;                              // 0x03DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeaveEnemyInSightDistance;                         // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnemyAmbushDistance;                               // 0x03E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CombatWaveEnemyDeadCount;                          // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         EngagedEnemies;                                    // 0x03F0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         SeeingEnemies;                                     // 0x0400(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         SeeingResurrectEnemies;                            // 0x0410(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x20];                                     // 0x0420(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void End();
	void HandleCombatAmbushed();
	void HandleCombatEnded();
	void HandleCombatEngaged();
	void HandleCombatEscaped();
	void HandleCombatWave();
	void HandleSeeingResurrectEnemies();
	void Initialize();
	void OnEnemyInSightChanged(bool NewEnemyInSight);
	void OnPlayerDamaged(class AActor* InAttacker, class FName InComboName, float InHealthDamager);
	void OnSeeingEnemyChanged(bool NewSeeingEnemey);
	void Update();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGA_DetectEnemyInSight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGA_DetectEnemyInSight")
	}
	static class UNoceGA_DetectEnemyInSight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGA_DetectEnemyInSight>();
	}
};
DUMPER7_ASSERTS_UNoceGA_DetectEnemyInSight;

// Class GameNoce.NoceGeneralHintWidget
// 0x00C0 (0x03A0 - 0x02E0)
class UNoceGeneralHintWidget : public UUserWidget
{
public:
	class UNoceNotificationPartWidget*            WBP_Notification_TopPart;                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAnimWidget*                        WBP_Notification_Line;                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotificationPartWidget*            WBP_Notification_BottomPart;                       // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   NotebookUpdateText;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NotebookUpdateTextInGimmick;                       // 0x0308(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ViewNotebookDetailText;                            // 0x0318(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         NotebookUpdateDuration;                            // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceUIGeneralHintData>         HintData;                                          // 0x0330(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FNoceUIGeneralHintData                 CurrentData;                                       // 0x0340(0x0030)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FNoceUIGeneralHintData                 LastNotebookData;                                  // 0x0370(0x0030)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool GetFirstNotebookIDInfo(ENoceNotebookType* OutType, class FName* OutID);
	void Hide();
	void HideHint(const class FText& InText);
	void HideLine();
	void OnEnterEvent();
	void OnSettingChanged(class UNoceSystemSaveGame* SystemSave);
	void OnUsingGimmick(bool IsUsing);
	void Show();
	void ShowHint(const class FText& InText, float InDuration);
	void ShowNotebookUpdateWithID(ENoceNotebookType InType, class FName InNotebookID);
	void ShowTutorial(class FName InNotebookID, bool InHasNotebookID, const class FText& InText, float InDuration, ENoceNotebookType InType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGeneralHintWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGeneralHintWidget")
	}
	static class UNoceGeneralHintWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGeneralHintWidget>();
	}
};
DUMPER7_ASSERTS_UNoceGeneralHintWidget;

// Class GameNoce.NocePrepRoomPickupsRuleDataAsset
// 0x0050 (0x0080 - 0x0030)
class UNocePrepRoomPickupsRuleDataAsset final : public UDataAsset
{
public:
	TArray<struct FNoceConsumableDataRowHandle>   Consumables;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ConsumableFactors;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxHealthFactor;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthFactor;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoceConsumableDataRowHandle>   Weapons;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeaponFactors;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DurabilityFactor;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePrepRoomPickupsRuleDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePrepRoomPickupsRuleDataAsset")
	}
	static class UNocePrepRoomPickupsRuleDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePrepRoomPickupsRuleDataAsset>();
	}
};
DUMPER7_ASSERTS_UNocePrepRoomPickupsRuleDataAsset;

// Class GameNoce.NoceGlobalDelegates
// 0x00A0 (0x00C8 - 0x0028)
class UNoceGlobalDelegates final : public UObject
{
public:
	TMulticastInlineDelegate<void()>              OnEnterEventDelegate;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitEventDelegate;                               // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Attacker, class FName ComboName, float InHealthDamage)> OnPlayerDamageDelegate; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsUsing)>  OnUsingGimmickDelegate;                            // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEnterExamineDelegate;                            // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitExamineDelegate;                             // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOpenNotebookDelegate;                            // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitNotebookDelegate;                            // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName DataRowName)> OnSkipSequenceDelegate;                  // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          InEvent;                                           // 0x00B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceEventModeType                            EventModeType;                                     // 0x00B9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceCineEventUserType                        CineEventUserType;                                 // 0x00BA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UsingGimmick;                                      // 0x00BB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InExamineMode;                                     // 0x00BC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InNotebook;                                        // 0x00BD(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PlaySeqStateSeqActor;                              // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleGameInstanceShutdown();
	bool IsInExamineMode();
	bool IsInNotebookOpen();
	bool IsUsingGimmick();
	void OnHandleSkipSequence(class FName InDataRowName);
	void ResetEventState();
	void ResetStatus();
	void SetExamineMode(bool IsEnable);
	void SetInEvent(bool IsEnable, ENoceEventModeType InEventModeType, ENoceCineEventUserType InCineEventUserType);
	void SetNotebookOpen(bool IsOpen);
	void SetPlaySequenceStateSeqActor(class AActor* InSeqActor);
	void SetUsingGimmick(bool InValue);

	ENoceCineEventUserType GetCineEventUserType() const;
	ENoceEventModeType GetEventModeType() const;
	class AActor* GetPlaySequenceStateSeqActor() const;
	bool IsInEvent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGlobalDelegates")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGlobalDelegates")
	}
	static class UNoceGlobalDelegates* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGlobalDelegates>();
	}
};
DUMPER7_ASSERTS_UNoceGlobalDelegates;

// Class GameNoce.NocePickupBase
// 0x0018 (0x02A8 - 0x0290)
class ANocePickupBase : public AActor
{
public:
	class FText                                   NewPromptText;                                     // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         Count;                                             // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_HandlePickupFailed();
	bool BP_PickupCanSpawn();
	bool IsPlayerHasItem();
	bool OnPickup(class AActor* InActor);

	class FName GetId() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupBase")
	}
	static class ANocePickupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupBase>();
	}
};
DUMPER7_ASSERTS_ANocePickupBase;

// Class GameNoce.NocePickupConsumable
// 0x0008 (0x02B0 - 0x02A8)
class ANocePickupConsumable : public ANocePickupBase
{
public:
	struct FNoceConsumableDataRowHandle           ConsumableID;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupConsumable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupConsumable")
	}
	static class ANocePickupConsumable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupConsumable>();
	}
};
DUMPER7_ASSERTS_ANocePickupConsumable;

// Class GameNoce.NoceGraphicOptionFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceGraphicOptionFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetAASuperSamplingModes(bool IsResolution4K, TArray<ENoceGraphicAASuperSamplingMode>* OutAvailableModes);
	static bool IsHardwardRaytracingSupported();
	static void SetAASuperSamplingMode(ENoceGraphicAASuperSamplingMode InMode);
	static void SetAASuperSamplingQuality(ENoceGraphicAASuperSamplingMode InMode, uint8 InQuality);
	static void SetDepthOfField(bool bEnable);
	static void SetFakeBackBufferSize(int32 InWidth, int32 InHeight);
	static void SetGlobalIlluminationMode(uint8 InMode);
	static void SetHardwardRaytracing(bool bEnable);
	static void SetMotionBlur(bool bEnable);
	static void SetPaniniDistortion(float InVal);
	static void SetPaniniVerticalCompression(float InVal);
	static void SetReflectionMode(uint8 InMode);
	static void SetScalability_Effects(uint8 InMode);
	static void SetScalability_PostProcessing(uint8 InMode);
	static void SetScalability_Shadows(uint8 InMode);
	static void SetScalability_Textures(uint8 InMode);
	static void SetScalability_ViewDistance(uint8 InMode);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceGraphicOptionFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceGraphicOptionFunctionLibrary")
	}
	static class UNoceGraphicOptionFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceGraphicOptionFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceGraphicOptionFunctionLibrary;

// Class GameNoce.NoceHellModeDataAsset
// 0x0040 (0x0070 - 0x0030)
class UNoceHellModeDataAsset final : public UDataAsset
{
public:
	float                                         Damage;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FloatDamage;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ActionLevelDamageRatio;                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SanityToHealthRatio;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceHellModeAnimType                         AnimType;                                          // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNeoAudioTriggerIdHandle>       AudioIDs;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HealthDamageEffectedByDamageRatio;                 // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HealthDamageApplyGutsCheck;                        // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HealthDamageCheckOmamoriKagami;                    // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HealthDamageCheckSuperArmor;                       // 0x006B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHellModeDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHellModeDataAsset")
	}
	static class UNoceHellModeDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHellModeDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceHellModeDataAsset;

// Class GameNoce.NoceHideActorSection
// 0x0010 (0x0100 - 0x00F0)
class UNoceHideActorSection final : public UMovieSceneSection
{
public:
	struct FNoceHideActorSectionParams            Params_0;                                          // 0x00F0(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHideActorSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHideActorSection")
	}
	static class UNoceHideActorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHideActorSection>();
	}
};
DUMPER7_ASSERTS_UNoceHideActorSection;

// Class GameNoce.NocePlayerAnimBankByProgressComp
// 0x0038 (0x0168 - 0x0130)
class UNocePlayerAnimBankByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	TSoftObjectPtr<class UObject>                 AnimBankSoftObject;                                // 0x0130(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimPlusBankDataTable*                 AnimBank;                                          // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimPlusBankDataTable*                 OriginalAnimBank;                                  // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnChangedWeapon(class ANoceWeapon* InNewWeapon);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerAnimBankByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerAnimBankByProgressComp")
	}
	static class UNocePlayerAnimBankByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerAnimBankByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNocePlayerAnimBankByProgressComp;

// Class GameNoce.NoceHideActorTrack
// 0x0018 (0x00B0 - 0x0098)
class UNoceHideActorTrack final : public UMovieSceneTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHideActorTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHideActorTrack")
	}
	static class UNoceHideActorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHideActorTrack>();
	}
};
DUMPER7_ASSERTS_UNoceHideActorTrack;

// Class GameNoce.NoceProgressMultiConditionJoint
// 0x0030 (0x0120 - 0x00F0)
class UNoceProgressMultiConditionJoint final : public USMStateInstance
{
public:
	struct FGameplayTagContainer                  Condition;                                         // 0x00F0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NextProgress;                                      // 0x0110(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedTagNum;                                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveAdditionalTags;                              // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceProgressMultiConditionJoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceProgressMultiConditionJoint")
	}
	static class UNoceProgressMultiConditionJoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceProgressMultiConditionJoint>();
	}
};
DUMPER7_ASSERTS_UNoceProgressMultiConditionJoint;

// Class GameNoce.NoceHitArea
// 0x00B8 (0x0248 - 0x0190)
class UNoceHitArea final : public UContentWidget
{
public:
	TMulticastInlineDelegate<void()>              OnClicked;                                         // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPressed;                                         // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReleased;                                        // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHovered;                                         // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUnhovered;                                       // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent; // 0x01E0(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonUpEvent; // 0x01F0(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseMoveEvent; // 0x0200(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseDoubleClickEvent; // 0x0210(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AreaSize;                                          // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UnhandledEvent;                                    // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHitArea")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHitArea")
	}
	static class UNoceHitArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHitArea>();
	}
};
DUMPER7_ASSERTS_UNoceHitArea;

// Class GameNoce.NoceHitPerformDataAsset
// 0x0140 (0x0170 - 0x0030)
class UNoceHitPerformDataAsset final : public UDataAsset
{
public:
	TMap<class FName, struct FHitPerformComboParticleRotationMapUnit> HitPerformComboParticleRotationGroup; // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FHitPerformSettingMapUnit> HitPerformSettingsGroup;                     // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FHitPerformComboMapUnit> HitPerformComboGroup;                          // 0x00D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ENoceWinceType, struct FNoceWincePerformUnit> WincePerformMap;                              // 0x0120(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHitPerformDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHitPerformDataAsset")
	}
	static class UNoceHitPerformDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHitPerformDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceHitPerformDataAsset;

// Class GameNoce.NoceHitFriendDataAsset
// 0x0050 (0x0080 - 0x0030)
class UNoceHitFriendDataAsset final : public UDataAsset
{
public:
	TMap<class FName, ENoceWinceType>             ComboWinceMap;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHitFriendDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHitFriendDataAsset")
	}
	static class UNoceHitFriendDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHitFriendDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceHitFriendDataAsset;

// Class GameNoce.NocePlayerBroochComponent
// 0x0050 (0x00F0 - 0x00A0)
class UNocePlayerBroochComponent final : public UActorComponent
{
public:
	struct FSoftClassPath                         BroochActorClassPath;                              // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BrroochAttachSocket;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BroochKeyItemName;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 BroochActor;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   BroochMeshComponent;                               // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNocePlayerInventoryComponent*          PlayerInventory;                                   // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnAddItem(ENoceInventoryType InItemType, class FName InItemName);
	void HandleOnPossessed(bool InPossessed);
	void HandleOnRemoveItem(ENoceInventoryType InItemType, class FName InItemName);
	void HandlePlayerShowHide(bool InShow);
	void SetForceHideMesh(bool InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerBroochComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerBroochComponent")
	}
	static class UNocePlayerBroochComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerBroochComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerBroochComponent;

// Class GameNoce.NoceHitPerformDataSubsystem
// 0x0140 (0x0178 - 0x0038)
class UNoceHitPerformDataSubsystem : public UNoceWorldSubsystem
{
public:
	TMap<struct FSoftObjectPath, class UNiagaraSystem*> NiagaraSystemMap;                            // 0x0038(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<struct FSoftObjectPath, class UForceFeedbackEffect*> ForceFeedbackEffectMap;                // 0x0088(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<struct FSoftClassPath, TSubclassOf<class UCameraShakeBase>> CameraShakeBaseMap;             // 0x00D8(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<struct FSoftObjectPath, class UCurveFloat*> CurveFloatMap;                                  // 0x0128(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void ClearAllMaps();
	TSubclassOf<class UCameraShakeBase> LoadCameraShakeBase(const struct FSoftClassPath& InSoftClassPath);
	class UCurveFloat* LoadCurveFloat(const struct FSoftObjectPath& InSoftObjectPath);
	class UForceFeedbackEffect* LoadForceFeedbackEffect(const struct FSoftObjectPath& InSoftObjectPath);
	class UNiagaraSystem* LoadNiagaraSystem(const struct FSoftObjectPath& InSoftObjectPath);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHitPerformDataSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHitPerformDataSubsystem")
	}
	static class UNoceHitPerformDataSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHitPerformDataSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceHitPerformDataSubsystem;

// Class GameNoce.NocePickupsPointList
// 0x0010 (0x0038 - 0x0028)
class UNocePickupsPointList final : public UObject
{
public:
	TArray<class ANocePickupsPoint*>              PointList;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupsPointList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupsPointList")
	}
	static class UNocePickupsPointList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickupsPointList>();
	}
};
DUMPER7_ASSERTS_UNocePickupsPointList;

// Class GameNoce.NoceHorizontalList
// 0x0000 (0x00A0 - 0x00A0)
class UNoceHorizontalList final : public UNoceSimpleList
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceHorizontalList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceHorizontalList")
	}
	static class UNoceHorizontalList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceHorizontalList>();
	}
};
DUMPER7_ASSERTS_UNoceHorizontalList;

// Class GameNoce.NoceIndicatorIconBase
// 0x0008 (0x0308 - 0x0300)
class UNoceIndicatorIconBase final : public UNoceUserWidgetBase
{
public:
	float                                         HorizontalPadding;                                 // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalPadding;                                   // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void UpdateScreenLocation(const struct FVector& InWorldLocation);
	void UpdateWidget(ENoceIndicatorEdgeType InType, int32 Distance);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceIndicatorIconBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceIndicatorIconBase")
	}
	static class UNoceIndicatorIconBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceIndicatorIconBase>();
	}
};
DUMPER7_ASSERTS_UNoceIndicatorIconBase;

// Class GameNoce.NoceInputFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceInputFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddOrRemoveCustomActionKey(class FName InActionName, const struct FKey& InPrimaryKey, const struct FKey& InSecondaryKey, bool* OutIsSecondaryKeyRemoved);
	static void BindInput(class UPlayerInput* InPlayerInput);
	static void GetActionIconNames(const class FName& InActionName, TArray<class FName>* OutNames);
	static ENoceInputDeviceType GetActualInputDeviceTypeBy(int32 InControllerId);
	static bool GetActualKey(const class FName& InActionName, struct FKey* OutKey);
	static bool GetActualKeyIconName(bool ShowGamepad, const class FName& InActionName, class FName* OutName);
	static class FName GetActualKeyName(const class FName& InActionName);
	static TArray<struct FKey> GetActualKeys(const class FName& InActionName);
	static void GetActualKeys2(class FName InActionName, struct FKey* OutPrimaryKey, struct FKey* OutSecondaryKey, struct FKey* OutHiddenKey);
	static void GetDefaultKeys(class FName InActionName, struct FKey* OutPrimaryKey, struct FKey* OutSecondaryKey, struct FKey* OutHiddenKey);
	static class UDataTable* GetInputActionToKeyTable();
	static ENoceInputDeviceType GetInputDeviceType(class APlayerController* InPC);
	static ENoceInputDeviceType GetInputDeviceTypeBy(int32 InControllerId);
	static ENoceInputDeviceType GetInputGamePadType();
	static class UDataTable* GetInputMultiActionTable();
	static class FName GetName(const struct FKey& InKey);
	static bool IsAnyKey(const struct FKey& InKey);
	static bool IsCancel(const struct FKey& InKey);
	static bool IsConfirm(const struct FKey& InKey);
	static bool IsGamePadConnected(int32 InControllerId);
	static bool IsMouseClickButton(const struct FPointerEvent& InMouseEvent);
	static bool IsMouseConfirm(const struct FKey& InKey);
	static bool IsPauseMenu(const struct FKey& InKey);
	static bool IsRepeatKey(const struct FKeyEvent& InKeyEvent);
	static bool IsUIAction1(const struct FKey& InKey);
	static bool IsUIAction2(const struct FKey& InKey);
	static bool IsUIEquipment(const struct FKey& InKey);
	static bool IsUIKey(const ENoceUIInputAction InActionName, const struct FKey& InKey);
	static bool IsUIKeyEvent(const ENoceUIInputAction InActionName, const struct FKeyEvent& InKeyEvent);
	static bool IsUIKeyUp(const ENoceUIInputAction InActionName, const struct FKey& InKey);
	static bool IsUIMap(const struct FKey& InKey);
	static bool IsUIMapFloorDown(const struct FKey& InKey);
	static bool IsUIMapFloorUp(const struct FKey& InKey);
	static bool IsUIMouseEvent(const ENoceUIInputAction InActionName, const struct FPointerEvent& InMouseEvent);
	static bool IsUIMoveDown(const struct FKey& InKey);
	static bool IsUIMoveDown2(const struct FKey& InKey);
	static bool IsUIMoveLeft(const struct FKey& InKey);
	static bool IsUIMoveLeft2(const struct FKey& InKey);
	static bool IsUIMoveRight(const struct FKey& InKey);
	static bool IsUIMoveRight2(const struct FKey& InKey);
	static bool IsUIMoveUp(const struct FKey& InKey);
	static bool IsUIMoveUp2(const struct FKey& InKey);
	static bool IsUINotebook(const struct FKey& InKey);
	static bool IsUIPageDown(const struct FKey& InKey);
	static bool IsUIPageUp(const struct FKey& InKey);
	static bool IsUISecondTabLeft(const struct FKey& InKey);
	static bool IsUISecondTabRight(const struct FKey& InKey);
	static bool IsUITabLeft(const struct FKey& InKey);
	static bool IsUITabRight(const struct FKey& InKey);
	static bool IsUsingGamePad(int32 InControllerId);
	static bool IsUsingKeyboardMouse();
	static bool IsUsingMouse();
	static void ModifyActionKey(class APlayerController* InPC, class FName InActionName, const struct FKey& InPrimaryKey, const struct FKey& InSecondaryKey);
	static void ModifyAxisKey(class APlayerController* InPC, class FName InAxisName, float Scale, class FName InActionName, const struct FKey& InPrimaryKey, const struct FKey& InSecondaryKey);
	static void RemoveCustomActionKey(class APlayerController* InPC, class FName InActionName, bool IsPrimary);
	static void RemoveCustomAxisKey(class APlayerController* InPC, class FName InAxisName, float Scale, class FName InActionName, bool IsPrimary);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInputFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInputFunctionLibrary")
	}
	static class UNoceInputFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInputFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceInputFunctionLibrary;

// Class GameNoce.NocePlayerChargeComponent
// 0x0108 (0x01A8 - 0x00A0)
class UNocePlayerChargeComponent final : public UActorComponent
{
public:
	TMap<class FName, class UCurveFloat*>         ComboAttackChargeCurveMap;                         // 0x00A0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_AttackMultiplierSetByCaller;                    // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_AttackMultiplierSetByCaller;                   // 0x00F8(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UCurveFloat*>         ComboWinceChargeCurveMap;                          // 0x0100(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_WinceMultiplierSetByCaller;                     // 0x0150(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_WinceMultiplierSetByCaller;                    // 0x0158(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerController*                  PlayerController;                                  // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0178(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x28];                                     // 0x0180(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnPossessed(bool InPossessed);
	void RemoveAttackMultiplier();
	void RemoveChargeBuff();
	void RemoveWinceMultiplier();
	void SetAttackMultiplier(class FName InComboName, float InChargeTime);
	void SetWinceMultiplier(class FName InComboName, float InChargeTime);
	void StartCharge(class FName InComboName, class FName InInputAction);
	void StopCharge();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerChargeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerChargeComponent")
	}
	static class UNocePlayerChargeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerChargeComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerChargeComponent;

// Class GameNoce.NoceInputGuideSubsystem
// 0x0080 (0x00B0 - 0x0030)
class UNoceInputGuideSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnGuideChanged;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x70];                                      // 0x0040(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideLastGuide();
	bool IsShowingGuide();
	void RemoveCommonGuide(int32 InIndex);
	int32 RequestCommonGuide(class FName InGuide);
	void ShowLastGuide();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInputGuideSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInputGuideSubsystem")
	}
	static class UNoceInputGuideSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInputGuideSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceInputGuideSubsystem;

// Class GameNoce.NocePickPreviewImageWidgetBase
// 0x0028 (0x03D8 - 0x03B0)
class UNocePickPreviewImageWidgetBase : public UNoceFocusableWidget
{
public:
	uint8                                         Pad_3B0[0x10];                                     // 0x03B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             NameText;                                          // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Item;                                              // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ItemId;                                            // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowItem(const ENoceInventoryType& Type, const class FName& ID, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickPreviewImageWidgetBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickPreviewImageWidgetBase")
	}
	static class UNocePickPreviewImageWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickPreviewImageWidgetBase>();
	}
};
DUMPER7_ASSERTS_UNocePickPreviewImageWidgetBase;

// Class GameNoce.NocePickPreviewImageWidget
// 0x0018 (0x03F0 - 0x03D8)
class UNocePickPreviewImageWidget : public UNocePickPreviewImageWidgetBase
{
public:
	class UTextBlock*                             DescriptionText;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             HiddenText;                                        // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceInventoryType                            ItemType;                                          // 0x03E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickPreviewImageWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickPreviewImageWidget")
	}
	static class UNocePickPreviewImageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickPreviewImageWidget>();
	}
};
DUMPER7_ASSERTS_UNocePickPreviewImageWidget;

// Class GameNoce.NoceInputQueueComponent
// 0x0148 (0x01E8 - 0x00A0)
class UNoceInputQueueComponent final : public UActorComponent
{
public:
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerController*                  PlayerController;                                  // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerInputHelperComponent*        PlayerInputHelper;                                 // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnInputMatched;                                    // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceInputQueueWatcher*>         InputQueueWatcherPool;                             // 0x00C8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class UNoceInputQueueWatcher*, bool>     InputQueueWatcherUsedMap;                          // 0x00D8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceInputQueueWatcher*>         ActiveInputWatchers;                               // 0x0128(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0xA0];                                     // 0x0138(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNoceInputQueueWatcher*>         CandidateMatchedWatchers;                          // 0x01D8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ClearInputAction(ENoceInputAction InInputAction);
	void CommitInputUsed(class FName InExcludeStateMachineName, class FName InExcludeStateName);
	ENocePlayerAnimStateType GetMatchedInput(const TArray<ENocePlayerAnimStateType>& InAnimStateTypes);
	void HandleInputAction(ENoceInputAction InInputAction, bool InPressed);
	void HandleOnPossessed(bool InPossessed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInputQueueComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInputQueueComponent")
	}
	static class UNoceInputQueueComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInputQueueComponent>();
	}
};
DUMPER7_ASSERTS_UNoceInputQueueComponent;

// Class GameNoce.NoceInputQueueWatcher
// 0x0050 (0x0078 - 0x0028)
class UNoceInputQueueWatcher final : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInputQueueWatcher")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInputQueueWatcher")
	}
	static class UNoceInputQueueWatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInputQueueWatcher>();
	}
};
DUMPER7_ASSERTS_UNoceInputQueueWatcher;

// Class GameNoce.NoceInputSubsystem
// 0x0038 (0x0068 - 0x0030)
class UNoceInputSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(bool IsConnected, int32 UserId, ENoceInputDeviceType DeviceType)> ControllerConnectionChanged; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static ENoceInputDeviceType GetDeviceType();
	static ENoceInputGamepadType GetGamepadControlType();

	void ForceShowCursorIfUsingKeyboardMouse(bool ResetCursorPos);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInputSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInputSubsystem")
	}
	static class UNoceInputSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInputSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceInputSubsystem;

// Class GameNoce.NoceSetting_AAQuality
// 0x0000 (0x01A0 - 0x01A0)
class UNoceSetting_AAQuality final : public UGameSettingValueDiscreteDynamic_Number
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetting_AAQuality")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetting_AAQuality")
	}
	static class UNoceSetting_AAQuality* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetting_AAQuality>();
	}
};
DUMPER7_ASSERTS_UNoceSetting_AAQuality;

// Class GameNoce.NoceInputWidget
// 0x0010 (0x0310 - 0x0300)
class UNoceInputWidget final : public UNoceUserWidgetBase
{
public:
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideGuide();
	void OnInputAction(ENoceInputAction InInputAction, bool InPressed);
	void OnUIInputAction(ENoceUIInputAction InUIInputAction, bool InPressed);
	void ShowGuide(class FName InGuide);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInputWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInputWidget")
	}
	static class UNoceInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInputWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInputWidget;

// Class GameNoce.NocePlayerAttackInfoComponent
// 0x0020 (0x00C0 - 0x00A0)
class UNocePlayerAttackInfoComponent final : public UActorComponent
{
public:
	class UNocePlayerComboDataAsset*              PlayerComboDataAsset;                              // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceCheatManager*                      CheatManager;                                      // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleOnPossessed(bool InPossessed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerAttackInfoComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerAttackInfoComponent")
	}
	static class UNocePlayerAttackInfoComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerAttackInfoComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerAttackInfoComponent;

// Class GameNoce.NocePlayerTriggerBase
// 0x00A8 (0x0348 - 0x02A0)
class ANocePlayerTriggerBase : public ANoceActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ProgressCondition;                                 // 0x02A8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          NeedExactProgress;                                 // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x02D0(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          AllAdditionalTags;                                 // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedAdditionalTagNum;                              // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  WithOutAdditionalTags;                             // 0x02F8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          WithoutAllAdditionalTags;                          // 0x0318(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoundBitmask;                                      // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EndingBitmask;                                     // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RiddleBitmask;                                     // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CacheProgressTag;                                  // 0x0328(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MatchRound;                                        // 0x0330(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MatchEnding;                                       // 0x0331(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MatchRiddleLevel;                                  // 0x0332(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MatchProgress;                                     // 0x0333(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsEnabled;                                         // 0x0334(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          CacheBoxComponent;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanUseTrigger();
	bool GetTriggerEnable();
	bool IsMatchingCondition();
	void ManualCheckOverlapping();
	void OnAdditionalTagChanged(const struct FGameplayTag& InTag);
	void OnAdditionalTagChanged_BP(const struct FGameplayTag& InTag);
	void OnConditionChanged_BP();
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void OnProgressChanged_BP(const struct FGameplayTag& InTag);
	void OnProgressInitialized(const struct FGameplayTag& InTag);
	void OnProgressInitialized_BP(const struct FGameplayTag& InTag);
	void OnStoryEndingChanged(ENoceEndingType InEndingType);
	void OnTriggerDisabled();
	void OnTriggerEnabled();
	void RecheckFirstTick();
	void SetTriggerEnable(bool InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerTriggerBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerTriggerBase")
	}
	static class ANocePlayerTriggerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePlayerTriggerBase>();
	}
};
DUMPER7_ASSERTS_ANocePlayerTriggerBase;

// Class GameNoce.NoceInteractableBase
// 0x00A0 (0x03E8 - 0x0348)
class ANoceInteractableBase : public ANocePlayerTriggerBase
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool InEnable)> OnEnableChanged;                                   // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOverlapHintEvent;                                // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayerUseInteract;                               // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          IsOverlapHint;                                     // 0x0380(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsOverlapPrompt;                                   // 0x0381(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsActivated;                                       // 0x0382(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsCurrentUsing;                                    // 0x0383(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsExcludedByGroup;                                 // 0x0384(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInteractEnabled;                                 // 0x0385(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          InAvailableStatus;                                 // 0x0386(0x0001)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInteractorBusy;                                  // 0x0387(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsVisuallyBlocked;                                 // 0x0388(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_389[0x1];                                      // 0x0389(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ENoceInteractType                             InteractType;                                      // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38B[0x5];                                      // 0x038B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnOverlapPromptEvent;                              // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class FName                                   MutuallyExclusiveGroupName;                        // 0x03A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCustomizeHintIcon;                              // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInstantFeedback;                                 // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInstantFeedbackSkipInputCheck;                   // 0x03AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3AF[0x1];                                      // 0x03AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UsageLimit;                                        // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         UsedCount;                                         // 0x03B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NeedSave;                                          // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanShowPromptWhenVisuallyBlocked;                  // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanShowHintWhenVisuallyBlocked;                    // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsShowVisionDebugLine;                             // 0x03BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDynamic;                                         // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsShowingPrompt;                                   // 0x03BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BE[0x2A];                                     // 0x03BE(0x002A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanInteractWithPawnBP(class AActor* InteractorPawn);
	bool ExecuteForbitFeedback(class AActor* InteractPawn);
	bool ExecuteInstantFeedback(class AActor* InteractPawn);
	bool GetAvailableStatus();
	float GetCooldownTime();
	struct FVector GetHintLocationBP();
	class FText GetPromptTextBP();
	bool HasExceededUsageLimit();
	bool IsInteractionForbit();
	bool IsInteractionForbitBP();
	void OnBeginOverlapHint(class AActor* InActor);
	void OnBeginOverlapPrompt(class AActor* InActor);
	void OnBeginUsingBP();
	void OnEndOverlapHint(class AActor* InActor);
	void OnEndOverlapPrompt(class AActor* InActor);
	void OnEndUsingBP();
	bool RequestInstantFeedback(class AActor* InteractPawn);
	void SetAvaliableStatus(bool InEnable);
	void SetInteractEnable(bool InEnable);
	void SetIsUsingInteract(bool InIsUsing);
	void UndoUseCountOnce();
	void UpdateButtonIcon(bool ShowPrompt, bool ShowHint, bool ShowForbit);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInteractableBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInteractableBase")
	}
	static class ANoceInteractableBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceInteractableBase>();
	}
};
DUMPER7_ASSERTS_ANoceInteractableBase;

// Class GameNoce.NoceInteractableInterface
// 0x0000 (0x0000 - 0x0000)
class INoceInteractableInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInteractableInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInteractableInterface")
	}
	static class INoceInteractableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceInteractableInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceInteractableInterface;

// Class GameNoce.NoceSetting_PCPreset
// 0x0058 (0x01D8 - 0x0180)
class UNoceSetting_PCPreset final : public UGameSettingAction
{
public:
	TMulticastInlineDelegate<void()>              OnSettingChanged2;                                 // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   Performance;                                       // 0x0190(0x0010)(NativeAccessSpecifierPublic)
	class FText                                   Balanced;                                          // 0x01A0(0x0010)(NativeAccessSpecifierPublic)
	class FText                                   Quality;                                           // 0x01B0(0x0010)(NativeAccessSpecifierPublic)
	class FText                                   Custom;                                            // 0x01C0(0x0010)(NativeAccessSpecifierPublic)
	bool                                          IsSetPreset;                                       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetText();
	void SetIsSetPreset(bool InEnable);
	void SetPreset(ENoceGameSettingPreset InPreset);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetting_PCPreset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetting_PCPreset")
	}
	static class UNoceSetting_PCPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetting_PCPreset>();
	}
};
DUMPER7_ASSERTS_UNoceSetting_PCPreset;

// Class GameNoce.NoceInteractComponent
// 0x0148 (0x01E8 - 0x00A0)
class UNoceInteractComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  InteractTarget;                                    // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ENoceInteractType>                     ForbiddenTypes;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x128];                                     // 0x00C0(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCandidateDistanceXY();
	float GetCandidateDistanceZ();
	void HandleInputAction(ENoceInputAction InInputAction, bool InPressed);
	void HandleOnPossessed(bool InPossessed);
	bool IsInteractTypeValid(ENoceInteractType InInteractType);
	bool IsTargetInstantFeedback();
	bool IsUsingInteract();
	void PauseInteract(bool InPause);
	void SetIsUseInteract(bool InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInteractComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInteractComponent")
	}
	static class UNoceInteractComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInteractComponent>();
	}
};
DUMPER7_ASSERTS_UNoceInteractComponent;

// Class GameNoce.NocePickupsHelperSubsystem
// 0x0030 (0x0068 - 0x0038)
class UNocePickupsHelperSubsystem final : public UNoceWorldSubsystem
{
public:
	TArray<class ANoceInteractableBase*>          RummageList;                                       // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ANocePickupBase*>                PickupList;                                        // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ANocePickupsPoint*>              PickupsPointList;                                  // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void RegisterPickup(class ANocePickupBase* Pickup);
	void RegisterPickupsPoint(class ANocePickupsPoint* PickupsPoint);
	void RegisterRummage(class ANoceInteractableBase* Rummage);
	void UnregisterPickup(class ANocePickupBase* Pickup);
	void UnregisterPickupsPoint(class ANocePickupsPoint* PickupsPoint);
	void UnregisterRummage(class ANoceInteractableBase* Rummage);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupsHelperSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupsHelperSubsystem")
	}
	static class UNocePickupsHelperSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickupsHelperSubsystem>();
	}
};
DUMPER7_ASSERTS_UNocePickupsHelperSubsystem;

// Class GameNoce.NoceInteractIconBase
// 0x0008 (0x0308 - 0x0300)
class UNoceInteractIconBase : public UNoceUserWidgetBase
{
public:
	bool                                          SystemVisible;                                     // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          GameplayVisible;                                   // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPromptText(const class FText& PromptText);
	void UpdateIcon(ENoceInteractIconState TargetState, const struct FVector& IconLocation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInteractIconBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInteractIconBase")
	}
	static class UNoceInteractIconBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInteractIconBase>();
	}
};
DUMPER7_ASSERTS_UNoceInteractIconBase;

// Class GameNoce.NoceInteractorInterface
// 0x0000 (0x0000 - 0x0000)
class INoceInteractorInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInteractorInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInteractorInterface")
	}
	static class INoceInteractorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceInteractorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceInteractorInterface;

// Class GameNoce.NoceInventoryCollectiblePage
// 0x0090 (0x0448 - 0x03B8)
class UNoceInventoryCollectiblePage : public UNoceFocusablePage
{
public:
	TMulticastInlineDelegate<void(bool Enable)>   ShowHideTab;                                       // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   ListGuide;                                         // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BackGuide;                                         // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ViewOut;                                           // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ViewIn;                                            // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ViewFadeOut;                                       // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DescriptionText;                                   // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NameText;                                          // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Info;                                              // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               LeftGroup;                                         // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAnimWidget*                        Tip;                                               // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceCollectibleListWidget*             WBP_Collectible_List;                              // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           CollectibleItems;                                  // 0x0420(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsViewIn;                                          // 0x0438(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNocePlayerInventoryComponent*          InventoryComponent;                                // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnListMouseConfirm(int32 Index_0);
	void OnListUpdateSelection(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryCollectiblePage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryCollectiblePage")
	}
	static class UNoceInventoryCollectiblePage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryCollectiblePage>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryCollectiblePage;

// Class GameNoce.NoceShortcutWeaponChildWidget
// 0x0018 (0x0390 - 0x0378)
class UNoceShortcutWeaponChildWidget final : public UNoceSelectItemWidget
{
public:
	class UNoceDurabilityWidget*                  Durability;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NameTextBlock;                                     // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryWeaponItem*               WBP_Inventory_WeaponChild;                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDisable();
	void SetEnable(class FName ID, float InDurability, bool InEquipped);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceShortcutWeaponChildWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceShortcutWeaponChildWidget")
	}
	static class UNoceShortcutWeaponChildWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceShortcutWeaponChildWidget>();
	}
};
DUMPER7_ASSERTS_UNoceShortcutWeaponChildWidget;

// Class GameNoce.NoceInventoryCollectibleWidget
// 0x0040 (0x03F0 - 0x03B0)
class UNoceInventoryCollectibleWidget : public UNoceFocusableWidget
{
public:
	class UWidgetAnimation*                       SwitchTab;                                         // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryKeyItemWidget*            KeyItem;                                           // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryLetterWidget*             Letter;                                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryTabWidget*                WBP_Collectible_Tab;                               // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SwitchTabSound;                                    // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UNoceFocusablePage*                     CurrentPage;                                       // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceFocusablePage*>             AllPages;                                          // 0x03E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnShowHideTab(bool Enable);
	void OnSwitchTab();
	void OnSwitchTabCompleted();
	void OnTabMouseDown(int32 Index_0);
	void SwitchTabIndex();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryCollectibleWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryCollectibleWidget")
	}
	static class UNoceInventoryCollectibleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryCollectibleWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryCollectibleWidget;

// Class GameNoce.NocePlayerClawTransformComponent
// 0x01A8 (0x0248 - 0x00A0)
class UNocePlayerClawTransformComponent final : public UActorComponent
{
public:
	float                                         Claw_EnemyDamageRatio;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Claw_EnemyDamageAdd;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Claw_EnemyDeathAdd;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      Claw_EnemyDeathAddMap;                             // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         Claw_DamageRatio;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Claw_DamageAdd;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Claw_SanityToClawTransformRatio;                   // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawG_EnemyDamageRatio;                            // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawG_EnemyDamageAdd;                              // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawG_EnemyDeathAdd;                               // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      ClawG_EnemyDeathAddMap;                            // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         ClawG_DamageRatio;                                 // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawG_DamageAdd;                                   // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawG_TransformBackToClawRatio;                    // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_ClawTransformAddSetByCaller;                    // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_ClawTransformCostSetByCaller;                   // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_ClawTransformCostSetByCaller;                  // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawAttrackSoulDistance;                           // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ClawAttrackSoulComboName;                          // 0x0194(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WidgetClawAttrackSoulTag;                          // 0x019C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WidgetClawAttrackSoulHintTag;                      // 0x01A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ClawAttrackSoulHintPromptText;                     // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnAddClawTransformByEnemyDead;                     // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNoceCheatManager*                      CheatManager;                                      // 0x01D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x01D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x01E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceSanityComponent*                   SanityComponent;                                   // 0x01E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNocePlayerAttackInfoComponent*         PlayerAttackInfoComponent;                         // 0x01F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceInteractComponent*                 InteractComponent;                                 // 0x01F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0200(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetComponent*                       ClawAttrackSoulWidgetComp;                         // 0x0208(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceClawAttrackSoulWidget*             ClawAttrackSoulWidget;                             // 0x0210(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetComponent*                       ClawAttrackSoulHintWidgetComp;                     // 0x0218(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceInteractIconBase*                  ClawAttrackSoulHintWidget;                         // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_228[0x20];                                     // 0x0228(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddClawTransform(float InValue);
	void ApplyAttrackSoulDamageToTarget();
	void CostClawTransform(float InValue);
	void FillClawTransformToFull();
	float GetAttrackSoulTargetDistanceXY();
	float GetAttrackSoulTargetDistanceZ();
	class ANoceEnemyCharacter* GetAttractSoulTarget();
	float GetClawTransform();
	void HandleEnemyDead(class AActor* InActor);
	void HandleOnPossessed(bool InPossessed);
	bool HaveAttrackSoulTarget();
	bool IsClawTransformEmpty();
	bool IsClawTransformFull();
	void OnCanShowWidgetChanged(bool InVisible);
	void OnClawTransformed(bool InIsClawG);
	void OnEnemyDamage(class AActor* InHitActor, float InDamage, bool InIsDead);
	void OnPlayerPreDamage(float InHealthDamage, float InMaxSanityDamage);
	void RegisterOnPossessed();
	void SetAttractSoulWidgetRatio(float InRatio, class AActor* InTargetActor);
	void ShowAttrackSoulHintWidget(bool InShow, class AActor* InTargetActor);
	void ShowAttrackSoulWidget(bool InShow, class AActor* InTargetActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerClawTransformComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerClawTransformComponent")
	}
	static class UNocePlayerClawTransformComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerClawTransformComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerClawTransformComponent;

// Class GameNoce.NoceInventoryItem
// 0x0008 (0x0380 - 0x0378)
class UNoceInventoryItem : public UNoceSelectItemWidget
{
public:
	class UImage*                                 Item;                                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetItemImage(const struct FSoftObjectPath& ImagePath);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryItem")
	}
	static class UNoceInventoryItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryItem>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryItem;

// Class GameNoce.NoceInventoryConsumableItem
// 0x00A0 (0x0420 - 0x0380)
class UNoceInventoryConsumableItem : public UNoceInventoryItem
{
public:
	class UWidgetAnimation*                       DisableToEquip;                                    // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipToDisable;                                    // 0x0388(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipToEquip;                                      // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DefaultToDefault;                                  // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DefaultToDisable;                                  // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectFail;                                        // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableSelectFail;                                 // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipSelectNextEdit;                               // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipSelectBackEdit;                               // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableSelectNextEdit;                             // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableSelectBackEdit;                             // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       RealToFake;                                        // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FakeToReal;                                        // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Count;                                             // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               EquipIconGroup;                                    // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               EditAnimations;                                    // 0x03F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               EquipAnimations;                                   // 0x0408(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsSelecting;                                      // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BackFromEdit();
	void DisableEdit();
	void EnableEdit();
	void Equip(bool IsSelecting);
	void EquipFail();
	void HideEquipIconGroup();
	void OnBackListCompleted();
	void OnEquipChangedCompleted();
	void PlayUnfocusMark(bool* NoUse);
	void SetCount(int32 InValue);
	void SetDisable();
	void SetEnable(class FName ID, int32 Quantity);
	void ToEdit();
	void Unequip(bool IsSelecting);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryConsumableItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryConsumableItem")
	}
	static class UNoceInventoryConsumableItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryConsumableItem>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryConsumableItem;

// Class GameNoce.NoceInventoryEquipmentWidget
// 0x0000 (0x03B0 - 0x03B0)
class UNoceInventoryEquipmentWidget : public UNoceFocusableWidget
{
public:
	void SetDefaultIndex(int32 InIndex, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryEquipmentWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryEquipmentWidget")
	}
	static class UNoceInventoryEquipmentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryEquipmentWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryEquipmentWidget;

// Class GameNoce.NoceSkyLightVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceSkyLightVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSkyLightDataRowHandle             SkyLightDataRow;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceSkyLightProgress>          LightDataByProgress;                               // 0x00E0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSkyLightVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSkyLightVolumeComponent")
	}
	static class UNoceSkyLightVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSkyLightVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSkyLightVolumeComponent;

// Class GameNoce.NoceInventoryFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceInventoryFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FNoceNotebookContentData GetCharacterData(class FName InName);
	static struct FNoceNotebookCategoryData GetCharacterNameData(class FName InName);
	static struct FNoceNotebookCharacterPageData GetCharacterPageData(class FName InName);
	static struct FNoceConsumableData GetConsumableData(class FName InName);
	static TArray<class FName> GetConsumableRowNames();
	static struct FNoceNotebookContentData GetEnemyData(class FName InName);
	static struct FNoceNotebookCategoryData GetEnemyNameData(class FName InName);
	static struct FNoceNotebookEnemyPageData GetEnemyPageData(class FName InName);
	static struct FNoceExpandInventoryData GetExpandInventoryData(class FName InName);
	static TArray<class FName> GetExpandInventoryRowNames();
	static struct FNoceNotebookContentData GetInfoData(class FName InName);
	static struct FNoceNotebookCategoryData GetInfoNameData(class FName InName);
	static struct FNoceNotebookInfoPageData GetInfoPageData(class FName InName);
	static struct FNoceKeyItemData GetKeyItemData(class FName InName);
	static TArray<class FName> GetKeyItemEmaRowNames();
	static TArray<class FName> GetKeyItemRowNames();
	static struct FNoceLetterData GetLetterData(class FName InName);
	static struct FNoceLetterGroupData GetLetterGroupData(class FName InName);
	static TArray<class FName> GetLetterGroupRowNames();
	static TArray<class FName> GetLetterRowNames();
	static TArray<class FName> GetNotebookCharacterNameRowNames();
	static TArray<class FName> GetNotebookCharacterPageRowNames();
	static TArray<class FName> GetNotebookCharacterRowNames();
	static TArray<class FName> GetNotebookEnemyNameRowNames();
	static TArray<class FName> GetNotebookEnemyPageRowNames();
	static TArray<class FName> GetNotebookEnemyRowNames();
	static TArray<class FName> GetNotebookInfoNameRowNames();
	static TArray<class FName> GetNotebookInfoPageRowNames();
	static TArray<class FName> GetNotebookInfoRowNames();
	static TArray<class FName> GetNotebookPuzzleNameRowNames();
	static TArray<class FName> GetNotebookPuzzlePageRowNames();
	static TArray<class FName> GetNotebookPuzzleRowNames();
	static TArray<class FName> GetNotebookRowNames();
	static TArray<class FName> GetNotebookTutorialNameRowNames();
	static TArray<class FName> GetNotebookTutorialPageRowNames();
	static TArray<class FName> GetNotebookTutorialRowNames();
	static struct FNoceOmamoriData GetOmamoriData(class FName InName);
	static TArray<class FName> GetOmamoriRowNames();
	static struct FNoceNotebookMultiContentData GetPuzzleData(class FName InName);
	static struct FNoceNotebookCategoryData GetPuzzleNameData(class FName InName);
	static struct FNoceNotebookPuzzlePageData GetPuzzlePageData(class FName InName);
	static struct FNoceNotebookContentData GetTutorialData(class FName InName);
	static struct FNoceNotebookCategoryData GetTutorialNameData(class FName InName);
	static struct FNoceNotebookTutorialPageData GetTutorialPageData(class FName InName);
	static struct FNoceWeaponData GetWeaponData(class FName InName);
	static TArray<class FName> GetWeaponRowNames();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryFunctionLibrary")
	}
	static class UNoceInventoryFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryFunctionLibrary;

// Class GameNoce.NocePickupWeapon
// 0x0008 (0x02B0 - 0x02A8)
class ANocePickupWeapon : public ANocePickupBase
{
public:
	struct FNoceWeaponDataRowHandle               WeaponID;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupWeapon")
	}
	static class ANocePickupWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupWeapon>();
	}
};
DUMPER7_ASSERTS_ANocePickupWeapon;

// Class GameNoce.NoceInventoryImageDialogWidget
// 0x00D8 (0x0440 - 0x0368)
class UNoceInventoryImageDialogWidget : public UNoceAnimWidget
{
public:
	class UBYGRichTextBlock*                      DescriptionText;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NameText;                                          // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIImage*                           Item;                                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBYGRichTextBlock*                      BackupText;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePageTabWidget*                     PageTab;                                           // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceArrowWidget*                       ArrowLeft;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceArrowWidget*                       ArrowRight;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterTabWidget*                   Tab;                                               // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ItemIn;                                            // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PageDefault;                                       // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PageRight;                                         // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PageLeft;                                          // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               TurnPageSound;                                     // 0x03C8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectLetterSound;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   OneLetterOnePageGuide;                             // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   OneLetterMultiPagesGuide;                          // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MultiLettersOnePageGuide;                          // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MultiLettersMultiPagesGuide;                       // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInputGuideSubsystem*               InputGuideSubsystem;                               // 0x03F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               PageAnimations;                                    // 0x0400(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           Content;                                           // 0x0410(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         GuideIndex;                                        // 0x0420(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LetterNames;                                       // 0x0428(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         LetterIndex;                                       // 0x0438(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Confirm();
	void HideGuide();
	void OnPageAnimationCompleted();
	void OnRefreshSelection(int32 Index_0);
	void SelectNext();
	void SelectPrevious();
	void SetLetterGroupData(const class FText& InGroupName, const TArray<class FName>& InLetterNames);
	bool UpdateInput(const struct FInputEvent& InInputEvent, const struct FKey& InKey);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryImageDialogWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryImageDialogWidget")
	}
	static class UNoceInventoryImageDialogWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryImageDialogWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryImageDialogWidget;

// Class GameNoce.NoceInventoryImageWidget
// 0x0010 (0x0378 - 0x0368)
class UNoceInventoryImageWidget : public UNoceAnimWidget
{
public:
	class UNoceUIImage*                           BG;                                                // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShowBGTimer;                                       // 0x0370(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadInventoryImage(const struct FSoftObjectPath& Path);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryImageWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryImageWidget")
	}
	static class UNoceInventoryImageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryImageWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryImageWidget;

// Class GameNoce.NoceInventoryKeyItemWidget
// 0x0030 (0x0478 - 0x0448)
class UNoceInventoryKeyItemWidget : public UNoceInventoryCollectiblePage
{
public:
	class UNoceInventoryImageWidget*              Image;                                             // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             HiddenText;                                        // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                HiddenTextSpacer;                                  // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ViewInSound;                                       // 0x0460(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ViewOutSound;                                      // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   CapsuleBox;                                        // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryKeyItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryKeyItemWidget")
	}
	static class UNoceInventoryKeyItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryKeyItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryKeyItemWidget;

// Class GameNoce.NocePlayerState
// 0x0260 (0x05A8 - 0x0348)
class ANocePlayerState : public APlayerState
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UsedDebugTeleport;                                 // 0x0350(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerAttributeSet*                PlayerAttributeSet;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWeaponSubsystem*                   WeaponSubsystem;                                   // 0x0368(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnPlayerDie;                                       // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool InIsClawG)> OnClawTransformed;                                // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         StoryEndingBranchFlag;                             // 0x0390(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CacheRedCapsuleName;                               // 0x0394(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CacheHairOrnamentName;                             // 0x039C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CacheSacredSwordName;                              // 0x03A4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CacheUFOWeaponName;                                // 0x03AC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CacheExorcismPotionName;                           // 0x03B4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RestrictionFlag;                                   // 0x03BC(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRatio;                                       // 0x03C0(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRatio;                                      // 0x03C4(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentMaxSanityRatio;                             // 0x03C8(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SanityRatio;                                       // 0x03CC(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClawTransformRatio;                                // 0x03D0(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxHealthLevel;                                    // 0x03D4(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxStaminaLevel;                                   // 0x03D8(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSanityLevel;                                    // 0x03DC(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuyHealthLevel;                                    // 0x03E0(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuyStaminaLevel;                                   // 0x03E4(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuySanityLevel;                                    // 0x03E8(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_AddMaxHealthByLevel;                            // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_AddMaxStaminaByLevel;                           // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_AddMaxSanityByLevel;                            // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerInventoryComponent*          InventoryComponent;                                // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FaithValue;                                        // 0x0410(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableSavePointOffering;                           // 0x0414(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableSavePointFixWeapon;                          // 0x0415(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableSavePointUpgrade;                            // 0x0416(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ClaimedDLCOmamori;                                 // 0x0417(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ClaimedDLCBoosterPack;                             // 0x0418(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableMap;                                         // 0x0419(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DisableMultiRoundIcon;                             // 0x041A(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceMapArea                                  LastFogMapArea;                                    // 0x041B(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceMapArea                                  LastDarkMapArea;                                   // 0x041C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENoceMapArea, float>                     MapAreaScale;                                      // 0x0420(0x0050)(SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  VisitedLocations;                                  // 0x0470(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceMapStatus>                        DynamicMapIcons;                                   // 0x0480(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<ENoceMapStatus>                        DynamicMapIconsV2;                                 // 0x0490(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceMapGeneralIconData>        GeneralMapIcons;                                   // 0x04A0(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	class FText                                   LastMissionText;                                   // 0x04B0(0x0010)(SaveGame, Protected, NativeAccessSpecifierProtected)
	bool                                          IsUnderHellModeAttack;                             // 0x04C0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENoceClawAlterType>                    AppliedClawAlterTypes;                             // 0x04C8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class FName                                   FogHinaCharMesh;                                   // 0x04D8(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DarkHinaCharMesh;                                  // 0x04E0(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(float InDelta)> OnFaithChanged;                                    // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         NormalHealAmount;                                  // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HardHealAmount;                                    // 0x04FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NightmareHealAmount;                               // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NormalFixCost;                                     // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HardFixCost;                                       // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NightmareFixCost;                                  // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NormalSanityHealRatio;                             // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HardSanityHealRato;                                // 0x0514(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      WeaponFixCosRatiotMap;                             // 0x0518(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           CanNotRepairWeapons;                               // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ENoceUpgradeType Type, int32 Value)> OnMaxLevelChanged;            // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         OmamoriDrawingCount;                               // 0x0588(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OmamoriDrawingSeed;                                // 0x058C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LastSavePointName;                                 // 0x0590(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           ViewedCutscenes;                                   // 0x0598(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)

public:
	void AddFaithValue(int32 Delta);
	int32 AddGeneralMapIcon(const struct FNoceMapGeneralIconData& InNewData);
	void AddMapIcon(const ENoceDynamicMapIconType& InIconType);
	void AddMapIconV2(const ENoceDynamicMapIconChapterType& InChapterType, const ENoceDynamicMapIconIndexType& InIndexType);
	void AddMapLocation(const ENoceMapLocation& InLocation);
	void AddMaxHealthLevel(int32 InValue);
	void AddMaxSanityLevel(int32 InValue);
	void AddMaxStaminaLevel(int32 InValue);
	void AddOmamoriDrawingCount(int32 Delta);
	void AddToViewedCutscene(class FName InName);
	void AddUpgradeLevel(ENoceUpgradeType Type, int32 InValue);
	void ApplyAllAddMaxByLevel();
	void ApplyAttributeRatio();
	void ApplyClawAlterType(ENoceClawAlterType InClawAlterType);
	void ApplyFullHealth();
	void ApplyFullSanity();
	void ApplyFullStamina();
	void ApplyFullWeaponDurability(const int32 Index_0, const bool IsFogWeapon);
	void ApplyGameplayEffects(const TArray<struct FSoftClassPath>& GameplayEffects);
	void BP_AddHealth(float AddValue);
	void BP_AddSanity(float AddValue);
	void BP_ApplyFullHealth();
	void BP_ApplyFullSanity();
	void BP_ApplyFullStamina();
	bool CanUseConsumableType(int32 InTypeBitmask);
	bool CanUseConsumableTypeHealth();
	bool CanUseConsumaleTypeClawTransform();
	bool CanUseConsumaleTypeCurrentMaxSanity();
	bool CanUseConsumaleTypeSanity();
	bool CanUseConsumaleTypeWeapon();
	void ClaimDLCBoosterPack();
	void ClaimDLCOmamori();
	void FixWeaponDurabilityByCost(ENoceActionLevel ActionLevel, const int32 Index_0, const int32 Percent, const bool IsFogWeapon);
	bool GetCanShowSavePointFixWeapon();
	bool GetDisableMultiRoundIcon();
	bool GetEnableMap();
	bool GetEnableSavePointFixWeapon();
	bool GetEnableSavePointOffering();
	bool GetEnableSavePointUpgrade();
	TArray<class FName> GetFaithItemIDs();
	int32 GetFaithValue();
	float GetFixCost(ENoceActionLevel InActionLevel, class FName InWeaponName);
	void GetGeneralMapIconData(TArray<struct FNoceMapGeneralIconData>* OutResult);
	float GetHealthHealAmount(ENoceActionLevel ActionLevel);
	int32 GetHealthHealCost(ENoceActionLevel ActionLevel);
	class FName GetHinaCharMesh(ENocePlayerType InPlayerType);
	bool GetIsUnderHellModeAttack();
	ENoceMapArea GetLastMapArea();
	class FText GetLastMissionText();
	float GetMapAreaScale(const ENoceMapArea& InArea, float DefaultScale);
	ENoceMapStatus GetMapIconStatus(const ENoceDynamicMapIconType& InIconType);
	ENoceMapStatus GetMapIconStatusV2(const ENoceDynamicMapIconChapterType& InChapterType, const ENoceDynamicMapIconIndexType& InIndexType);
	int32 GetMaxHealthLevel();
	int32 GetMaxSanityLevel();
	int32 GetMaxStaminaLevel();
	int32 GetOmamoriDrawingCount();
	float GetSanityHealAmount(ENoceActionLevel ActionLevel);
	int32 GetSanityHealCost(ENoceActionLevel ActionLevel);
	float GetSanityHealRatio(ENoceActionLevel ActionLevel);
	int32 GetUpgradeLevel(ENoceUpgradeType Type);
	int32 GetWeaponDurabilityFixCost(ENoceActionLevel ActionLevel, const int32 Index_0, const bool IsFogWeapon);
	bool HasBroochKeyItem();
	bool HasExorcismPotion();
	bool HasMapLocation(const ENoceMapLocation& InLocation);
	bool HasSacredSword();
	bool HasUsedDebugTeleport();
	void HealHealthByCost(ENoceActionLevel ActionLevel, int32 Cost);
	void HealSanityByCost(ENoceActionLevel ActionLevel, int32 Cost);
	bool IsClawAlterTypeApplied(ENoceClawAlterType InClawAlterType);
	bool IsDLCBoosterPackClaimed();
	bool IsDLCOmamoriClaimed();
	bool IsFullHealth();
	bool IsFullSanity();
	bool IsFullWeaponDurability(const int32 Index_0, const bool IsFogWeapon);
	bool IsNewCutscene(class FName InName);
	void IsNotebookHintBlocked(bool* IsBlocked);
	bool IsRestrictionMatch(int32 BitMask);
	bool IsRestrictionMatchFlag(ENocePlayerRestriction Flag);
	bool IsStoryEndingBranchMatch(int32 BitMask);
	bool IsStoryEndingBranchMatchFlag(ENoceStoryEndingBranch Flag);
	void MassRemoveMapIconV2(const TArray<ENoceDynamicMapIconChapterType>& InChapterTypes, const TMap<ENoceDynamicMapIconChapterType, struct FNoceMapDynamicIconArray>& InExceptions);
	float OmamoriRandRange(float InMin, float InMax);
	void OnAddNewItem(ENoceInventoryType InventoryType, class FName ID);
	void OnAddNewWeapon(class FName ID);
	void OnBeforeChangeWeapon();
	void OnChangeOmamori(int32 Index_0, class FName OldID, class FName NewID);
	void OnChangeWeapon(int32 Index_0);
	void OnDiscardEquippedWeapon();
	void OnSetOmamoriSlotNum(int32 NewSlotNum);
	void OnUseConsumableItem(class FName ID);
	void OnWeaponChanged(class ANoceWeapon* NewWeapon);
	void OnWeaponDurabilityChanged(class FName InWeaponName, float InDurability, bool InIsDiscarded, bool InIsBroken);
	void RecordAttributeRatio();
	void RefreshGameplayTagsForClawAlterType();
	void RemoveAllAddMaxByLevel();
	void RemoveClawAlterType(ENoceClawAlterType InClawAlterType);
	void RemoveFromViewedCutscene(class FName InName);
	void RemoveGameplayEffects(const TArray<struct FSoftClassPath>& GameplayEffects);
	void RemoveMapIcon(const ENoceDynamicMapIconType& InIconType);
	void RemoveMapIconV2(const ENoceDynamicMapIconChapterType& InChapterType, const ENoceDynamicMapIconIndexType& InIndexType);
	void RemoveMapLocation(const ENoceMapLocation& InLocation);
	void RemoveRestriction(int32 BitMask);
	void RemoveRestrictionFlag(ENocePlayerRestriction Flag);
	void RemoveStoryEndingBranch(int32 BitMask);
	void RemoveStoryEndingBranchFlag(ENoceStoryEndingBranch Flag);
	void ResetForTheNewRound();
	void SetDisableMultiRoundIcon(bool InDisableMultiRoundIcon);
	void SetEnableMap(bool InEnableMap);
	void SetEnableSavePointFixWeapon(bool InEnable);
	void SetEnableSavePointOffering(bool InEnable);
	void SetEnableSavePointUpgrade(bool InEnable);
	void SetHinaCharMesh(ENocePlayerType InPlayerType, class FName InCharMesh);
	void SetIsUnderHellModeAttack(bool Value);
	void SetLastMapArea(const ENoceMapArea& InArea);
	void SetLastMissionText(const class FText& InText);
	void SetMapAreaScale(const ENoceMapArea& InArea, const float& InScale);
	void SetMapIconStatus(const ENoceDynamicMapIconType& InIconType, const ENoceMapStatus& InStatus);
	void SetMapIconStatusV2(const ENoceDynamicMapIconChapterType& InChapterType, const ENoceDynamicMapIconIndexType& InIndexType, const ENoceMapStatus& InStatus);
	void SetRestriction(int32 BitMask);
	void SetRestrictionFlag(ENocePlayerRestriction Flag);
	void SetStoryEndingBranch(int32 BitMask);
	void SetStoryEndingBranchFlag(ENoceStoryEndingBranch Flag);
	void SetUsedDebugTeleport(bool InValue);
	void UpdateGeneralMapIconVisibility(int32 Index_0, bool InIsVisible);
	void UpdateLastSavePoint(class AActor* InSavePointActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerState")
	}
	static class ANocePlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePlayerState>();
	}
};
DUMPER7_ASSERTS_ANocePlayerState;

// Class GameNoce.NoceInventoryLetterWidget
// 0x0040 (0x0488 - 0x0448)
class UNoceInventoryLetterWidget : public UNoceInventoryCollectiblePage
{
public:
	class UNoceInventoryImageDialogWidget*        ImageDialog;                                       // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           LetterItems;                                       // 0x0450(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           NewLetterGroupItems;                               // 0x0460(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   GroupName;                                         // 0x0470(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   LastGroupName;                                     // 0x0480(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryLetterWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryLetterWidget")
	}
	static class UNoceInventoryLetterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryLetterWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryLetterWidget;

// Class GameNoce.NocePlayerKatanaComponent
// 0x00B0 (0x0150 - 0x00A0)
class UNocePlayerKatanaComponent final : public UActorComponent
{
public:
	float                                         NonKatanaKillDurabilityRecoverRatio;               // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NonKatanaAttackDurabilityRecoverRatio;             // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoDefenseHalfAngle;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         ScabbardClassActor;                                // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ScabbardAttachSocket;                              // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ScabbardHandAttachSocket;                          // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ScabbardKatanaMaterialIndex;                       // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ScabbardActor;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UAnimInstance>           OwnerAnimInst;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerState*                       PlayerState;                                       // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNocePlayerInventoryComponent*          PlayerInventoryComponent;                          // 0x0120(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 ScabbardMesh;                                      // 0x0130(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachScabbardToHand(bool InValue);
	bool CanAutoAbilityBasic();
	void HandleHideWeapon(bool InHide);
	void HandleOnPossessed(bool InPossessed);
	void HandlePlayerShowHide(bool InShow);
	void OnAddNewWeapon(class FName InID);
	void OnChangeWeapon(int32 InNewIndex);
	void OnDiscardWeapon(class FName InID);
	void OnEnemyDamage(class AActor* InHitActor, float InDamage, bool InIsDead);
	void OnGameplayTagChanged(const struct FGameplayTag& Tag, int32 NewCount);
	void ShowScabbardKatana(bool InShow);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerKatanaComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerKatanaComponent")
	}
	static class UNocePlayerKatanaComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerKatanaComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerKatanaComponent;

// Class GameNoce.NoceInventoryListItemWidget
// 0x0058 (0x0418 - 0x03C0)
class UNoceInventoryListItemWidget : public UNoceScrollItemWidget
{
public:
	class UWidgetAnimation*                       SelectEquipFail;                                   // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectToEquip;                                     // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       UnfocusEquip;                                      // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectEquip;                                       // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FocusEquip;                                        // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DefaultEquip;                                      // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Count;                                             // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             ItemName;                                          // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Item;                                              // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNewIconWidget*                     WBP_Inventory_NewIcon;                             // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInventoryItemListObject*               CurrentData;                                       // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EquipFailed();
	void OnSelectEquipFailCompleted();
	void OnSelectToEquipCompleted();
	void PlaySelectToEquip();
	void RefreshEquipped(bool InIsEquipped);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryListItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryListItemWidget")
	}
	static class UNoceInventoryListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryListItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryListItemWidget;

// Class GameNoce.NoceInventoryListWidget
// 0x0078 (0x0378 - 0x0300)
class UNoceInventoryListWidget : public UNoceUserWidgetBase
{
public:
	class UHorizontalBox*                         Count_HorizontalBox;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Number;                                            // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NumberSlash;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NumberAll;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceListView*                          ItemList;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NotBlankSlotNum;                                   // 0x0328(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         PointGroup;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             PointNumber;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         EmaGroup;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             EmaNumber;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            NumberNormalColor;                                 // 0x0350(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            NumberZeroColor;                                   // 0x0364(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void DiscardItem();
	void PlayEquipFailed();
	void RefreshEquipped(const TArray<class FName>& EquippedItem);
	void SelectItem(class FName ID);
	void SetAllData(const TArray<class UInventoryItemListObject*>& Items);
	void SetConsumableData(const TArray<struct FNoceInventoryConsumable>& Items, const TArray<class FName>& EquippedItems, int32 InPointNum, int32 InEmaNum);
	void SetOmamoriData(const TArray<struct FNoceInventoryData>& Items, const TArray<class FName>& EquippedItems);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryListWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryListWidget")
	}
	static class UNoceInventoryListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryListWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryListWidget;

// Class GameNoce.NoceInventoryOmamoriWidget
// 0x0000 (0x03B8 - 0x03B8)
class UNoceInventoryOmamoriWidget : public UNoceFocusablePage
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryOmamoriWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryOmamoriWidget")
	}
	static class UNoceInventoryOmamoriWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryOmamoriWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryOmamoriWidget;

// Class GameNoce.NocePopWindowBtnWidget
// 0x0028 (0x03A0 - 0x0378)
class UNocePopWindowBtnWidget final : public UNoceSelectItemWidget
{
public:
	class UNoceUIActionImage*                     NoceUIActionImage;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlock;                                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ActionName;                                        // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   BtnText;                                           // 0x0390(0x0010)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void UpdateText(const class FName& InActionName, const class FText& InBtnText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePopWindowBtnWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePopWindowBtnWidget")
	}
	static class UNocePopWindowBtnWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePopWindowBtnWidget>();
	}
};
DUMPER7_ASSERTS_UNocePopWindowBtnWidget;

// Class GameNoce.NoceInventoryPopWindowWidget
// 0x0010 (0x03C0 - 0x03B0)
class UNoceInventoryPopWindowWidget final : public UNoceFocusableWidget
{
public:
	class UTextBlock*                             OldCountTextBlock;                                 // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NewCountTextBlock;                                 // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowAddSlot(int32 OldSlotNum, int32 NewSlotNum);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryPopWindowWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryPopWindowWidget")
	}
	static class UNoceInventoryPopWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryPopWindowWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryPopWindowWidget;

// Class GameNoce.NoceMeshDissolveComponent
// 0x0030 (0x00D0 - 0x00A0)
class UNoceMeshDissolveComponent final : public UActorComponent
{
public:
	TArray<class FName>                           DissolveParameterNames;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   DissolveMeshTag;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimInstance*                          AnimInstance;                                      // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInstanceDynamic*>       MaterialInstanceDynamics;                          // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void OnDie();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMeshDissolveComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMeshDissolveComponent")
	}
	static class UNoceMeshDissolveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMeshDissolveComponent>();
	}
};
DUMPER7_ASSERTS_UNoceMeshDissolveComponent;

// Class GameNoce.NoceTabChildWidget
// 0x0008 (0x0380 - 0x0378)
class UNoceTabChildWidget : public UNoceSelectItemWidget
{
public:
	class UTextBlock*                             TabName;                                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTabChildWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTabChildWidget")
	}
	static class UNoceTabChildWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTabChildWidget>();
	}
};
DUMPER7_ASSERTS_UNoceTabChildWidget;

// Class GameNoce.NoceInventoryTabChildWidget
// 0x0010 (0x0390 - 0x0380)
class UNoceInventoryTabChildWidget : public UNoceTabChildWidget
{
public:
	class FText                                   OverrideText;                                      // 0x0380(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryTabChildWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryTabChildWidget")
	}
	static class UNoceInventoryTabChildWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryTabChildWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryTabChildWidget;

// Class GameNoce.NocePreloadAssetActor
// 0x0040 (0x02D0 - 0x0290)
class ANocePreloadAssetActor : public AActor
{
public:
	TArray<class UDataTable*>                     PreloadDTs;                                        // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UNeoAudioSwitchData*>            PreloadAudioSwitchs;                               // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UDataTable*>                     PreloadAudioTrigger;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        RootAssetAndClassInstances;                        // 0x02C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePreloadAssetActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePreloadAssetActor")
	}
	static class ANocePreloadAssetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePreloadAssetActor>();
	}
};
DUMPER7_ASSERTS_ANocePreloadAssetActor;

// Class GameNoce.NoceInventoryTabWidget
// 0x0018 (0x0330 - 0x0318)
class UNoceInventoryTabWidget : public UNoceTabWidget
{
public:
	class UUserWidget*                            WBP_Inventory_TabChild;                            // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_Inventory_TabChild_1;                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_Inventory_TabChild_2;                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryTabWidget")
	}
	static class UNoceInventoryTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryTabWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryTabWidget;

// Class GameNoce.NocePlayerShowHideComponent
// 0x0028 (0x00C8 - 0x00A0)
class UNocePlayerShowHideComponent final : public UActorComponent
{
public:
	class UNoceCheatManager*                      CheatManager;                                      // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UATPCCameraComponent*                   ATPCCameraComponent;                               // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsOverlapingPlayerMesh();
	void SetForceUpateIsOverlapingPlayerMesh(bool InValue);
	void UpdateTickCallBack();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerShowHideComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerShowHideComponent")
	}
	static class UNocePlayerShowHideComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerShowHideComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerShowHideComponent;

// Class GameNoce.NoceInventoryWeaponItem
// 0x0068 (0x03E8 - 0x0380)
class UNoceInventoryWeaponItem : public UNoceInventoryItem
{
public:
	class UWidgetAnimation*                       EquipDefault;                                      // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipFocus;                                        // 0x0388(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipSelect;                                       // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipUnfocus;                                      // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectToEquip;                                     // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipDefaultToDefault;                             // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectToEquipInventory;                            // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipSelectInventory;                              // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EquipSelectDrop;                                   // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectEquipFail;                                   // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SelectFail;                                        // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableSelectFail;                                 // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsAutoPlayNextAnimation;                           // 0x03E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInventory;                                       // 0x03E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsEquip;                                           // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanDiscard;                                        // 0x03E3(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Discard();
	void Equip();
	void OnEquipSelectDropCompleted();
	void Unequip();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryWeaponItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryWeaponItem")
	}
	static class UNoceInventoryWeaponItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryWeaponItem>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryWeaponItem;

// Class GameNoce.NoceInventoryWeaponWidget
// 0x0178 (0x0530 - 0x03B8)
class UNoceInventoryWeaponWidget : public UNoceFocusablePage
{
public:
	TMulticastInlineDelegate<void(bool Enable)>   ShowHideTab;                                       // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UTextBlock*                             NameText;                                          // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DescriptionText;                                   // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlock;                                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryImageWidget*              Image;                                             // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Info;                                              // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DurabilityOverlay;                                 // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryWeaponItem*               Inv_WeaponChild1;                                  // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryWeaponItem*               Inv_WeaponChild2;                                  // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryWeaponItem*               Inv_WeaponChild3;                                  // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryWeaponItem*               Inv_SpecialWeapon1;                                // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryWeaponItem*               Inv_SpecialWeapon2;                                // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ViewIn;                                            // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ViewOut;                                           // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CanDiscardIndex;                                   // 0x0430(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   GuideNameWithDiscard;                              // 0x0434(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   GuideNameCanEquipNoDiscard;                        // 0x043C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   GuideNameEquippedNoDiscard;                        // 0x0444(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   GuideNameDisabled;                                 // 0x044C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   PopWindowClass;                                    // 0x0458(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   PopWindowDialogText;                               // 0x0480(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ChangeWeaponTag;                                   // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ViewGuide;                                         // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIDurabilityWidgetData*            Data;                                              // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ViewInSound;                                       // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ViewOutSound;                                      // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectWeaponSound;                                 // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               EquipSound;                                        // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               EquipFailedSound;                                  // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowFadeInSound;                              // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               PopWindowFadeOutSound;                             // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               DiscardSound;                                      // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UNocePopWindowWidget*                   PopWindow;                                         // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceHorizontalList*                    List;                                              // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePlayerInventoryComponent*          InventoryComponent;                                // 0x04F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FNoceInventoryWeapon>           Weapons;                                           // 0x0500(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsViewIn;                                          // 0x0510(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AllIDs;                                            // 0x0518(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UNoceWeaponSubsystem*                   WeaponSubsystem;                                   // 0x0528(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnListMouseConfirm(int32 Index_0);
	void OnPopWindowClose();
	void UpdateSelection(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInventoryWeaponWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInventoryWeaponWidget")
	}
	static class UNoceInventoryWeaponWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInventoryWeaponWidget>();
	}
};
DUMPER7_ASSERTS_UNoceInventoryWeaponWidget;

// Class GameNoce.NoceInvincibleComponent
// 0x0040 (0x00E0 - 0x00A0)
class UNoceInvincibleComponent final : public UActorComponent
{
public:
	class UNoceCheatManager*                      CheatManager;                                      // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                MyASC;                                             // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           InvincibleTokenSet;                                // 0x00B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndInvincible(class FName InToken);
	void HandleOnPossessed(bool InPossessed);
	bool IsInvincible();
	bool IsTokenInvincible(class FName InToken);
	void OnTimerUp();
	void StartInvincible(class FName InToken);
	void StartInvincibleWithDuration(float InDuration, class FName InToken);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceInvincibleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceInvincibleComponent")
	}
	static class UNoceInvincibleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceInvincibleComponent>();
	}
};
DUMPER7_ASSERTS_UNoceInvincibleComponent;

// Class GameNoce.NoceProgressStateInstance
// 0x0010 (0x0100 - 0x00F0)
class UNoceProgressStateInstance final : public USMStateInstance
{
public:
	struct FGameplayTag                           StartCondition;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundBitmask;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceProgressStateInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceProgressStateInstance")
	}
	static class UNoceProgressStateInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceProgressStateInstance>();
	}
};
DUMPER7_ASSERTS_UNoceProgressStateInstance;

// Class GameNoce.NoceItemChildGroupWidget
// 0x0040 (0x0320 - 0x02E0)
class UNoceItemChildGroupWidget final : public UUserWidget
{
public:
	class UNoceInventoryConsumableItem*           WBP_ItemChild;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryConsumableItem*           WBP_ItemChild_1;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryConsumableItem*           WBP_ItemChild_2;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryConsumableItem*           WBP_ItemChild_3;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryConsumableItem*           WBP_ItemChild_4;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceHorizontalList*                    ShortcutList;                                      // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_310[0x10];                                     // 0x0310(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init();
	void SetNum(int32 TotalNum);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceItemChildGroupWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceItemChildGroupWidget")
	}
	static class UNoceItemChildGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceItemChildGroupWidget>();
	}
};
DUMPER7_ASSERTS_UNoceItemChildGroupWidget;

// Class GameNoce.NocePlayerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNocePlayerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanPlayerActivateTrigger(class UObject* WorldContextObject);
	static class ANocePlayerController* GetNocePlayerController(const class UObject* WorldContextObject);
	static class ANocePlayerState* GetNocePlayerState(const class UObject* WorldContextObject);
	static struct FVector GetPlayerCameraLocation(class UObject* WorldContextObject);
	static struct FRotator GetPlayerCameraRotation(class UObject* WorldContextObject);
	static struct FVector GetRandomLocationAroundPlayer(const class AActor* InPlayer, float InDistance);
	static bool IsActorInPlayerSightViewRange(const class AActor* InActor, const struct FVector2D& RangeX, const struct FVector2D& RangeY);
	static bool IsActorVisuallyBlocked(const class AActor* InActor);
	static bool IsCurrentDarkHinako(class UObject* WorldContextObject);
	static bool IsCurrentFogHinako(class UObject* WorldContextObject);
	static bool IsInPlayerFrustum(const class AActor* InActor, float SphereRatio);
	static bool IsPointInPlayerFrustum(const class UWorld* InWorld, const struct FVector& Point);
	static bool IsPointInPlayerSightViewRange(const struct FVector& InPoint, const class AActor* InPlayer, const struct FVector2D& RangeX, const struct FVector2D& RangeY);
	static bool IsPointVisuallyBlocked(const class UWorld* InWorld, const struct FVector& InPoint, const class AActor* InActor, bool IsShowDebugLine);
	static bool IsSphereInPlayerFrustum(const class UObject* InObject, const struct FVector& Point, float SphereRadius);
	static void SimulateNoceInputAction(const class UObject* WorldContextObject, ENoceInputAction InputAction, bool IsPressed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerFunctionLibrary")
	}
	static class UNocePlayerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNocePlayerFunctionLibrary;

// Class GameNoce.NoceItemShortcutItemWidget
// 0x0078 (0x0378 - 0x0300)
class UNoceItemShortcutItemWidget : public UNoceUserWidgetBase
{
public:
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               Rotate1;                                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Effect_Rote2;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Item;                                              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Number;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               MarkGroup;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  Mark_Top;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Default;                                           // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Decide;                                            // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Disable;                                           // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DisableDecide;                                     // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Empty;                                             // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       EmptyDecide;                                       // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Angle;                                             // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsEmpty;                                           // 0x036C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDisable;                                         // 0x036D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36E[0x2];                                      // 0x036E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttributeCheckType;                                // 0x0370(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SelectMark(bool Select);
	void SetItem(bool InIsDisable, class FName InID, int32 InCount);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceItemShortcutItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceItemShortcutItemWidget")
	}
	static class UNoceItemShortcutItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceItemShortcutItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceItemShortcutItemWidget;

// Class GameNoce.NoceItemSubsystem
// 0x0010 (0x0048 - 0x0038)
class UNoceItemSubsystem final : public UNoceWorldSubsystem
{
public:
	TArray<struct FNoceActorRecord>               ItemRecordArray;                                   // 0x0038(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)

public:
	TArray<struct FNoceActorRecord> GetSaveData();
	bool IsSaveDataExist(class ANoceInteractableBase* InItem);
	void RegisterSaveData(class ANoceInteractableBase* InItem);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceItemSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceItemSubsystem")
	}
	static class UNoceItemSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceItemSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceItemSubsystem;

// Class GameNoce.NoceKanbanWidget
// 0x0008 (0x03B8 - 0x03B0)
class UNoceKanbanWidget : public UNoceFocusableWidget
{
public:
	class UTextBlock*                             MsgTextBlock;                                      // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceKanbanWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceKanbanWidget")
	}
	static class UNoceKanbanWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceKanbanWidget>();
	}
};
DUMPER7_ASSERTS_UNoceKanbanWidget;

// Class GameNoce.NoceKeyBindingWidget
// 0x0010 (0x03C0 - 0x03B0)
class UNoceKeyBindingWidget final : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void()>              OnKeyBindingModified;                              // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ApplyModifiedKeys(bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceKeyBindingWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceKeyBindingWidget")
	}
	static class UNoceKeyBindingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceKeyBindingWidget>();
	}
};
DUMPER7_ASSERTS_UNoceKeyBindingWidget;

// Class GameNoce.NocePostProcessVolume
// 0x0060 (0x0A30 - 0x09D0)
class ANocePostProcessVolume final : public APostProcessVolume
{
public:
	float                                         YawMin;                                            // 0x09D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawMax;                                            // 0x09D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawTolerate;                                       // 0x09D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9DC[0x44];                                     // 0x09DC(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DisableWhenPlayerNotInVolume;                      // 0x0A20(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A21[0x3];                                      // 0x0A21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoundBitmask;                                      // 0x0A24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceEnvironmentSubsystem*              CacheEnvSystem;                                    // 0x0A28(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnExitNotebook();
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);
	void OnGameProgressInitialized(const struct FGameplayTag& NewTag);
	void OnOpenNotebook();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePostProcessVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePostProcessVolume")
	}
	static class ANocePostProcessVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePostProcessVolume>();
	}
};
DUMPER7_ASSERTS_ANocePostProcessVolume;

// Class GameNoce.NoceKuzunohaIconWidget
// 0x0020 (0x0320 - 0x0300)
class UNoceKuzunohaIconWidget : public UNoceUserWidgetBase
{
public:
	class UWidgetAnimation*                       HighlightDefault;                                  // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Highlight;                                         // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               HighlightAnimations;                               // 0x0310(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ResetAnimations();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceKuzunohaIconWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceKuzunohaIconWidget")
	}
	static class UNoceKuzunohaIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceKuzunohaIconWidget>();
	}
};
DUMPER7_ASSERTS_UNoceKuzunohaIconWidget;

// Class GameNoce.NoceLanternLightVolumeComponent
// 0x0058 (0x0130 - 0x00D8)
class UNoceLanternLightVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSweetLightDataRowHandle           LanternPointDataRow;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNoceSweetLightDataRowHandle           LanternVolumeDataRow;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNoceSweetLightDataRowHandle           LanternMainDataRow;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceLanternProgress>           LightDataByProgress;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0x30];                                     // 0x0100(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLanternLightVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLanternLightVolumeComponent")
	}
	static class UNoceLanternLightVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLanternLightVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceLanternLightVolumeComponent;

// Class GameNoce.NoceLetterPointGroupWidget
// 0x0050 (0x0330 - 0x02E0)
class UNoceLetterPointGroupWidget : public UUserWidget
{
public:
	class UNoceLetterPointWidget*                 LetterPoint1;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint2;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint3;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint4;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint5;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint6;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint7;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceLetterPointWidget*                 LetterPoint8;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceLetterPointWidget*>         LetterPoints;                                      // 0x0320(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void UpdateIsNew(const TArray<bool>& IsNew);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLetterPointGroupWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLetterPointGroupWidget")
	}
	static class UNoceLetterPointGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLetterPointGroupWidget>();
	}
};
DUMPER7_ASSERTS_UNoceLetterPointGroupWidget;

// Class GameNoce.NoceLetterPointWidget
// 0x0028 (0x0308 - 0x02E0)
class UNoceLetterPointWidget : public UUserWidget
{
public:
	class UImage*                                 Point;                                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           NewColor;                                          // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           NormalColor;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetIsNew(bool IsNew);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLetterPointWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLetterPointWidget")
	}
	static class UNoceLetterPointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLetterPointWidget>();
	}
};
DUMPER7_ASSERTS_UNoceLetterPointWidget;

// Class GameNoce.NocePlayerPPAnimInstance
// 0x03E0 (0x0750 - 0x0370)
class UNocePlayerPPAnimInstance : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNocePlayerAnimInstance*                MyABP;                                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNocePlayerLookTargetComponent*         LookAtComponent;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class INoceWalkToComponentInterface> WalkToComponentInterface;                  // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIKControllerComponent*                 IKControllerComponent;                             // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFootIK;                                         // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UseFootIKAlpha;                                    // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideFootIKAlpha;                               // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootIKAlphaCurveName;                              // 0x03AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKInterpSpeed;                                 // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKInterpScale;                                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnSlopeForFootIK;                                // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnSlopeForSkirtIK;                               // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BE[0x2];                                      // 0x03BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkirtCtrlRigCurveName;                             // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseSkirtControlRigAlpha;                           // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurLeftFootOffset;                                 // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurRightFootOffset;                                // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftFootName;                                      // 0x03D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightFootName;                                     // 0x03DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKTraceUpDistance;                             // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKTraceDownDistance;                           // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKBlendSpeed;                                  // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKMaxLeftRightDifference;                      // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootIKUseMaxDifference;                            // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootIKMaxAdjustOffset;                             // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLookAt;                                         // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LookAtTransform;                                   // 0x0400(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtRerouteBone;                                 // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtEnableBlendTime;                             // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtDisableBlendTime;                            // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingFullBodyIK;                                 // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentFullBodyIKAlpha;                            // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFullBodyIKContext                     FullBodyContextToCtrlRig;                          // 0x0478(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UseAimIK;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAimIKAlpha;                                 // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetAimTransform;                                // 0x04A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAimIKContext                          AimIKContextToCtrlRig;                             // 0x0500(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UsePoseDriver;                                     // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PoseDriverBlendTime;                               // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachLeftHandIKAlphaCurveName;                    // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachLeftHandIKAlpha;                             // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachRightHandIKAlphaCurveName;                   // 0x0564(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachRightHandIKAlpha;                            // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Attach_LeftHandOffsetTransform;                    // 0x0570(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Attach_RightHandOffsetTransform;                   // 0x05D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HandAttachObjectEnable;                            // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftHandTraceOffset;                               // 0x0638(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandTraceOffset;                              // 0x0650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MatchToTargetSpeed;                                // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkirtRigidBodyAlpha;                               // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRBWorldCollision;                                 // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             RBWorldCollisionChannel;                           // 0x0671(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_672[0x2];                                      // 0x0672(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScarfRigidBodyAlpha;                               // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShawlKawaiiAlpha;                                  // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FurClawRigidBodyAlpha;                             // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FurClawGRigidBodyAlpha;                            // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScabbardRigidBodyAlpha;                            // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransferBoneVelocities;                           // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x0690(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x06A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x06C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkirCurveName;                                     // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScabbardCurveName;                                 // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitReactionActiveAlpha;                            // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitReactionAlpha;                                  // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             HitReactionControlTransform;                       // 0x06F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanApplyLookAtIK();
	void OnAttackTraceHit(const TArray<struct FNoceAttackHitResult>& InHitResults);
	void UpdateApplyAimIK();
	void UpdateApplyFootIK(float DeltaTime);
	void UpdateApplyFullBodyIK();
	void UpdateApplyLookAtIK(float DeltaTime);
	void UpdateApplyPoseDriver();
	void UpdateApplyRigidBody();
	void UpdateAttachObject();
	void UpdateFootIK(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerPPAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerPPAnimInstance")
	}
	static class UNocePlayerPPAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerPPAnimInstance>();
	}
};
DUMPER7_ASSERTS_UNocePlayerPPAnimInstance;

// Class GameNoce.NoceLetterTabItemWidget
// 0x0008 (0x0380 - 0x0378)
class UNoceLetterTabItemWidget : public UNoceSelectItemWidget
{
public:
	class UNoceNewIconWidget*                     WBP_Inventory_NewIcon;                             // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLetterTabItemWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLetterTabItemWidget")
	}
	static class UNoceLetterTabItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLetterTabItemWidget>();
	}
};
DUMPER7_ASSERTS_UNoceLetterTabItemWidget;

// Class GameNoce.NoceLetterTabWidget
// 0x0018 (0x02F8 - 0x02E0)
class UNoceLetterTabWidget : public UUserWidget
{
public:
	class UNoceVerticalList*                      List;                                              // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           VerticalBox;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNoceSelectItemWidget>      LetterTabItemWidgetClass;                          // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init();
	void SetLetters(int32 CurrentIndex, int32 TotalNum, const TArray<bool>& IsNews);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLetterTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLetterTabWidget")
	}
	static class UNoceLetterTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLetterTabWidget>();
	}
};
DUMPER7_ASSERTS_UNoceLetterTabWidget;

// Class GameNoce.NoceLevelFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceLevelFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class USMInstance* AddFSMClassReferenceByName(class AActor* InActor, const class FString& InClassName);
	static void ApplyDarknessDataToMaterial(class UObject* WorldContextObject, const struct FNoceDarknessSetting& InData, class UMaterialParameterCollection* TargetComp);
	static void ApplyDirectionalLightData(const struct FNoceDirectionalLightSetting& InData, class UDirectionalLightComponent* TargetComp);
	static void ApplyExpFogDataToComponent(const struct FNoceExpFogSetting& InData, class UExponentialHeightFogComponent* TargetComp);
	static void ApplyFogNiagaraParameterCollection(const struct FNoceFogNiagaraSetting& InData, class UNiagaraParameterCollectionInstance* InNPCEnvFog, class UNiagaraParameterCollectionInstance* InAllAreaFog, class UNiagaraParameterCollectionInstance* InHellSmoke);
	static void ApplyHellSmokeMPC(const struct FNoceFogNiagaraSetting& InData, class UMaterialParameterCollectionInstance* InMPC);
	static void ApplyLerpDarknessDataToMaterial(class UObject* WorldContextObject, class UMaterialParameterCollection* TargetComp, const struct FNoceDarknessSetting& SourceData, const struct FNoceDarknessSetting& TargetData, float Alpha);
	static void ApplyLerpDirectionalLightData(class UDirectionalLightComponent* TargetComp, const struct FNoceDirectionalLightSetting& SourceData, const struct FNoceDirectionalLightSetting& TargetData, float Alpha);
	static void ApplyLerpExpFogDataToComponent(class UExponentialHeightFogComponent* TargetComp, const struct FNoceExpFogSetting& SourceData, const struct FNoceExpFogSetting& TargetData, float Alpha);
	static void ApplyLerpNiagaraData(class UNiagaraComponent* TargetNC, const struct FNoceLanternNiagaraSetting& SourceData, const struct FNoceLanternNiagaraSetting& TargetData, float Alpha);
	static void ApplyLerpPointLightData(class UPointLightComponent* TargetComp, const struct FNoceSpotLightSetting& SourceData, const struct FNoceSpotLightSetting& TargetData, float Alpha);
	static void ApplyLerpSkyAtmosphereLightData(class USkyAtmosphereComponent* TargetComp, const struct FNoceSkyAtmosphereSetting& SourceData, const struct FNoceSkyAtmosphereSetting& TargetData, float Alpha);
	static void ApplyLerpSkyDomeLightData(class UMaterialInstanceDynamic* TargetMI, const struct FNoceSkyDomeSetting& SourceData, const struct FNoceSkyDomeSetting& TargetData, float Alpha);
	static void ApplyLerpSkyLightData(class USkyLightComponent* TargetComp, const struct FNoceSkyLightSetting& SourceData, const struct FNoceSkyLightSetting& TargetData, float Alpha);
	static void ApplyLerpSpotLightData(class USpotLightComponent* TargetComp, const struct FNoceSpotLightSetting& SourceData, const struct FNoceSpotLightSetting& TargetData, float Alpha);
	static void ApplyLerpVolumetricFogDataToMaterial(class UMaterialInstanceDynamic* TargetComp, const struct FNoceVolumetricFogSetting& SourceData, const struct FNoceVolumetricFogSetting& TargetData, float Alpha, bool IsFogTown);
	static void ApplyNiagaraData(const struct FNoceLanternNiagaraSetting& InData, class UNiagaraComponent* TargetNC);
	static void ApplyPointLightData(const struct FNoceSpotLightSetting& InData, class UPointLightComponent* TargetComp);
	static void ApplySkyAtmosphereData(const struct FNoceSkyAtmosphereSetting& InData, class USkyAtmosphereComponent* TargetComp);
	static void ApplySkyDomeData(const struct FNoceSkyDomeSetting& InData, class UMaterialInstanceDynamic* TargetMI);
	static void ApplySkyLightData(const struct FNoceSkyLightSetting& InData, class USkyLightComponent* TargetComp, bool ForceRecaptureSky);
	static void ApplySpotLightData(const struct FNoceSpotLightSetting& InData, class USpotLightComponent* TargetComp);
	static void ApplyVolumetricFogDataToMaterial(const struct FNoceVolumetricFogSetting& InData, class UMaterialInstanceDynamic* TargetComp, bool IsFogTown);
	static void ApplyVolumetricFogDataToMPC(class UObject* WorldContextObject, const struct FNoceVolumetricFogSetting& InData, class UMaterialParameterCollection* TargetMPC);
	static void ApplyWindData(const struct FNoceWindSetting& InData, class UNeoWindComponent* TargetWindComp, bool ResetCurves, bool ForceInstantSwitch);
	static bool CanSkipGimmick();
	static struct FSoftObjectPath GetCombatTestMapPath();
	static struct FNoceDarknessSetting GetDarknessData(class FName InName);
	static struct FNoceDirectionalLightSetting GetDirLightData(class FName InName);
	static struct FNoceDirectionalLightSetting GetDirLightDataFromComponent(class UDirectionalLightComponent* InComp);
	static struct FNoceExpFogSetting GetExpFogDataFromComponent(class UExponentialHeightFogComponent* InComp);
	static struct FNoceFogNiagaraSetting GetFogNiagaraData(class FName InName);
	static struct FNoceFogNiagaraSetting GetFogNiagaraDataFromNPC(class UNiagaraParameterCollectionInstance* InNPCEnvFog, class UNiagaraParameterCollectionInstance* InAllAreaFog, class UNiagaraParameterCollectionInstance* InHellSmoke);
	static struct FSoftObjectPath GetGameMapPath();
	static struct FNoceExpFogSetting GetHeightFogData(class FName InName);
	static struct FNoceLanternNiagaraSetting GetLanternNiagaraData(class FName InName);
	static struct FNoceLumenTranslucencySetting GetLumenTranlucencyData(class FName InName);
	static class UNiagaraParameterCollectionInstance* GetNiagaraPCInstance(class UObject* WorldContextObject, const struct FSoftObjectPath& InNPCPath);
	static struct FNoceLanternNiagaraSetting GetNiagaraSettingFromComponent(class UNiagaraComponent* InNC);
	static struct FNoceSkyAtmosphereSetting GetSkyAtmosphereData(class FName InName);
	static struct FNoceSkyAtmosphereSetting GetSkyAtmosphereDataFromComponent(class USkyAtmosphereComponent* InComp);
	static struct FNoceSkyDomeSetting GetSkyDomeData(class FName InName);
	static struct FNoceSkyLightSetting GetSkyLightData(class FName InName);
	static struct FNoceSkyLightSetting GetSkyLightDataFromComponent(class USkyLightComponent* InComp);
	static struct FNoceSpotLightSetting GetSpotLightDataFromComponent(class USpotLightComponent* InComp);
	static struct FNoceSSFSSetting GetSSFSData(class FName InName);
	static struct FNoceSpotLightSetting GetSweetLightData(class FName InName);
	static struct FSoftObjectPath GetTitleMapPath();
	static struct FNoceVolumetricFogSetting GetVolumetricFogData(class FName InName);
	static struct FNoceWindSetting GetWindData(class FName InName);
	static bool IsTargetLocationStreamingComplete(const class AActor* InActor, const TSet<class FName>& InTargetGrids, const struct FVector& InLocation, const struct FRotator& InRotation, float InRadius);
	static struct FNoceDarknessSetting LerpDarknessData(const struct FNoceDarknessSetting& SourceData, const struct FNoceDarknessSetting& TargetData, float Alpha);
	static struct FNoceDirectionalLightSetting LerpDirectionalLightData(const struct FNoceDirectionalLightSetting& SourceData, const struct FNoceDirectionalLightSetting& TargetData, float Alpha);
	static struct FNoceExpFogSetting LerpExpFogData(const struct FNoceExpFogSetting& SourceData, const struct FNoceExpFogSetting& TargetData, float Alpha);
	static struct FNoceFogNiagaraSetting LerpFogNiagaraData(const struct FNoceFogNiagaraSetting& SourceData, const struct FNoceFogNiagaraSetting& TargetData, float Alpha);
	static struct FNoceLanternNiagaraSetting LerpNiagaraData(const struct FNoceLanternNiagaraSetting& SourceData, const struct FNoceLanternNiagaraSetting& TargetData, float Alpha);
	static struct FNoceSkyAtmosphereSetting LerpSkyAtmosphereData(const struct FNoceSkyAtmosphereSetting& SourceData, const struct FNoceSkyAtmosphereSetting& TargetData, float Alpha);
	static struct FNoceSkyDomeSetting LerpSkyDomeData(const struct FNoceSkyDomeSetting& SourceData, const struct FNoceSkyDomeSetting& TargetData, float Alpha);
	static struct FNoceSkyLightSetting LerpSkyLightData(const struct FNoceSkyLightSetting& SourceData, const struct FNoceSkyLightSetting& TargetData, float Alpha);
	static struct FNoceSpotLightSetting LerpSpotLightData(const struct FNoceSpotLightSetting& SourceData, const struct FNoceSpotLightSetting& TargetData, float Alpha);
	static struct FNoceVolumetricFogSetting LerpVolumetricFogData(const struct FNoceVolumetricFogSetting& SourceData, const struct FNoceVolumetricFogSetting& TargetData, float Alpha);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLevelFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLevelFunctionLibrary")
	}
	static class UNoceLevelFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLevelFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceLevelFunctionLibrary;

// Class GameNoce.NocePickupLetter
// 0x0008 (0x02B0 - 0x02A8)
class ANocePickupLetter : public ANocePickupBase
{
public:
	struct FNoceLetterDataRowHandle               LetterID;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupLetter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupLetter")
	}
	static class ANocePickupLetter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupLetter>();
	}
};
DUMPER7_ASSERTS_ANocePickupLetter;

// Class GameNoce.NoceLevelSequenceActor
// 0x0038 (0x0370 - 0x0338)
class ANoceLevelSequenceActor final : public ALevelSequenceActor
{
public:
	TSoftObjectPtr<class ALevelInstance>          LevelInstanceActor;                                // 0x0338(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RebindingActors;                                   // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_361[0xF];                                      // 0x0361(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLevelSequenceActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLevelSequenceActor")
	}
	static class ANoceLevelSequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceLevelSequenceActor>();
	}
};
DUMPER7_ASSERTS_ANoceLevelSequenceActor;

// Class GameNoce.NoceQuestWidget
// 0x0020 (0x0388 - 0x0368)
class UNoceQuestWidget : public UNoceAnimWidget
{
public:
	class UTextBlock*                             TextBlock;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HideTimer;                                         // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeInTextTime;                                    // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           HideTimerHandler;                                  // 0x0378(0x0008)(BlueprintVisible, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ShowQuest(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceQuestWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceQuestWidget")
	}
	static class UNoceQuestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceQuestWidget>();
	}
};
DUMPER7_ASSERTS_UNoceQuestWidget;

// Class GameNoce.NoceLightFadeComponent
// 0x0010 (0x0158 - 0x0148)
class UNoceLightFadeComponent final : public UNoceFadeComponentBase
{
public:
	bool                                          NeedCheckConflict;                                 // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149[0xF];                                      // 0x0149(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FixLightFadeDistance(bool IsFixed, float Distance);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLightFadeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLightFadeComponent")
	}
	static class UNoceLightFadeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLightFadeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceLightFadeComponent;

// Class GameNoce.NoceLightFadeInterface
// 0x0000 (0x0000 - 0x0000)
class INoceLightFadeInterface final
{
public:
	float GetAttenuationRadius();
	float GetEmissiveIntensity();
	float GetIntensity();
	class UMaterialInstanceDynamic* GetMaterialInstance();
	bool NeedManualInitialize();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLightFadeInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLightFadeInterface")
	}
	static class INoceLightFadeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceLightFadeInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceLightFadeInterface;

// Class GameNoce.NoceLightProps
// 0x0120 (0x03B0 - 0x0290)
class ANoceLightProps final : public AActor
{
public:
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightMaxDrawDistance;                              // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LightMaxDistanceFadeRange;                         // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     ReplaceLightFunctionMaterial;                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNeedSave;                                         // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceLightRigidBodyWireType                   RigidBodyWireType;                                 // 0x02B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENoceLightRigidBodyWireType, struct FNoceLightRigidBodyWireData> RigidBodyWireData;         // 0x02B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class FName                                   RigidBodyWireCompTag;                              // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceLightSavableData                  NoceLightSavableData;                              // 0x0310(0x00A0)(SaveGame, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void InitRigidBodyWire();
	void SetLightMaxDistanceFadeRange(float InValue);
	void SetLightMaxDrawDistance(float InValue);
	void SetReplaceLightFunctionMaterial(class UMaterialInterface* InValue);
	void UpdateSavablePropertiesBPWhenCreateRecord();

	class ULightComponent* GetLightComp() const;
	float GetLightMaxDistanceFadeRange() const;
	float GetLightMaxDrawDistance() const;
	class UMaterialInterface* GetReplaceLightFunctionMaterial() const;
	bool IsLoadLoadRecordData() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLightProps")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLightProps")
	}
	static class ANoceLightProps* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceLightProps>();
	}
};
DUMPER7_ASSERTS_ANoceLightProps;

// Class GameNoce.NocePickupsPoint
// 0x0068 (0x0308 - 0x02A0)
class ANocePickupsPoint : public ANoceActor
{
public:
	class FName                                   DisplayText;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x02A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SceneRootComponent;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ENoceAutoHintSize                             SpawnPickupAutoHintSize;                           // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasToResizeTriggerBox;                             // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPickupsDynamicallyGenerated;                     // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C3[0x5];                                      // 0x02C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          ReferencedBox;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFixed;                                           // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeDynamic;                                      // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanOnlyBeDynamic;                                  // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamic;                                         // 0x02D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNocePickupsPointDeployedData          DeployedData;                                      // 0x02D8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DynamicProgressTag;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExactMatch;                                      // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPickedup;                                       // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGeneratePickupsOnBeginPlay;                      // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FB[0x5];                                      // 0x02FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ANoceInteractableBase*                  SpawnedPickups;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanRegisterSaveData();
	bool CheckIfDeployedDataFit();
	void DoSetTriggerBox();
	class ANoceInteractableBase* GenerateDynamicPickups(TSubclassOf<class ANoceInteractableBase> InInteractable, bool InIsForceGenerate);
	class ANoceInteractableBase* GeneratePickupsByCurrentState();
	void OnActorModified_BP();
	void OnPickupsGenerateDynamically_BP();
	void OnSetupPickups_BP();
	void RemovePickups();
	void SetupEvntPickups_BP();
	void SetupSpawnedPickups();
	void ShowDebugSelection(bool IsShow);
	void ShowDynamicPickupsDebugInfo();
	void UpdateSpawnedPickups();

	bool CanBeDynamicCandidate(int32 InGroupTypeBitmask) const;
	bool IsCurrentDynamicProgressTag() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupsPoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupsPoint")
	}
	static class ANocePickupsPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupsPoint>();
	}
};
DUMPER7_ASSERTS_ANocePickupsPoint;

// Class GameNoce.NocePickupsConsumablePoint
// 0x0008 (0x0310 - 0x0308)
class ANocePickupsConsumablePoint : public ANocePickupsPoint
{
public:
	int32                                         GroupType;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupsConsumablePoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupsConsumablePoint")
	}
	static class ANocePickupsConsumablePoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupsConsumablePoint>();
	}
};
DUMPER7_ASSERTS_ANocePickupsConsumablePoint;

// Class GameNoce.NoceLineOfSightActor
// 0x0020 (0x02B0 - 0x0290)
class ANoceLineOfSightActor : public AActor
{
public:
	class UCapsuleComponent*                      CapsuleComp;                                       // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CollisionProfile;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RadiusScale;                                       // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HalfHeightScale;                                   // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Debug;                                             // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLineOfSightActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLineOfSightActor")
	}
	static class ANoceLineOfSightActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceLineOfSightActor>();
	}
};
DUMPER7_ASSERTS_ANoceLineOfSightActor;

// Class GameNoce.NocePlayerTriggerSubsystem
// 0x0040 (0x0080 - 0x0040)
class UNocePlayerTriggerSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x40];                                      // 0x0040(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegisterPlayerTrigger(class UObject* InTrigger);
	void UnregisterPlayerTrigger(class UObject* InTrigger);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerTriggerSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerTriggerSubsystem")
	}
	static class UNocePlayerTriggerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerTriggerSubsystem>();
	}
};
DUMPER7_ASSERTS_UNocePlayerTriggerSubsystem;

// Class GameNoce.NoceLinkDamageExecCalculation
// 0x0000 (0x0040 - 0x0040)
class UNoceLinkDamageExecCalculation final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLinkDamageExecCalculation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLinkDamageExecCalculation")
	}
	static class UNoceLinkDamageExecCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLinkDamageExecCalculation>();
	}
};
DUMPER7_ASSERTS_UNoceLinkDamageExecCalculation;

// Class GameNoce.LinkRequest
// 0x0020 (0x0048 - 0x0028)
class ULinkRequest final : public UObject
{
public:
	class AActor*                                 LinkOwner;                                         // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LinkTarget;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELinkPriority                                 Priority;                                          // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecutionType;                                     // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BankID;                                            // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionID;                                          // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLinkRequest(class AActor* InOwner, class AActor* InTarget, ELinkPriority InPriority, bool InExecutionType, int32 InBankID, int32 InMotionID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LinkRequest")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LinkRequest")
	}
	static class ULinkRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinkRequest>();
	}
};
DUMPER7_ASSERTS_ULinkRequest;

// Class GameNoce.NoceLinkAbilityDataAsset
// 0x0050 (0x0080 - 0x0030)
class UNoceLinkAbilityDataAsset final : public UDataAsset
{
public:
	TMap<class FName, TSubclassOf<class UGameplayAbility>> LinkAbilityMap;                           // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLinkAbilityDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLinkAbilityDataAsset")
	}
	static class UNoceLinkAbilityDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLinkAbilityDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceLinkAbilityDataAsset;

// Class GameNoce.NoceListView
// 0x0050 (0x0CC0 - 0x0C70)
class UNoceListView final : public UListView
{
public:
	TMulticastInlineDelegate<void(int32 Index)>   MouseDownEvent;                                    // 0x0C70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   MouseEnterEvent;                                   // 0x0C80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   RefreshSelection;                                  // 0x0C90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ENoceUIScrollBarVisibility                    ScrollbarVisibility;                               // 0x0CA0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0CA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA2[0x2];                                      // 0x0CA2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x0CA4(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNeoAudioTriggerIdHandle               MouseHoverSound;                                   // 0x0CAC(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableMouseInput;                                  // 0x0CB4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB5[0xB];                                      // 0x0CB5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUserWidget* BP_GetEntryWidgetFromItem(const class UObject* Item);
	class UObject* BP_ItemFromEntryWidget(class UUserWidget* EntryWidget);
	void BP_UpdateScrollbarVisibility();
	void DisableInputs();
	void EnableInputs();
	int32 GetSelectingIndex();
	bool IsUserScrolling();
	void PlaySound(const struct FNeoAudioTriggerIdHandle& TriggerId);
	void ScrollToTopWithoutAnimation();
	void SetSelectedIndexWithoutAnimation(int32 Index_0);
	void SetSound(const struct FNeoAudioTriggerIdHandle& InSelectSound, const struct FNeoAudioTriggerIdHandle& InMouseHoverSound);
	bool UpdateInput(const struct FInputEvent& InputEvent, const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceListView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceListView")
	}
	static class UNoceListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceListView>();
	}
};
DUMPER7_ASSERTS_UNoceListView;

// Class GameNoce.NoceLocalGameUserSettings
// 0x00F0 (0x0238 - 0x0148)
class UNoceLocalGameUserSettings final : public UGameUserSettings
{
public:
	bool                                          IsBoundDelegate;                                   // 0x0148(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FKey>                CustomKeybinding;                                  // 0x0150(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FKey>                CustomSecondaryKeybinding;                         // 0x01A0(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	ENoceInputGamepadType                         GamepadIconType;                                   // 0x01F0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F1[0x1F];                                     // 0x01F1(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AudioOutputDeviceId;                               // 0x0210(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInitialized;                                     // 0x0220(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceGameSettingPreset                        LastPreset;                                        // 0x0221(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PaniniProjectionEnabled;                           // 0x0222(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_223[0x1];                                      // 0x0223(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScreenPercentage;                                  // 0x0224(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MotionBlur;                                        // 0x0228(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceGraphicAASuperSamplingMode               AASuperSampling;                                   // 0x0229(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TSRQuality;                                        // 0x022C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        FSRQuality;                                        // 0x0230(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        DLSSQuality;                                       // 0x0234(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckAllSettingValid();
	ENoceGraphicAASuperSamplingMode GetAASuperSamplingWithCheck(bool UseViewport);
	TArray<ENoceGraphicAASuperSamplingMode> GetAvailableAASuperSamplingModes(bool UseViewport);
	ENoceInputDeviceType GetGamepadIconDeviceType();
	bool GetIsInitialized();
	void GetLastBenchmark(float* CPU, float* GPU);
	ENoceGameSettingPreset GetLastPreset();
	ENoceGameSettingPreset GetLastPreset2(ENoceGameSettingPreset CurrentPreset);
	bool IsHDRValidEnabled();
	void LoadAudioOutputDeviceId();
	void RunNoceBenchmark();
	void SetAASuperSampling(ENoceGraphicAASuperSamplingMode InVal);
	void SetAASuperSamplingQuality(uint32 InVal);
	void SetAudioOutputDeviceId(const class FString& InAudioOutputDeviceId);
	void SetEnableHDR(bool Value);
	void SetFullscreenModeAndApply(EWindowMode InFullscreenMode);
	void SetGamepadIconType(ENoceInputGamepadType InType);
	void SetMotionBlur(bool Value);
	void SetPaniniProjectionEnabled(bool Value);
	void SetPreset(ENoceGameSettingPreset InVal);
	void SetScreenPercentage(int32 Value);
	void SetToDefaultIfNotInitialized();
	bool SupportAASuperSamplingQuality();

	bool CanPaniniProjectionEnabled() const;
	ENoceGraphicAASuperSamplingMode GetAASuperSampling() const;
	uint32 GetAASuperSamplingQuality() const;
	class FString GetAudioOutputDeviceId() const;
	const int32 GetFullscreenModeInt() const;
	ENoceInputGamepadType GetGamepadIconType() const;
	bool GetMotionBlur() const;
	bool GetPaniniProjectionEnabled() const;
	const uint32 GetResolutionSizeX() const;
	const uint32 GetResolutionSizeY() const;
	int32 GetScreenPercentage() const;
	bool GetVSyncEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLocalGameUserSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLocalGameUserSettings")
	}
	static class UNoceLocalGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLocalGameUserSettings>();
	}
};
DUMPER7_ASSERTS_UNoceLocalGameUserSettings;

// Class GameNoce.NoceLockLocationComponent
// 0x0030 (0x0270 - 0x0240)
class UNoceLockLocationComponent final : public UATPCLockOnTargetLocationComponent
{
public:
	class FName                                   WidgetAttachedSocket;                              // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LockLocationXYSocket;                              // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockLocationOffsetZ;                               // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANoceEnemyCharacter*                    EnemyCharacter;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 EnemyMeshComponent;                                // 0x0260(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCanBeLockedOn();
	void OnAIControllerThinkEnableChanged(bool InValue);
	void OnEnemyDie();
	void OnEnemyFakeDead();
	void OnEnemyResurrect();
	void OnPossessedPawnChanged(class APawn* InOldPawn, class APawn* InNewPawn);
	void SetCanBeLockedOn(bool InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLockLocationComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLockLocationComponent")
	}
	static class UNoceLockLocationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLockLocationComponent>();
	}
};
DUMPER7_ASSERTS_UNoceLockLocationComponent;

// Class GameNoce.NoceLumenTranslucencyComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceLumenTranslucencyComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceLumenTranslucencyDataRowHandle    DataRow;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceLumenTranslucencyProgress> DataByProgress;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceLumenTranslucencyComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceLumenTranslucencyComponent")
	}
	static class UNoceLumenTranslucencyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceLumenTranslucencyComponent>();
	}
};
DUMPER7_ASSERTS_UNoceLumenTranslucencyComponent;

// Class GameNoce.NoceMapAreaWidget
// 0x0100 (0x03E0 - 0x02E0)
class UNoceMapAreaWidget final : public UUserWidget
{
public:
	struct FNoceAreaData                          Data;                                              // 0x02E0(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceMapLocationWidget*>         AllLocations;                                      // 0x03C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceMapLocationGroupWidget*>    AllGroups;                                         // 0x03D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	TArray<class UNoceMapBackgroundWidget*> GetAllMapBackgroundWidgets();
	TArray<class UNoceDynamicMapIconWidget*> GetAllMapDynamicMapIconWidgets();
	TArray<class UNoceMapLocationWidget*> GetAllMapLocationWidgets();
	TArray<ENoceMapLocationGroup> GetVisibleLocationGroups();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapAreaWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapAreaWidget")
	}
	static class UNoceMapAreaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapAreaWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapAreaWidget;

// Class GameNoce.NoceMapCapture
// 0x0040 (0x02D0 - 0x0290)
class ANoceMapCapture final : public AActor
{
public:
	int32                                         RenderTargetSize;                                  // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SavedFileFolder;                                   // 0x0298(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SavedFileName;                                     // 0x02A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          AreaBounds;                                        // 0x02B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneCaptureComponent2D*               CaptureComponent2D;                                // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x02C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GenerateSnapshot();

	class UBoxComponent* GetAreaBounds() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapCapture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapCapture")
	}
	static class ANoceMapCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceMapCapture>();
	}
};
DUMPER7_ASSERTS_ANoceMapCapture;

// Class GameNoce.NoceMapIconComponent
// 0x0070 (0x02A0 - 0x0230)
class UNoceMapIconComponent final : public USceneComponent
{
public:
	ENoceMapIconType                              IconType;                                          // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIconVisible;                                      // 0x0231(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NeedSave;                                          // 0x0232(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SaveID;                                            // 0x0234(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceMapIconVisibleType                       VisibleType;                                       // 0x0238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisibleDistance;                                   // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  VisibleProgress;                                   // 0x0248(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  HideProgress;                                      // 0x0268(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bIconRotates;                                      // 0x0288(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IconSize;                                          // 0x028C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFixedPixelSize;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrder;                                            // 0x0294(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInitialized;                                     // 0x0298(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FNoceMapGeneralIconData GetData();
	void OnCheckConditionMatch();
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);
	void OnInteract();
	void OnInteractOverlapHint();
	void SetIconSize(const float NewIconSize);
	void SetIconVisible(const bool bNewVisible);

	bool DoesIconRotate() const;
	float GetIconSize(float MapSize) const;
	bool IsIconVisible() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapIconComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapIconComponent")
	}
	static class UNoceMapIconComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapIconComponent>();
	}
};
DUMPER7_ASSERTS_UNoceMapIconComponent;

// Class GameNoce.NoceMapLocationGroupWidget
// 0x0018 (0x02F8 - 0x02E0)
class UNoceMapLocationGroupWidget final : public UUserWidget
{
public:
	TArray<class UNoceMapLocationWidget*>         AllLocations;                                      // 0x02E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ENoceMapLocationGroup                         Group;                                             // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapLocationGroupWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapLocationGroupWidget")
	}
	static class UNoceMapLocationGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapLocationGroupWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapLocationGroupWidget;

// Class GameNoce.NoceMapTabChildWidget
// 0x0000 (0x0380 - 0x0380)
class UNoceMapTabChildWidget : public UNoceTabChildWidget
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapTabChildWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapTabChildWidget")
	}
	static class UNoceMapTabChildWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapTabChildWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMapTabChildWidget;

// Class GameNoce.NoceMapTrackerComponent
// 0x0030 (0x00D0 - 0x00A0)
class UNoceMapTrackerComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class UNoceMapIconComponent* MapIcon)> OnMapIconRegistered;        // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UNoceMapIconComponent* MapIcon)> OnMapIconUnregistered;      // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UNoceMapIconComponent*>          MapIcons;                                          // 0x00C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	const TArray<class UNoceMapIconComponent*> GetMapIcons() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMapTrackerComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMapTrackerComponent")
	}
	static class UNoceMapTrackerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMapTrackerComponent>();
	}
};
DUMPER7_ASSERTS_UNoceMapTrackerComponent;

// Class GameNoce.NoceMaterialByProgressComp
// 0x0190 (0x02C0 - 0x0130)
class UNoceMaterialByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	TMap<class FName, float>                      ScalarParams;                                      // 0x0130(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLinearColor>        VectorParams;                                      // 0x0180(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            BlendCurve;                                        // 0x01D0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetMaterialIndex;                               // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlendTime;                                         // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetComponentTag;                                // 0x01E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               TargetMI;                                          // 0x01E8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, float>                      OriginalScalarParams;                              // 0x01F0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FLinearColor>        OriginalVectorParams;                              // 0x0240(0x0050)(Transient, NativeAccessSpecifierPrivate)
	bool                                          IsBlending;                                        // 0x0290(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentBlendDuration;                              // 0x0294(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetAlpha;                                       // 0x0298(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SourceAlpha;                                       // 0x029C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DrawDebug;                                         // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0xF];                                      // 0x02B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMaterialByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMaterialByProgressComp")
	}
	static class UNoceMaterialByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMaterialByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceMaterialByProgressComp;

// Class GameNoce.NoceMaterialSanityFlowerWidget
// 0x0020 (0x03B0 - 0x0390)
class UNoceMaterialSanityFlowerWidget : public UNoceSanityFlowerWidget
{
public:
	class UMaterialInterface*                     MaterialParent;                                    // 0x0390(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PercentParameterName;                              // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                           GoldBox;                                           // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetMaterial();
	void InitializeDynamicMaterial(bool* NoUse);
	void UpdatePercent(float Percent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMaterialSanityFlowerWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMaterialSanityFlowerWidget")
	}
	static class UNoceMaterialSanityFlowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMaterialSanityFlowerWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMaterialSanityFlowerWidget;

// Class GameNoce.NoceMeleeWeapon
// 0x0000 (0x03E0 - 0x03E0)
class ANoceMeleeWeapon : public ANoceWeapon
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMeleeWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMeleeWeapon")
	}
	static class ANoceMeleeWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceMeleeWeapon>();
	}
};
DUMPER7_ASSERTS_ANoceMeleeWeapon;

// Class GameNoce.NoceMinimapWidget
// 0x0000 (0x02E0 - 0x02E0)
class UNoceMinimapWidget final : public UUserWidget
{
public:
	void Refresh();
	void Zoom(bool ZoomIn);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMinimapWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMinimapWidget")
	}
	static class UNoceMinimapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMinimapWidget>();
	}
};
DUMPER7_ASSERTS_UNoceMinimapWidget;

// Class GameNoce.NoceMoonLightVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceMoonLightVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSweetLightDataRowHandle           SanityMaxDataRow;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceMoonLightProgress>         LightDataByProgress;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMoonLightVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMoonLightVolumeComponent")
	}
	static class UNoceMoonLightVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMoonLightVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceMoonLightVolumeComponent;

// Class GameNoce.NoceNavLinkProxy
// 0x0000 (0x02E0 - 0x02E0)
class ANoceNavLinkProxy final : public ANavLinkProxy
{
public:
	struct FVector GetEndPoint();
	struct FVector GetStartPoint();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNavLinkProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNavLinkProxy")
	}
	static class ANoceNavLinkProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceNavLinkProxy>();
	}
};
DUMPER7_ASSERTS_ANoceNavLinkProxy;

// Class GameNoce.NoceNewIconWidget
// 0x0030 (0x0330 - 0x0300)
class UNoceNewIconWidget : public UNoceUserWidgetBase
{
public:
	float                                         InUserSpecifiedScale;                              // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScaleBox*                              ScaleBox;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Default;                                           // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Focus;                                             // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Unfocus;                                           // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsNew;                                             // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsNew();
	void OnFocusCompleted();
	void OnUnfocusCompleted();
	void SetIsNew(bool InIsNew, bool NeedAnimation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNewIconWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNewIconWidget")
	}
	static class UNoceNewIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNewIconWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNewIconWidget;

// Class GameNoce.NoceNotebookPage
// 0x0008 (0x0308 - 0x0300)
class UNoceNotebookPage final : public UNoceUserWidgetBase
{
public:
	int32                                         PageTextureIndex;                                  // 0x0300(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class UNoceNotebookContent*> GetContents();
	bool IsPlayingUIAnimations();
	void OnFadeIn(bool* NoUse);
	void SetData(const TArray<class FText>& Texts, const TArray<struct FSoftObjectPath>& Images, const TArray<bool>& IsVisibles, const TArray<bool>& IsNews, const TArray<bool>& IsNews2, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotebookPage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotebookPage")
	}
	static class UNoceNotebookPage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotebookPage>();
	}
};
DUMPER7_ASSERTS_UNoceNotebookPage;

// Class GameNoce.NoceNotebookPageTabWidget
// 0x0098 (0x0378 - 0x02E0)
class UNoceNotebookPageTabWidget : public UUserWidget
{
public:
	class UNoceNotebookPageTabChildWidget*        Tab0;                                              // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab1;                                              // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab2;                                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab3;                                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab4;                                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab5;                                              // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab6;                                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab7;                                              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab8;                                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab9;                                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab10;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab11;                                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab12;                                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceNotebookPageTabChildWidget*        Tab13;                                             // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceVerticalList*                      List;                                              // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceNotebookPageTabChildWidget*> AllTabs;                                          // 0x0358(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNoceNotebookPageTabChildWidget*> AllTabs2;                                         // 0x0368(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void ClearNew(int32 Index_0);
	void Init();
	void SetData(const TArray<struct FNoceUINotebookCategoryData>& InData, const struct FLinearColor& InDefaultColor, const struct FLinearColor& InSelectColor, int32 InDefaultIndex, bool UseMoreTabs);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotebookPageTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotebookPageTabWidget")
	}
	static class UNoceNotebookPageTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotebookPageTabWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNotebookPageTabWidget;

// Class GameNoce.NoceNoteSection
// 0x0010 (0x0100 - 0x00F0)
class UNoceNoteSection final : public UMovieSceneSection
{
public:
	struct FNoceNoteSectionParams                 Params_0;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNoteSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNoteSection")
	}
	static class UNoceNoteSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNoteSection>();
	}
};
DUMPER7_ASSERTS_UNoceNoteSection;

// Class GameNoce.NoceNotificationPartWidget
// 0x0028 (0x0390 - 0x0368)
class UNoceNotificationPartWidget : public UNoceAnimWidget
{
public:
	class UNoceRichTextBlock*                     RichTextBlock;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Icon;                                              // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Countdown;                                         // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeInTime;                                        // 0x0380(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CountdownTime;                                     // 0x0384(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalDuration;                                     // 0x0388(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShowTimeLeft;                                      // 0x038C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNotificationPartWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNotificationPartWidget")
	}
	static class UNoceNotificationPartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNotificationPartWidget>();
	}
};
DUMPER7_ASSERTS_UNoceNotificationPartWidget;

// Class GameNoce.NoceNPCLanternVolumeComponent
// 0x0040 (0x0118 - 0x00D8)
class UNoceNPCLanternVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSweetLightDataRowHandle           LanternLightDataRow;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNoceLanternNiagaraRowHandle           NiagaraDataRow;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceNPCLanternProgress>        LightDataByProgress;                               // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x20];                                      // 0x00F8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceNPCLanternVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceNPCLanternVolumeComponent")
	}
	static class UNoceNPCLanternVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceNPCLanternVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceNPCLanternVolumeComponent;

// Class GameNoce.NoceOmamoriDrawingDataAsset
// 0x00B0 (0x00E0 - 0x0030)
class UNoceOmamoriDrawingDataAsset final : public UDataAsset
{
public:
	TArray<struct FNoceOmamoriDrawingInfoList>    OmamoriPools;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RequiredFaithMap;                                  // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, ENoceOmamoriDrawingType>          SpecialRewardTypeMap;                              // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOmamoriDrawingDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOmamoriDrawingDataAsset")
	}
	static class UNoceOmamoriDrawingDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOmamoriDrawingDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceOmamoriDrawingDataAsset;

// Class GameNoce.NoceOpenDoorByProgressComp
// 0x0000 (0x0130 - 0x0130)
class UNoceOpenDoorByProgressComp : public UNoceShowByProgressBaseComponent
{
public:
	void UpdateOpenDoor_BP(bool NeedOpen);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceOpenDoorByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceOpenDoorByProgressComp")
	}
	static class UNoceOpenDoorByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceOpenDoorByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceOpenDoorByProgressComp;

// Class GameNoce.NocePageTabWidget
// 0x0090 (0x0370 - 0x02E0)
class UNocePageTabWidget : public UUserWidget
{
public:
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_0;                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_1;                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_2;                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_3;                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_4;                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_5;                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceSelectItemWidget*                  WBP_Collectible_TabChild_6;                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_0;                                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_1;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_2;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_3;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_4;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                Spacer_5;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceHorizontalList*                    List;                                              // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceSelectItemWidget*>          AllSlots;                                          // 0x0350(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class USpacer*>                        Spacers;                                           // 0x0360(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	bool CanSelectNext();
	bool CanSelectPrevious();
	int32 GetSelectingIndex();
	void Init(int32 InTotalPage, int32 InCurrentPage);
	void MakeSlotsAndSpacers();
	void SelectNext();
	void SelectPrevious();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePageTabWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePageTabWidget")
	}
	static class UNocePageTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePageTabWidget>();
	}
};
DUMPER7_ASSERTS_UNocePageTabWidget;

// Class GameNoce.NocePauseListWidget
// 0x0018 (0x02F8 - 0x02E0)
class UNocePauseListWidget : public UUserWidget
{
public:
	class UVerticalBox*                           VerticalBox;                                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNocePauseListItemWidget>   ListItemWidgetClass;                               // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceVerticalList*                      List;                                              // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CreateMenu(const TArray<class UPauseListObject*>& ListItems, int32 InitIndex);
	class UNoceVerticalList* GetList();
	void InitializeList();
	void UpdateDescription(int32 Index_0, const class FText& DescriptionText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePauseListWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePauseListWidget")
	}
	static class UNocePauseListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePauseListWidget>();
	}
};
DUMPER7_ASSERTS_UNocePauseListWidget;

// Class GameNoce.NocePendantLight
// 0x0070 (0x0310 - 0x02A0)
class ANocePendantLight final : public ANoceActor
{
public:
	bool                                          SupportSaveLoad;                                   // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreGlobalHideCheck;                             // 0x02A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNiagaraWire;                                    // 0x02A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightMaxDrawDistance;                              // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LightMaxDistanceFadeRange;                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        LightRootComp;                                     // 0x02B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SpotLightOffset;                                   // 0x02B8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SpawnDefaultHidden;                                // 0x02D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LightWorldPosition;                                // 0x02D8(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               LightWorldRotation;                                // 0x02F0(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          RecordIsHidden;                                    // 0x0308(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecordLightIntensity;                              // 0x030C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static void EnablePendantLights(bool bEnable);

	void SetLightMaxDistanceFadeRange(float InValue);
	void SetLightMaxDrawDistance(float InValue);

	class ULightComponent* GetLightComp() const;
	float GetLightMaxDistanceFadeRange() const;
	float GetLightMaxDrawDistance() const;
	float GetSpotLightZOffset() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePendantLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePendantLight")
	}
	static class ANocePendantLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePendantLight>();
	}
};
DUMPER7_ASSERTS_ANocePendantLight;

// Class GameNoce.NocePickMessageWidget
// 0x0000 (0x0368 - 0x0368)
class UNocePickMessageWidget final : public UNoceAnimWidget
{
public:
	void ShowItem(const class FName& InItemID, ENoceInventoryType InItemType, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickMessageWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickMessageWidget")
	}
	static class UNocePickMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickMessageWidget>();
	}
};
DUMPER7_ASSERTS_UNocePickMessageWidget;

// Class GameNoce.NocePickPreviewImageDialogWidget
// 0x0078 (0x0450 - 0x03D8)
class UNocePickPreviewImageDialogWidget : public UNocePickPreviewImageWidgetBase
{
public:
	class UBYGRichTextBlock*                      DescriptionText;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBYGRichTextBlock*                      BackupText;                                        // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePageTabWidget*                     PageTab;                                           // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceArrowWidget*                       ArrowLeft;                                         // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceArrowWidget*                       ArrowRight;                                        // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PageDefault;                                       // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PageRight;                                         // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PageLeft;                                          // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               TurnPageSound;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   SinglePageGuide;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MultiPagesGuide;                                   // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               PageAnimations;                                    // 0x0430(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           Content;                                           // 0x0440(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnPageAnimationCompleted();
	void SelectNext();
	void SelectPrevious();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickPreviewImageDialogWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickPreviewImageDialogWidget")
	}
	static class UNocePickPreviewImageDialogWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickPreviewImageDialogWidget>();
	}
};
DUMPER7_ASSERTS_UNocePickPreviewImageDialogWidget;

// Class GameNoce.NocePickPreviewWidget
// 0x0070 (0x0420 - 0x03B0)
class UNocePickPreviewWidget : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void(ENoceInventoryType Type, class FName ID)> OnPreviewEnd;            // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UNocePickPreviewImageWidget*            WBP_PickPreview_Image;                             // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePickPreviewImageDialogWidget*      WBP_PickPreview_ImageDialog;                       // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         InventoryPopWindowPath;                            // 0x03D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceInventoryPopWindowWidget*          PopWindowWidget;                                   // 0x03F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseForceHide;                                      // 0x03F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsForceHide;                                       // 0x03F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNocePickPreviewData>           PendingItems;                                      // 0x0400(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	ENoceInventoryType                            LastItemType;                                      // 0x0410(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastItemID;                                        // 0x0414(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ConsumableSlotChanged();
	bool HasPendingItem();
	void HideItem();
	void OnInventoryPopWindowClose();
	void OnPageClosed();
	void SetUseForceHide(bool InUseForceHide);
	void ShowItem(const ENoceInventoryType& Type, const class FName& ID, bool* NoUse);
	void ShowSlotChanged(bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickPreviewWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickPreviewWidget")
	}
	static class UNocePickPreviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickPreviewWidget>();
	}
};
DUMPER7_ASSERTS_UNocePickPreviewWidget;

// Class GameNoce.NocePickupCategoryDataAsset
// 0x00A0 (0x00D0 - 0x0030)
class UNocePickupCategoryDataAsset final : public UDataAsset
{
public:
	TMap<class FName, struct FNocePickupCategoryElement> PickupCategories;                           // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftClassPtr<class UClass>> PickupAssetMap;                                   // 0x0080(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupCategoryDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupCategoryDataAsset")
	}
	static class UNocePickupCategoryDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickupCategoryDataAsset>();
	}
};
DUMPER7_ASSERTS_UNocePickupCategoryDataAsset;

// Class GameNoce.NocePickupKeyItem
// 0x0008 (0x02B0 - 0x02A8)
class ANocePickupKeyItem : public ANocePickupBase
{
public:
	struct FNoceKeyItemDataRowHandle              KeyItemID;                                         // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupKeyItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupKeyItem")
	}
	static class ANocePickupKeyItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupKeyItem>();
	}
};
DUMPER7_ASSERTS_ANocePickupKeyItem;

// Class GameNoce.NocePickupOmamori
// 0x0008 (0x02B0 - 0x02A8)
class ANocePickupOmamori final : public ANocePickupBase
{
public:
	struct FNoceOmamoriDataRowHandle              OmamoriID;                                         // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupOmamori")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupOmamori")
	}
	static class ANocePickupOmamori* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupOmamori>();
	}
};
DUMPER7_ASSERTS_ANocePickupOmamori;

// Class GameNoce.NocePickupsWeaponPoint
// 0x0008 (0x0310 - 0x0308)
class ANocePickupsWeaponPoint : public ANocePickupsPoint
{
public:
	ENocePickupsWeaponGroupType                   GroupType;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupsWeaponPoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupsWeaponPoint")
	}
	static class ANocePickupsWeaponPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANocePickupsWeaponPoint>();
	}
};
DUMPER7_ASSERTS_ANocePickupsWeaponPoint;

// Class GameNoce.NocePickupsSubsystem
// 0x03F0 (0x0438 - 0x0048)
class UNocePickupsSubsystem : public UNoceTickableWorldSubsystem
{
public:
	TMap<int32, class UNocePickupsPointList*>     ConsumablePickupsPointMap;                         // 0x0048(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class ANoceInteractableBase>, struct FNocePickupsDeploymentInfoList> ConsumableDeploymentInfoMap; // 0x0098(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<ENocePickupsWeaponGroupType, class UNocePickupsPointList*> WeaponPickupsPointMap;           // 0x00E8(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class ANoceInteractableBase>, struct FNocePickupsDeploymentInfoList> WeaponDeploymentInfoMap; // 0x0138(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<class ANocePickupsPoint*>              FixedPickupsPoints;                                // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ANocePickupsPoint*>              FilteredPickupsPoints;                             // 0x0198(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             PickupsDeployTable;                                // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowDebugInfo;                                     // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventMaxTryFailedCount;                            // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventMinDistanceSquared;                           // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamicHelpEnabled;                              // 0x01BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNoceDynamicPickupsRuleDataAsset*       DataAsset;                                         // 0x01C0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             DynamicPickupsTable;                               // 0x01C8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNoceDynamicPickupsRuleInfo            CurrentDynamicRuleInfo;                            // 0x01D0(0x0070)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FNoceDynamicPickupsSubDataRow          CurrentDynamicSubData;                             // 0x0240(0x0030)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	class ANocePickupsPoint*                      DynamicConsumablePickupsPoint;                     // 0x0270(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePickupsPoint*                      DynamicWeaponPickupsPoint;                         // 0x0278(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_280[0x90];                                     // 0x0280(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceDynamicPickupsSaveData>    DynamicPickupsSaveList;                            // 0x0310(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceActorRecord>               PickupsPointRecordList;                            // 0x0320(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_330[0x78];                                     // 0x0330(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           DefaultConsumablePickupsList;                      // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           DefaultWeaponPickupsList;                          // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          IsEventHelpEnable;                                 // 0x03C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANocePickupsPoint*>              EventPickupsConsumablePoints;                      // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ANocePickupsPoint*>              EventPickupsWeaponPoints;                          // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UNocePrepRoomPickupsRuleDataAsset*      PrepRoomDataAsset;                                 // 0x03F0(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 PrepRoomConsumableIDList;                          // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PrepRoomConsumableFactorList;                      // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PrepRoomWeaponIDList;                              // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PrepRoomWeaponFactorList;                          // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	bool CanGenerateConsumablePickups_BP(int32 RequiredTargetCount);
	void EnableDynamicHelp(bool IsEnable);
	void EnableEventHelp(bool IsEnable);
	void GenerateEventConsumablePickups(const struct FVector& InLocation, const struct FVector2D& InRange);
	void GenerateEventWeaponPickups(const struct FVector& InLocation, const struct FVector2D& InRange);
	void GeneratePrepRoomPickups(class ANocePickupsPoint* InAttachParent, TSubclassOf<class ANoceInteractableBase> InInteractable);
	void HandleOnPickupEventPickups(class ANoceInteractableBase* InPickups);
	bool IsSaveDataExist(class ANocePickupsPoint* InPickupsPoint);
	void OnPickupsDestroyed(class AActor* InActor);
	void OnProgressChanged(const struct FGameplayTag& InTag);
	void RegisterSaveData(class ANocePickupsPoint* InPickupsPoint);
	void RemoveAllEventPickups();
	void RemoveCurrentDynamicPickups();
	bool SpawnEventConsumablePickupsPoint_BP(int32 RequiredTargetCount);
	bool SpawnEventWeaponPickupsPoint_BP(int32 RequiredTargetCount);
	void UpdateCurrentDynamicSubData();

	float CalculateConsumablePrepRoomValue() const;
	float CalculateWeaponPrepRoomValue() const;
	struct FNocePickupsConsumableDataRow GetConsumableDataRowByName(class FName InName) const;
	TArray<class FName> GetConsumableDataRowNames() const;
	ENocePickupsConsumableGroupType GetConsumableGroupTypeByInteractable(TSubclassOf<class ANoceInteractableBase> InInteractable) const;
	struct FNocePickupsDeployDataRow GetDeployDataByName(class FName InName) const;
	TArray<class FName> GetDeployDataRowNames() const;
	struct FNoceDynamicPickupsDataRow GetDynamicDataByName(class FName InName) const;
	TArray<class FName> GetDynamicDataRowNames() const;
	bool GetIsDynamicHelpEnabled() const;
	bool GetIsEventHelpEnable() const;
	struct FNocePickupsWeaponDataRow GetWeaponDataRowByName(class FName InName) const;
	TArray<class FName> GetWeaponDataRowNames() const;
	ENocePickupsWeaponGroupType GetWeaponGroupTypeByInteractable(TSubclassOf<class ANoceInteractableBase> InInteractable) const;
	bool IsInConsumableSearchDistance(class AActor* InActor) const;
	bool IsInWeaponSearchDistance(class AActor* InActor) const;
	bool IsTargetConsumableByClass(TSubclassOf<class ANoceInteractableBase> InInteractable) const;
	bool IsTargetPickups(class ANocePickupConsumable* InConsumable) const;
	bool IsUnseenDynamicPickupsPoint(class ANocePickupsPoint* InPickupsPoint) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePickupsSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePickupsSubsystem")
	}
	static class UNocePickupsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePickupsSubsystem>();
	}
};
DUMPER7_ASSERTS_UNocePickupsSubsystem;

// Class GameNoce.NocePlayerAnimInstance
// 0x01F0 (0x0750 - 0x0560)
class UNocePlayerAnimInstance : public UNoceAnimInstance
{
public:
	float                                         VelocityThresholdForUpdateFowardRight;             // 0x0558(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         fVelocity;                                         // 0x055C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         fAcceleration;                                     // 0x0560(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         fForward;                                          // 0x0564(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         fRight;                                            // 0x0568(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         fYawDiff;                                          // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         fWalkSpeedScale;                                   // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_574[0xC];                                      // 0x0574(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StaminaStateTag;                                   // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           QueuedStaminaStateTag;                             // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DodgeStateTag;                                     // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           QueuedDodgeStateTag;                               // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           HealthStateTag;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           LocomotionStateTag;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PlayerFSMTag;                                      // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ApplyFootIK;                                       // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ApplyArmIK;                                        // 0x05B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HaveObstacleJogStartToJogEnd;                      // 0x05BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterDodge;                                     // 0x05BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLeaveDodge;                                     // 0x05BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterDodgeDummy;                                // 0x05BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5BE[0x2];                                      // 0x05BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DodgeForward;                                      // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DodgeRight;                                        // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DodgeAnimID;                                       // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CorruptionBindedAnimID;                            // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterAttack;                                    // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLeaveAttack;                                    // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterDamage;                                    // 0x05D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLeaveDamage;                                    // 0x05D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceWinceType                                WinceType;                                         // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceHitReactionTwoWayType                    HitReactionTwoWay;                                 // 0x05D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceHitReactionFourWayType                   HitReactionFourWay;                                // 0x05D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceDeathType                                DeathType;                                         // 0x05D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENocePlayerAnimStateType                      AnimStateType;                                     // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceInteractType                             InteractType;                                      // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLeaveInteract;                                  // 0x05DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanEnterSprint;                                    // 0x05DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLeaveSprint;                                    // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponName;                                        // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceWeaponMotionType                         WeaponMotionType;                                  // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DuringChangeWeaponMotion;                          // 0x05E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DuringUseShortcutItemMotion;                       // 0x05EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DuringHellModeDamageMotion;                        // 0x05EB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DuringClawGTransformToClawMotion;                  // 0x05EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DuringCustomUpperBodyMotion;                       // 0x05ED(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInFocusCharged;                                  // 0x05EE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInJustDodge;                                     // 0x05EF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInLinkMotion;                                    // 0x05F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsWantToDoUpperBodyMotion;                         // 0x05F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsUsingGimmick;                                    // 0x05F2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnterSprintByExtraSprint;                          // 0x05F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsWeaponVisible;                                   // 0x05F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F5[0x3];                                      // 0x05F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActiveStateMachineName;                            // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ActiveStateName;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsUnpossessed;                                     // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDuringTeleport;                                  // 0x0609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCachedPos;                                      // 0x060A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SprintInterruptedByObstacle;                       // 0x060B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmCorrectorRatio;                                 // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   UFOWeaponName;                                     // 0x0610(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   KatanaWeaponName;                                  // 0x0618(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   KatanaAlterWeaponName;                             // 0x0620(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInAir;                                           // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsOnSlopeSkirtControl;                             // 0x0629(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62A[0x2];                                      // 0x062A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootIKInterpSpeedCurrent;                          // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          InSeamless;                                        // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInLowStamina;                                    // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_632[0x2];                                      // 0x0632(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputForward;                                      // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputRight;                                        // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputAngle;                                        // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedInputAngle;                                  // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputLength;                                       // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NoInputTimer;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowSpeedThreshold;                                 // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowSpeedTimer;                                     // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceJogAnimAction                            JogAnimAction;                                     // 0x0654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_655[0x3];                                      // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JogTiredEndTime;                                   // 0x0658(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocomotionHealthChangeBlendTime;                   // 0x065C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocomotionBattleChangeBlendTime;                   // 0x0660(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocomotionChangeBlendTime;                         // 0x0664(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocomotionChangeBlendTimer;                        // 0x0668(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JogStartEndBlendTimer;                             // 0x066C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceUseArmCorrector;                              // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0xF];                                      // 0x0671(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SeamlessStayInSprint;                              // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_681[0x3];                                      // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairRidigBodyAlpha;                                // 0x0684(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FurClawRidigBodyAlpha;                             // 0x0688(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FurClawGRidigBodyAlpha;                            // 0x068C(0x0004)(BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ClawG_Switch;                                      // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ClawG_ABP_Ratio;                                   // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitReactionBone;                                   // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HitReactionForce;                                  // 0x06A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HitReactionBlendTime;                              // 0x06AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HitReactionActive;                                 // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B1[0xF];                                      // 0x06B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitReactionTransform;                              // 0x06C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HitReactionAlpha;                                  // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitReactionHitDirection;                           // 0x0728(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0740(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HitReactionBlendTimer;                             // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74C[0x1];                                      // 0x074C(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PlayerHideFromRecoverIndicator;                    // 0x074D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74E[0x2];                                      // 0x074E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float BP_GetSlopeBlendRatio();
	bool CanApplyArmCorrect();
	void ClearDelayResetGlawG_ABP_RatioTimer();
	void DelayResetGlawG_ABP_Ratio(float InDelayTime);
	bool GetCanEnterAttack();
	bool GetCanEnterDodge();
	float GetFootIKInterpSpeedCurrent();
	bool GetHitReactionActive();
	float GetHitReactionAlpha();
	struct FTransform GetHitReactionTransform();
	bool GetInSeamless();
	ENoceInteractType GetInteractType();
	bool GetIsInAir();
	bool GetIsOnSlopeSkirtControl();
	struct FGameplayTag GetPlayerFSMTag();
	bool GetPlayerHideFromRecoverIndicator();
	void HandleHitPoint(const struct FVector& InHitPoint, const struct FVector& AttackDirection);
	bool IsNarrowMoveInteractType();
	bool IsNarrowMoveNormal();
	bool IsNarrowMoveShort();
	bool IsSlopeAdjustmentEnable();
	bool IsUFOWeaponFocusAttack();
	bool IsUsingKatana();
	void OnDelayResetGlawG_ABP_Ratio();
	void QueueDodgeState();
	void QueueStaminaState();
	void ReplaceSetFurClawGRigidBodyAlpha(float InValue);
	void ReplaceSetFurClawRigidBodyAlpha(float InValue);
	void SetClawG_ABP_Ratio(float InValue);
	void SetClawG_Switch(float InValue);
	void SetDeathType(ENoceDeathType InDeathType);
	void SetFurClawGRigidBodyAlpha(float InValue);
	void SetFurClawRigidBodyAlpha(float InValue);
	void SetHairRigidBodyAlpha(float InValue);
	void SetJogStartEndBlendTimer(float InValue);
	void SetPlayerHideFromRecoverIndicator(bool InValue);
	void SetSeamlessStayInSprint(bool InValue);
	void SetWeaponMotionType(ENoceWeaponMotionType InWeaponMotionType);
	void SetWeaponName(class FName InWeaponName);
	void UpdateHitReaction(float DeltaTime);
	void UpdateStateTag(float DeltaSeconds);

	float GetClawG_ABP_Ratio() const;
	float GetClawG_Switch() const;
	float GetFurClawGRigidBodyAlpha() const;
	float GetFurClawRigidBodyAlpha() const;
	float GetHairRigidBodyAlpha() const;
	class ANocePlayerCharacter* GetPlayerCharacter() const;
	bool GetSeamlessStayInSprint() const;
	const bool GetSeamlessToIdle() const;
	ENoceWeaponMotionType GetWeaponMotionType() const;
	bool IsDuringChagneWeaponMotion() const;
	float ReplaceGetFurClawGRigidBodyAlpha() const;
	float ReplaceGetFurClawRigidBodyAlpha() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerAnimInstance")
	}
	static class UNocePlayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerAnimInstance>();
	}
};
DUMPER7_ASSERTS_UNocePlayerAnimInstance;

// Class GameNoce.NocePlayerCameraComponent
// 0x0000 (0x09E0 - 0x09E0)
class UNocePlayerCameraComponent final : public UCameraComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerCameraComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerCameraComponent")
	}
	static class UNocePlayerCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerCameraComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerCameraComponent;

// Class GameNoce.NocePlayerCapsuleShrinkComp
// 0x01C8 (0x0268 - 0x00A0)
class UNocePlayerCapsuleShrinkComp final : public UActorComponent
{
public:
	ECollisionChannel                             PlayerPawnChannel;                                 // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      EnemyMeshTypes;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      EnemyPushDetectMeshTypes;                          // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<ECollisionChannel>                     EnemyAllTypes;                                     // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      WorldObjectTypes;                                  // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   SkipTypeTag;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShrinkRadiusRatio;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShrinkTime;                                        // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyMoveDetectOffset;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyRadiusDetectExtend;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyPushTreshold;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyHalfHeightDetectExtend;                        // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HeadSocketName;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HeadOffset;                                        // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeadOverlapRadius;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeadOverlapHalfHeight;                             // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeadOverlapHalfHeightOnSlope;                      // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeadZOffset;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeadMoveDetectOffset;                              // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeadPushTreshold;                                  // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PushDetectOffsetAngle;                             // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PushDetectSphereRadius;                            // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, float>              TagPushMultiplyMap;                                // 0x0148(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         EnemyBasePush;                                     // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnemyPushDetectOffsetAngle;                        // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PushOffsetLerpSpeedDodge;                          // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PushOffsetLerpSpeed;                               // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExtraVeloctiyPush;                                 // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InteractRadiusRatio;                               // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InteractEnemyBasePush;                             // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x01B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x01C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      OwnerCapsuleComp;                                  // 0x01C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterMovementComponent*            CharacterMovementComp;                             // 0x01D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceAbilitySystemComponent*            AbilitySystemComp;                                 // 0x01D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         OverlapActorsToIgnore;                             // 0x01E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F0[0x78];                                     // 0x01F0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearUsePlaneConstrain();
	void EndCapsuleShrik();
	void HandleOnPossessed(bool InPossessed);
	void OnGameplayTagChanged(const struct FGameplayTag& Tag, bool TagExist);
	void SetEnableDrawDebug(bool InValue);
	void SetEnableHeadPushEnemy(bool InValue);
	void SetEnableUse(bool InValue);
	void StartCapsuleShrink();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerCapsuleShrinkComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerCapsuleShrinkComp")
	}
	static class UNocePlayerCapsuleShrinkComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerCapsuleShrinkComp>();
	}
};
DUMPER7_ASSERTS_UNocePlayerCapsuleShrinkComp;

// Class GameNoce.NocePlayerCharMeshByProgressComp
// 0x0010 (0x0140 - 0x0130)
class UNocePlayerCharMeshByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	ENocePlayerType                               PlayerType;                                        // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharMeshRowName;                                   // 0x0134(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerCharMeshByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerCharMeshByProgressComp")
	}
	static class UNocePlayerCharMeshByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerCharMeshByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNocePlayerCharMeshByProgressComp;

// Class GameNoce.NocePlayerComboDataAsset
// 0x0050 (0x0080 - 0x0030)
class UNocePlayerComboDataAsset final : public UDataAsset
{
public:
	TMap<class FName, struct FNocePlayerComboSetting> PlayerComboSettingMap;                         // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerComboDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerComboDataAsset")
	}
	static class UNocePlayerComboDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerComboDataAsset>();
	}
};
DUMPER7_ASSERTS_UNocePlayerComboDataAsset;

// Class GameNoce.NocePlayerDamageHandleComponent
// 0x01E0 (0x02A0 - 0x00C0)
class UNocePlayerDamageHandleComponent final : public UNoceDamageHandleComponent
{
public:
	struct FGameplayAttribute                     HealthAttribute;                                   // 0x00C0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_HealthCostSetByCaller;                          // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_HealthCostSetByCaller;                         // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     ArmorAttribute;                                    // 0x0108(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_ArmorCostSetByCaller;                           // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_ArmorCostSetByCaller;                          // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_ArmorFull;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     CurrentMaxSanityAttribute;                         // 0x0158(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENoceActionLevel, float>                 ActionLevelUsingFocusHealthToMaxSanityDamageRatioMap; // 0x0190(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<ENoceActionLevel, float>                 LinkActionLevelMaxSanityDamageRatioMap;            // 0x01E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     StaminaAttribute;                                  // 0x0230(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWinceTypePriority*                 WinceTypePriorityDataAsset;                        // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENoceWinceType                                OmamoriKagamiTriggedWinceType;                     // 0x0270(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OmamoriTanukiHealthToSanityDamageRatio;            // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0278(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceSanityComponent*                   SanityComponent;                                   // 0x0280(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNocePlayerStaminaComponent*            PlayerStaminaComponent;                            // 0x0288(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0290(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool CanApplyWinceType(ENoceWinceType InCurrentWinceType, ENoceWinceType InNewWinceType);
	ENoceWinceType HandleDamage(float InHealthDamage, float InWinceDamage, float InMaxSanityDamage, float InStaminaDamage, float InMaxSanityDamageToHealthDamageRatio, bool InIsForceWince, ENoceWinceType InWinceType, class AActor* Attacker, class FName ComboName, ENoceDeathType DeathType, bool InHealthDamageEffectedByDamageRatio, bool InApplyGutsCheck, bool InIsLimitHealth, bool InCheckOmamoriKagami, bool InCanEndFocus, bool InCheckDamageWinceToAdditive);
	ENoceWinceType HandleDamageByAttackHitResult(const struct FNoceAttackHitResult& InAttackHitResult, bool InCheckOmamoriKagami);
	void HandleOnPossessed(bool InPossessed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerDamageHandleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerDamageHandleComponent")
	}
	static class UNocePlayerDamageHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerDamageHandleComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerDamageHandleComponent;

// Class GameNoce.NocePlayerHealthRecoverExecution
// 0x0000 (0x0040 - 0x0040)
class UNocePlayerHealthRecoverExecution final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerHealthRecoverExecution")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerHealthRecoverExecution")
	}
	static class UNocePlayerHealthRecoverExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerHealthRecoverExecution>();
	}
};
DUMPER7_ASSERTS_UNocePlayerHealthRecoverExecution;

// Class GameNoce.NocePlayerInventoryComponent
// 0x0458 (0x04F8 - 0x00A0)
class UNocePlayerInventoryComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(ENoceInventoryType InventoryType, class FName ID, bool PlaySystemHintVO)> OnPickupItem; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENoceInventoryType ItemType, class FName ItemName)> OnAddItem;     // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENoceInventoryType ItemType, class FName ItemName)> OnRemoveItem;  // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ENoceInventoryType                            LastAddedType;                                     // 0x00D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastAddedID;                                       // 0x00D4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName ID)> OnAddNewWeapon;                                   // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName ID)> OnDiscardWeapon;                                  // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDiscardEquippedWeapon;                           // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTryToChangeWeapon;                               // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBeforeChangeWeapon;                              // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 NewIndex)> OnChangeWeapon;                                   // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float NewDurability)> OnChangeEquippedWeaponDurability;            // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName ID, float NewDurability)> OnWeaponDurabilityChanged;   // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FNoceInventoryWeapon>           FogWeapons;                                        // 0x0160(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceInventoryWeapon>           DarkWeapons;                                       // 0x0170(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	int32                                         FogTargetWeaponIndex;                              // 0x0180(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DarkTargetWeaponIndex;                             // 0x0184(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FogEquippedWeaponIndex;                            // 0x0188(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DarkEquippedWeaponIndex;                           // 0x018C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CurrentUseFogWeapon;                               // 0x0190(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ViewedWeapons;                                     // 0x0198(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	class FName                                   KatanaWeaponName;                                  // 0x01A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   KatanaAlterWeaponName;                             // 0x01B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   UFOWeaponName;                                     // 0x01B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceWeaponSubsystem*                   WeaponSubsystem;                                   // 0x01C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllWeaponIDs;                                      // 0x01C8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 Index, class FName OldID, class FName NewID)> OnChangeOmamori; // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 NewSlotNum)> OnSetOmamoriSlotNum;                            // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FNoceInventoryData>             Omamories;                                         // 0x01F8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 EquippedOmamories;                                 // 0x0208(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedOmamories;                                   // 0x0218(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedInInventoryOmamories;                        // 0x0228(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllOmamoriIDs;                                     // 0x0238(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         RewardOmamoriIndex;                                // 0x0248(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName ID, int32 Quantity)> OnAddConsumableItem;              // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTryToUseConsumableItem;                          // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName ID)> OnUseConsumableItem;                              // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FNoceInventoryConsumable>       Consumables;                                       // 0x0280(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	int32                                         LastViewedConsumablesNum;                          // 0x0290(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastSelectConsumableIndex;                         // 0x0294(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 ShortcutConsumables;                               // 0x0298(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedConsumables;                                 // 0x02A8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedInInventoryConsumables;                      // 0x02B8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	class FName                                   LastUseConsumableID;                               // 0x02C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllConsumableIDs;                                  // 0x02D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllFaithItemIDs;                                   // 0x02E0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 AllConsumableMaxStackNums;                         // 0x02F0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllExpandInventoryIDs;                             // 0x0300(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceFaithItemRecord>           FaithItemUnusedArray;                              // 0x0310(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceFaithItemRecord>           FaithItemUsedArray;                                // 0x0320(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  KeyItems;                                          // 0x0330(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedKeyItems;                                    // 0x0340(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllKeyItemIDs;                                     // 0x0350(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllKeyItemEmaIDs;                                  // 0x0360(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           UsedItemEmaName;                                   // 0x0370(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  Letters;                                           // 0x0380(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	int32                                         LastLetterNameIndex;                               // 0x0390(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ViewedLetters;                                     // 0x0398(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllLetterIDs;                                      // 0x03A8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ENoceNotebookType NotebookType, class FName ID)> OnAddNotebookID;  // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<bool>                                  NotebookCharacterIDs;                              // 0x03C8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  NotebookEnemyIDs;                                  // 0x03D8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  NotebookInfoIDs;                                   // 0x03E8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  NotebookPuzzleIDs;                                 // 0x03F8(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  NotebookTutorialIDs;                               // 0x0408(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	ENoceNotebookType                             LastNotebookType;                                  // 0x0418(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastCharacterNameIndex;                            // 0x041C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastEnemyNameIndex;                                // 0x0420(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastInfoNameIndex;                                 // 0x0424(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastPuzzleNameIndex;                               // 0x0428(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastTutorialNameIndex;                             // 0x042C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastCharacterContentIndex;                         // 0x0430(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastEnemyContentIndex;                             // 0x0434(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastInfoContentIndex;                              // 0x0438(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastPuzzleContentIndex;                            // 0x043C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastTutorialContentIndex;                          // 0x0440(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ViewedNotebookCharacterIDs;                        // 0x0448(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedNotebookEnemyIDs;                            // 0x0458(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedNotebookInfoIDs;                             // 0x0468(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedNotebookPuzzleIDs;                           // 0x0478(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ViewedNotebookTutorialIDs;                         // 0x0488(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceNotebookHintIDData>        NotShownHintNotebookIDs;                           // 0x0498(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllNotebookCharacterIDs;                           // 0x04A8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllNotebookEnemyIDs;                               // 0x04B8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllNotebookInfoIDs;                                // 0x04C8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllNotebookPuzzleIDs;                              // 0x04D8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           AllNotebookTutorialIDs;                            // 0x04E8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool AddConsumable(const class FName ID, const int32 Quantity, const class FName ConsumableActorName);
	bool AddKeyItem(const class FName ID);
	bool AddLetter(const class FName ID);
	bool AddNotebookID(const class FName ID, const ENoceNotebookType Type);
	bool AddOmamori(const class FName ID);
	void AddToViewedItem(const class FName ID);
	void AddToViewedItemInInventory(const class FName ID, ENoceInventoryType InventoryType);
	bool AddToViewedNotebookID(const class FName ID, const ENoceNotebookType Type);
	void AddUsedItemEma(class FName EmaName);
	bool AddWeapon(const class FName ID, const float Durability);
	bool CanAddConsumable(const class FName ID, const int32 Quantity);
	bool CanAddConsumables(const TArray<struct FNoceInventoryConsumable>& InConsumables);
	bool CanSpawnFaithItem(class FName ID, class AActor* FaithItemActor);
	void ChangeWeapon();
	void CheckDLCOmamori();
	void ClaimDLCOmamori();
	void ClearLastUseConsumableID();
	void ClearNotShownHintNotebookIDs();
	void DiscardWeapon(const int32 Index_0);
	void EquipConsumable(const class FName ID, const int32 Index_0);
	void EquipOmamori(const class FName ID, const int32 Index_0);
	void EquipWeapon(const int32 Index_0);
	void ExchangeWeapon(const int32 Index_0, const class FName ID, const float Durability);
	void GetAllConsumables(TArray<struct FNoceInventoryConsumable>* OutConsumables);
	TArray<class FName> GetAllInventoryIDs(ENoceInventoryType InventoryType, ENoceNotebookType NotebookType);
	void GetAllKeyItems(TArray<int32>* OutKeyItems);
	void GetAllLetters(TArray<int32>* OutLetters);
	void GetAllNotebookIDs(const ENoceNotebookType Type, TArray<class FName>* OutIDs);
	void GetAllOmamories(TArray<struct FNoceInventoryData>* OutOmamories);
	void GetAllViewedNotebookIDs(const ENoceNotebookType Type, TArray<class FName>* OutIDs);
	int32 GetAvailableWeaponNumber();
	int32 GetConsumableSlotNum();
	int32 GetConsumableTotalNum(int32 IDIndex);
	TArray<int32> GetCurrentOmamories();
	TArray<struct FNoceInventoryWeapon> GetCurrentWeaponData(bool IsFogWeapon);
	int32 GetCurrentWeaponIndex(class FName InID);
	float GetCurrentWeaponsDurability();
	class FName GetDLCOmamoriID();
	void GetEquippedOmamories(TArray<struct FNoceInventoryData>* OutOmamories);
	int32 GetEquippedOrTargetWeaponIndex();
	int32 GetEquippedWeaponIndex();
	TArray<class FName> GetExpandInventoryIDs();
	TArray<class FName> GetFaithItemIDs();
	class FName GetFirstEmaName();
	int32 GetFirstWeaponIndex();
	bool GetIsTryingToChangeWeapon();
	bool GetIsTryingToUseConsumableItem();
	class FName GetKatanaWeaponName();
	int32 GetKeyItemEmaNum();
	void GetLastAdddedInfo(ENoceInventoryType* OutType, class FName* OutID);
	class FName GetLastNotebookContent(const ENoceNotebookType Type);
	int32 GetLastNotebookNameIndex(const ENoceNotebookType Type);
	ENoceNotebookType GetLastNotebookType();
	int32 GetLastSelectConsumableIndex();
	class FName GetLastUseConsumableID();
	int32 GetLastViewedConsumablesNum();
	int32 GetLastViewedLetterIndex();
	int32 GetMaxQuantity(int32 IDIndex);
	int32 GetMaxWeaponNumber();
	int32 GetNextAvailableWeaponIndex();
	TArray<struct FNoceNotebookHintIDData> GetNotShownHintNotebookIDs();
	class FName GetOmamoriID(int32 InIDIndex);
	int32 GetOmamoriSlotNum();
	void GetShortcutConsumables(TArray<struct FNoceInventoryConsumable>* OutConsumables);
	int32 GetTargetWeaponIndex();
	float GetWeaponDurability(const int32 Index_0, const bool IsFogWeapon);
	void GetWeaponIndex(class FName InID, int32* OutIndex, bool* OutIsFogWeapon);
	void HandleRecordDataToNextRound();
	bool HasAnyWeapon();
	bool HasKeyItem(const class FName ID);
	bool HasLetter(const class FName ID);
	bool HasNoteShownHintNotebookIDs();
	bool HasOmamori(const class FName ID);
	bool HasWeapon(const class FName ID);
	bool HasWeaponSafe(const class FName ID, const bool IsFogWeapon);
	bool IsConsumableEmpty();
	bool IsFaithItemType(class FName ID);
	bool IsInShortcutConsumables(const class FName& ID);
	bool IsInventoryEmpty();
	bool IsInventoryItemEmpty(ENoceInventoryType InventoryType, ENoceNotebookType NotebookType);
	bool IsItemEmaUsed(class FName EmaName);
	bool IsKeyItemEma(const class FName ID);
	bool IsNewItem(const class FName ID, ENoceInventoryType InventoryType, ENoceNotebookType NotebookType);
	bool IsNewItemInInventory(const class FName ID, ENoceInventoryType InventoryType);
	bool IsOmamoriEmpty();
	bool IsSpecifyOmamoriEquipped(class FName ID);
	bool IsUseFogWeaponInventory();
	bool IsWeaponFull();
	bool RemoveConsumable(const class FName ID, const int32 Quantity, const bool RemovedDueSold);
	void RemoveKeyItem(const class FName ID);
	bool RemoveKeyItemEma(const int32 Quantity);
	void RemoveLetter(const class FName ID);
	bool RemoveOmamori(const class FName ID, const bool RemoveViewed);
	void RemoveViewedItemInInventory(const class FName ID, ENoceInventoryType InventoryType);
	void ResetConsumableAndShortcut();
	void ResetDarkWeaponInventory();
	void ResetFogWeaponInventory();
	void ResetInventory();
	void ResetWeaponInventory();
	void SetConsumableSlotNum(int32 NewSlotNum);
	void SetEquippedWeaponDurability(const class FName ID, const float Durability);
	void SetLastNotebookContent(const ENoceNotebookType Type, const class FName Content);
	void SetLastNotebookNameIndex(const ENoceNotebookType Type, int32 NewIndex);
	void SetLastNotebookType(const ENoceNotebookType Type);
	void SetLastSelectConsumableIndex(const int32 Index_0);
	void SetLastViewedLetter(const class FName ID);
	void SetOmamoriSlotNum(int32 NewSlotNum);
	void SetWeaponDurability(const int32 Index_0, const bool IsFogWeapon, const float Durability);
	void SetWeaponInventoryType(bool IsFogWeapon, bool AutoEquipIfNeeded);
	void TransferFaithItemToUsed(class FName ID, int32 Quanity);
	void TryEquipLastUsedWeapon();
	void TryToChangeWeapon(int32 Index_0);
	void TryToUseConsumableItem(int32 Index_0);
	void UnequipConsumable(const int32 Index_0);
	void UnequipConsumableByName(const class FName& ID);
	void UnEquipCurrentWeapon();
	void UnequipOmamori(const int32 Index_0);
	void UpdateLastViewedConsumablesNum();
	void UpdateOmamoriSlotNum(int32 RoundNum, int32 SlotSize);
	void UpdateWeaponShouldBeEquipped(bool Force);
	void UseConsumable(const class FName& ID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerInventoryComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerInventoryComponent")
	}
	static class UNocePlayerInventoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerInventoryComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerInventoryComponent;

// Class GameNoce.NocePlayerLookAtSubsystem
// 0x0058 (0x0090 - 0x0038)
class UNocePlayerLookAtSubsystem : public UNoceWorldSubsystem
{
public:
	float                                         MaxSearchDistanceSquared;                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SearchAngle;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UNocePlayerLookAtTargetComponent* FindLookAtTargetComponent(const struct FVector& InHeadLocation, bool InDebugDraw);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerLookAtSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerLookAtSubsystem")
	}
	static class UNocePlayerLookAtSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerLookAtSubsystem>();
	}
};
DUMPER7_ASSERTS_UNocePlayerLookAtSubsystem;

// Class GameNoce.NocePlayerLookTargetComponent
// 0x00C0 (0x02F0 - 0x0230)
class UNocePlayerLookTargetComponent final : public USceneComponent
{
public:
	class FName                                   HeadSocketName;                                    // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SpineSocketName;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LookTargetSocketName;                              // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LerpAlpha;                                         // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NoTargetLerpAlpha;                                 // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunningLerpAlpha;                                  // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunningNoTargetLerpAlpha;                          // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LengthRange;                                       // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchRange;                                        // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRange;                                          // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnableBlendTime;                                   // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DisableBlendTime;                                  // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26C[0x64];                                     // 0x026C(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x02D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNocePlayerLookAtSubsystem*             PlayerLookAtSubsystem;                             // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  LookTarget;                                        // 0x02E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDisableBlendTime();
	bool GetEnable();
	float GetEnableBlendTime();
	bool GetNeedApplyLookAt();
	struct FVector GetPreviousLookAtLocation();
	void SetDisplaySystemInfo(bool InValue);
	void SetEnable(bool InValue);
	void SetLookTarget(class AActor* InLookTarget);
	void Update(float InDeltaTime, bool InFindLookAtTarget);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerLookTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerLookTargetComponent")
	}
	static class UNocePlayerLookTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerLookTargetComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerLookTargetComponent;

// Class GameNoce.NocePlayerRestrictByProgressComp
// 0x0008 (0x0138 - 0x0130)
class UNocePlayerRestrictByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	int32                                         BitMask;                                           // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerRestrictByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerRestrictByProgressComp")
	}
	static class UNocePlayerRestrictByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerRestrictByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNocePlayerRestrictByProgressComp;

// Class GameNoce.NocePlayerSanityRegenExecution
// 0x0000 (0x0040 - 0x0040)
class UNocePlayerSanityRegenExecution final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerSanityRegenExecution")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerSanityRegenExecution")
	}
	static class UNocePlayerSanityRegenExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerSanityRegenExecution>();
	}
};
DUMPER7_ASSERTS_UNocePlayerSanityRegenExecution;

// Class GameNoce.NocePlayerStaminaComponent
// 0x00D8 (0x0178 - 0x00A0)
class UNocePlayerStaminaComponent final : public UActorComponent
{
public:
	class UDataTable*                             DT_Stamina;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           DodgeStaminaKeys;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<ENoceActionLevel, float>                 ActionLevelDodgeStaminaCostRatioMap;               // 0x00B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_StaminaCostSetByCaller;                         // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_StaminaCostSetByCaller;                        // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_StaminaTiredTimeSetByCaller;                    // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Tag_StaminaTiredTimeSetByCaller;                   // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GE_StaminaDelayRecover;                            // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StaminaKeyContinuousDodgeMultiplier;               // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ResetDodgeCountTime;                               // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANocePlayerCharacter*                   PlayerCharacter;                                   // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNoceCheatManager*                      CheatManager;                                      // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x20];                                     // 0x0158(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddContinuousDodgeCount();
	void CostStamina(class FName InStaminaKey);
	float GetStaminaByRowName(class FName InRowName);
	void HandleOnPossessed(bool InPossessed);
	void HandleStaminaDamage(float InStaminaDamage);
	void OnResetDodgeCountTimerUp();
	void ResetContinuousDodgeCount();
	void ResetStaminaTiredTime();
	void UpdateStaminaTiredTime(float InCostStamina);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerStaminaComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerStaminaComponent")
	}
	static class UNocePlayerStaminaComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePlayerStaminaComponent>();
	}
};
DUMPER7_ASSERTS_UNocePlayerStaminaComponent;

// Class GameNoce.NocePlayerTriggerInterface
// 0x0000 (0x0000 - 0x0000)
class INocePlayerTriggerInterface final
{
public:
	struct FColor GetDebugActiveColor();
	class FString GetDebugTriggerInfo();
	class FString GetDebugTriggerTitle();
	TArray<class UBoxComponent*> GetHintboxes();
	class USphereComponent* GetHintSphere();
	class UBoxComponent* GetTriggerBox();
	bool IsPlayerOverlapping();
	bool IsTriggerAvailable();
	bool IsTriggerEnabled();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePlayerTriggerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePlayerTriggerInterface")
	}
	static class INocePlayerTriggerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INocePlayerTriggerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INocePlayerTriggerInterface;

// Class GameNoce.NocePopCircleGarnishWidget
// 0x0008 (0x02E8 - 0x02E0)
class UNocePopCircleGarnishWidget final : public UUserWidget
{
public:
	class UWidgetAnimation*                       Loop;                                              // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePopCircleGarnishWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePopCircleGarnishWidget")
	}
	static class UNocePopCircleGarnishWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePopCircleGarnishWidget>();
	}
};
DUMPER7_ASSERTS_UNocePopCircleGarnishWidget;

// Class GameNoce.NocePopWindowWidget
// 0x00F0 (0x04A0 - 0x03B0)
class UNocePopWindowWidget final : public UNoceFocusableWidget
{
public:
	TMulticastInlineDelegate<void()>              OnConfirm;                                         // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UNocePopWindowBtnWidget*                BtnTop;                                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePopWindowBtnWidget*                BtnBottom;                                         // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DialogTextBlock;                                   // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNeoAudioTriggerIdHandle>       ConfirmSound;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               CancelSound;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<ENoceUIPopWindowType, struct FNoceUIPopWindowTypeData> TypeDataMap;                         // 0x03F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ENoceUIPopWindowType                          CurrentType;                                       // 0x0448(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DialogText;                                        // 0x0450(0x0010)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           ButtonTexts;                                       // 0x0460(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           ButtonActionNames;                                 // 0x0470(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UNocePopWindowBtnWidget*>        Buttons;                                           // 0x0480(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UNoceVerticalList*                      List;                                              // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastSelectedIndex;                                 // 0x0498(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          WasShowingGuide;                                   // 0x049C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ENoceUIPopWindowType GetCurrentType();
	void OnListMouseConfirm(int32 Index_0);
	void SetDefaultIndex(int32 InIndex);
	void SetDialog(const class FText& InDialogText);
	void SetProperties(const class FText& InDialogText, const TArray<class FText>& InButtonTexts, const TArray<class FName>& InButtonActionNames);
	void SetSound(const struct FNeoAudioTriggerIdHandle& InFadeInSound, const TArray<struct FNeoAudioTriggerIdHandle>& InConfirmSound, const struct FNeoAudioTriggerIdHandle& InCancelSound);
	void SetType(ENoceUIPopWindowType InType);
	bool ShowHpAdd(float AddedHP);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePopWindowWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePopWindowWidget")
	}
	static class UNocePopWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePopWindowWidget>();
	}
};
DUMPER7_ASSERTS_UNocePopWindowWidget;

// Class GameNoce.NocePostProcessVolumeVisualizerComponent
// 0x0000 (0x00A0 - 0x00A0)
class UNocePostProcessVolumeVisualizerComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NocePostProcessVolumeVisualizerComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NocePostProcessVolumeVisualizerComponent")
	}
	static class UNocePostProcessVolumeVisualizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNocePostProcessVolumeVisualizerComponent>();
	}
};
DUMPER7_ASSERTS_UNocePostProcessVolumeVisualizerComponent;

// Class GameNoce.NoceProfilingActor
// 0x0020 (0x02B0 - 0x0290)
class ANoceProfilingActor final : public AActor
{
public:
	bool                                          bEnableInsight;                                    // 0x0290(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMemoryReport;                                     // 0x0291(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutPath;                                           // 0x0298(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void BindCmd_ReleaseFPS(bool bEnable);
	static void BindCmd_StartProfiling(int32 Index_0);
	static void BindCmd_StopProfiling();
	static class UWorld* GetRobustWorld();
	static bool IsStartProfiling();

	bool InternalStartProfiling(bool bEnableMemInsight);
	bool InternalStopProfiling();
	void StartDefaultProfiling();
	void StartMemProfiling();
	void StartProfiling(bool bEnableMemInsight);
	void StopProfiling();
	void UpdateCPUBoundComp();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceProfilingActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceProfilingActor")
	}
	static class ANoceProfilingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceProfilingActor>();
	}
};
DUMPER7_ASSERTS_ANoceProfilingActor;

// Class GameNoce.NoceProgressSMInstance
// 0x0010 (0x0708 - 0x06F8)
class UNoceProgressSMInstance : public USMInstance
{
public:
	uint8                                         Pad_6F8[0x10];                                     // 0x06F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceProgressSMInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceProgressSMInstance")
	}
	static class UNoceProgressSMInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceProgressSMInstance>();
	}
};
DUMPER7_ASSERTS_UNoceProgressSMInstance;

// Class GameNoce.NoceProgressTransitionInstance
// 0x0038 (0x00F8 - 0x00C0)
class UNoceProgressTransitionInstance final : public USMTransitionInstance
{
public:
	uint8                                         Pad_C0[0x38];                                      // 0x00C0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceProgressTransitionInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceProgressTransitionInstance")
	}
	static class UNoceProgressTransitionInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceProgressTransitionInstance>();
	}
};
DUMPER7_ASSERTS_UNoceProgressTransitionInstance;

// Class GameNoce.NoceRecastNavMesh
// 0x0000 (0x0688 - 0x0688)
class ANoceRecastNavMesh final : public ARecastNavMesh
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRecastNavMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRecastNavMesh")
	}
	static class ANoceRecastNavMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceRecastNavMesh>();
	}
};
DUMPER7_ASSERTS_ANoceRecastNavMesh;

// Class GameNoce.NoceReplaceConsumableChildWidget
// 0x0010 (0x0388 - 0x0378)
class UNoceReplaceConsumableChildWidget : public UNoceSelectItemWidget
{
public:
	class UImage*                                 Item;                                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Count;                                             // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceReplaceConsumableChildWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceReplaceConsumableChildWidget")
	}
	static class UNoceReplaceConsumableChildWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceReplaceConsumableChildWidget>();
	}
};
DUMPER7_ASSERTS_UNoceReplaceConsumableChildWidget;

// Class GameNoce.NoceReplaceConsumableWidget
// 0x00E0 (0x0560 - 0x0480)
class UNoceReplaceConsumableWidget : public UNoceReplaceWidget
{
public:
	TMulticastInlineDelegate<void(bool IsSuccess, class FName ID)> OnReplaceEnd;                     // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UTextBlock*                             DesTextBlock1;                                     // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DesTextBlock2;                                     // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild;                              // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_1;                            // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_2;                            // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_3;                            // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_4;                            // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_5;                            // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_6;                            // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_7;                            // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_8;                            // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_9;                            // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_10;                           // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_11;                           // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_12;                           // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceReplaceConsumableChildWidget*      WBP_ReplaceItemChild_13;                           // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Item;                                              // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 WepLine_2;                                         // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceVerticalGrid*                      Grid;                                              // 0x0520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ItemId;                                            // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Quantity;                                          // 0x0530(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PickupActorName;                                   // 0x0534(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNoceReplaceConsumableChildWidget*> AllItemChilds;                                  // 0x0540(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceInventoryConsumable>       Consumables;                                       // 0x0550(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void OnRefreshSelection(int32 Index_0);
	void ShowConsumable(class FName InID, int32 InQuantity, class AActor* PickupActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceReplaceConsumableWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceReplaceConsumableWidget")
	}
	static class UNoceReplaceConsumableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceReplaceConsumableWidget>();
	}
};
DUMPER7_ASSERTS_UNoceReplaceConsumableWidget;

// Class GameNoce.NoceRichTextBlock
// 0x0000 (0x08B0 - 0x08B0)
class UNoceRichTextBlock final : public URichTextBlock
{
public:
	void SetApplyOutlineToDropShadows(const bool InValue);
	void SetColorAndOpacity(const struct FSlateColor& InValue);
	void SetFontMaterial(class UMaterialInterface* InValue);
	void SetOutlineBlur(const int32 InValue);
	void SetOutlineColor(const struct FLinearColor& InValue);
	void SetOutlineMaterial(class UMaterialInterface* InValue);
	void SetOutlineSize(const int32 InValue);
	void SetSeparateFillAlpha(const bool InValue);
	void SetShadowColorAndOpacity(const struct FLinearColor& InValue);
	void SetShadowOffset(const struct FVector2D& InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRichTextBlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRichTextBlock")
	}
	static class UNoceRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRichTextBlock>();
	}
};
DUMPER7_ASSERTS_UNoceRichTextBlock;

// Class GameNoce.NoceRichTextBlockInputIconDecorator
// 0x0008 (0x0030 - 0x0028)
class UNoceRichTextBlockInputIconDecorator : public URichTextBlockDecorator
{
public:
	float                                         SizeFactor;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Padding;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRichTextBlockInputIconDecorator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRichTextBlockInputIconDecorator")
	}
	static class UNoceRichTextBlockInputIconDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRichTextBlockInputIconDecorator>();
	}
};
DUMPER7_ASSERTS_UNoceRichTextBlockInputIconDecorator;

// Class GameNoce.NoceRootMotionScaleComponent
// 0x0068 (0x0108 - 0x00A0)
class UNoceRootMotionScaleComponent final : public UActorComponent
{
public:
	TArray<class UNoceANS_RootMotionScale*>       ANSRootMotionScaleStack;                           // 0x00A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class UNoceANS_RootMotionScale*, float>  ANSRootMotionScaleValueMap;                        // 0x00B0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceRootMotionScaleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceRootMotionScaleComponent")
	}
	static class UNoceRootMotionScaleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceRootMotionScaleComponent>();
	}
};
DUMPER7_ASSERTS_UNoceRootMotionScaleComponent;

// Class GameNoce.NoceSanitySpawnForbiddenVolume
// 0x0000 (0x02C8 - 0x02C8)
class ANoceSanitySpawnForbiddenVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSanitySpawnForbiddenVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSanitySpawnForbiddenVolume")
	}
	static class ANoceSanitySpawnForbiddenVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceSanitySpawnForbiddenVolume>();
	}
};
DUMPER7_ASSERTS_ANoceSanitySpawnForbiddenVolume;

// Class GameNoce.NoceSanitySpawnVolume
// 0x00E0 (0x03A8 - 0x02C8)
class ANoceSanitySpawnVolume final : public AVolume
{
public:
	bool                                          Enabled;                                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EnableTag;                                         // 0x02CC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DisableTag;                                        // 0x02D4(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSanityForceSpawnSetting>       ForceSpawnSettings;                                // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSanitySpawnVolumeSetting              SpawnVolumeSetting;                                // 0x02F0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);
	void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSanitySpawnVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSanitySpawnVolume")
	}
	static class ANoceSanitySpawnVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceSanitySpawnVolume>();
	}
};
DUMPER7_ASSERTS_ANoceSanitySpawnVolume;

// Class GameNoce.NoceSavableInterface
// 0x0000 (0x0000 - 0x0000)
class INoceSavableInterface final
{
public:
	void RequestCreateRecordDataBP(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSavableInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSavableInterface")
	}
	static class INoceSavableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceSavableInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceSavableInterface;

// Class GameNoce.SaveLoadUIObject
// 0x0058 (0x0080 - 0x0028)
class USaveLoadUIObject final : public UObject
{
public:
	bool                                          SlotExist;                                         // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MyIndex;                                           // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              GameplayTime;                                      // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SaveDate;                                          // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameProgressTag;                                   // 0x0040(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalProgressTag;                             // 0x0048(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	ENoceActionLevel                              ActionLevel;                                       // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceRiddleLevel                              RiddleLevel;                                       // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LocationName;                                      // 0x006C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndingClearedBit;                                  // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGameClearSaveGame;                               // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableClearSaveGame;                              // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AnyEndingCleared();
	bool IsEndingCleared(ENoceEndingType EndingType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SaveLoadUIObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SaveLoadUIObject")
	}
	static class USaveLoadUIObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveLoadUIObject>();
	}
};
DUMPER7_ASSERTS_USaveLoadUIObject;

// Class GameNoce.NoceSaveLoadWidget
// 0x0010 (0x03C0 - 0x03B0)
class UNoceSaveLoadWidget final : public UNoceFocusableWidget
{
public:
	bool                                          UseFadeOutBlack;                                   // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableClearGame;                                  // 0x03B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       FadeOutBlack;                                      // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CacheGameClearedFlag();
	bool IsCleared(ENoceEndingType InCheckEndingType, int32 InEndingClearBit);
	void ShowLoadGame(bool InDisableClearGame);
	bool ShowSaveClearGame(bool InCheckFirstTime, ENoceEndingType InCheckEndingType);
	void ShowSaveGame();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSaveLoadWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSaveLoadWidget")
	}
	static class UNoceSaveLoadWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSaveLoadWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSaveLoadWidget;

// Class GameNoce.NoceSavePointUpgradeDataAsset
// 0x0040 (0x0070 - 0x0030)
class UNoceSavePointUpgradeDataAsset final : public UDataAsset
{
public:
	TArray<int32>                                 AddHealthCosts;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AddSanityCosts;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AddStaminaCosts;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceSavePointOmamoriUpgradeData> AddOmamoriCosts;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	TArray<int32> GetAddOmamoriCosts(ENoceRoundType round);
	int32 GetCost(ENoceUpgradeType Type, ENoceRoundType round, int32 CurrentLevel);
	int32 GetMaxLevel(ENoceUpgradeType Type, ENoceRoundType round);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSavePointUpgradeDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSavePointUpgradeDataAsset")
	}
	static class UNoceSavePointUpgradeDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSavePointUpgradeDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceSavePointUpgradeDataAsset;

// Class GameNoce.NoceSavePointWidget
// 0x02B8 (0x0668 - 0x03B0)
class UNoceSavePointWidget : public UNoceFocusableWidget
{
public:
	class FText                                   SaveGameText;                                      // 0x03B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SaveGameDesText;                                   // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SellItemText;                                      // 0x03D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SellItemDesText;                                   // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   HealSanityText;                                    // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   HealSanityDesText;                                 // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   BuyOmamoriText;                                    // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   BuyOmamoriDesText;                                 // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   BuyItemText;                                       // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   BuyItemDesText;                                    // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SwitchOutfitText;                                  // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SwitchOutfitDesText;                               // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClaimRewardText;                                   // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClaimRewardDesText;                                // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClaimedRewardDesText;                              // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         SaveGameWidgetPath;                                // 0x04A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         SellItemWidgetPath;                                // 0x04C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         HealWidgetPath;                                    // 0x04E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         HealSanityWidgetPath;                              // 0x0500(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         RepairWeaponWidgetPath;                            // 0x0520(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         BuyOmamoriWidgetPath;                              // 0x0540(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         BuyItemWidgetPath;                                 // 0x0560(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         SwitchOutfitWidgetPath;                            // 0x0580(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ListState2Limit;                                   // 0x05A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A4[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               MainGroup;                                         // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNocePauseListWidget*                   WBP_SavePoint_List;                                // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ListState1;                                        // 0x05B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ListState2;                                        // 0x05C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ConfirmSound;                                      // 0x05C8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ConfirmErrorSound;                                 // 0x05D0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               ToWorldSound;                                      // 0x05D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNeoAudioTriggerIdHandle               SelectSound;                                       // 0x05E0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UNoceSaveLoadWidget*                    SaveGameWidget;                                    // 0x05E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   SellItemWidget;                                    // 0x05F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   HealWidget;                                        // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   HealSanityWidget;                                  // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   RepairWeaponWidget;                                // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   BuyItemWidget;                                     // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   BuyOmamoriWidget;                                  // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   SwitchOutfitWidget;                                // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNoceFocusableWidget*>           AllPages;                                          // 0x0628(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UPauseListObject*>               CurrentObjs;                                       // 0x0638(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UNoceFocusableWidget*                   CurrentWidget;                                     // 0x0648(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANocePlayerState*                       PlayerState;                                       // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidgetAnimation*>               ListStates;                                        // 0x0658(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool CanClaimReward();
	void CheckDLCProgressToEnableOffering(bool* NoUse);
	void CreatePageWidget(const struct FSoftClassPath& Path, class UNoceFocusableWidget** NewWidget);
	void ExecuteObj(class UPauseListObject* Obj);
	TArray<class UPauseListObject*> GetPauseListObjs();
	bool IsInPage();
	void OnListMouseConfirm(int32 Index_0);
	void OnPageClosed();
	void OnUpdateEmaNum();
	void OnUpdateFaithValue();
	void PlayTransition(bool IsForward, bool* NoUse);
	bool ShowEmaNum(bool IsShow);
	bool ShowFaithValue(bool IsShow);
	void ToBuyItem();
	void ToBuyOmamori();
	void ToClaimReward();
	void ToClaimRewardBP(bool* NoUse);
	void ToHeal();
	void ToHealSanity();
	void ToPage(const struct FSoftClassPath& PageWidgetPath, class UNoceFocusableWidget** PageWidget);
	void ToRepairWeapon();
	void ToSaveGame();
	void ToSellItem();
	void ToSwitchOutfit();
	bool UpdateEmaNum(bool WithAnimation);
	bool UpdateFaithValue(bool WithAnimation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSavePointWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSavePointWidget")
	}
	static class UNoceSavePointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSavePointWidget>();
	}
};
DUMPER7_ASSERTS_UNoceSavePointWidget;

// Class GameNoce.NoceScrollableTextBlock
// 0x0030 (0x03A0 - 0x0370)
class UNoceScrollableTextBlock final : public UTextBlock
{
public:
	bool                                          bIsScrollingEnabled;                               // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartDelay;                                        // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndDelay;                                          // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeInDelay;                                       // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutDelay;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPaused;                                          // 0x0380(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_381[0x1F];                                     // 0x0381(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetScrollingPaused(bool InIsPaused);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceScrollableTextBlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceScrollableTextBlock")
	}
	static class UNoceScrollableTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceScrollableTextBlock>();
	}
};
DUMPER7_ASSERTS_UNoceScrollableTextBlock;

// Class GameNoce.NoceSeqDataAsset
// 0x0030 (0x0060 - 0x0030)
class UNoceSeqDataAsset final : public UDataAsset
{
public:
	TArray<class UDataLayerAsset*>                ActivatedDataLayerAssets;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                LoadedDataLayerAssets;                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDataLayerAsset*>                UnloadedDataLayerAssets;                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSeqDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSeqDataAsset")
	}
	static class UNoceSeqDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSeqDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceSeqDataAsset;

// Class GameNoce.NoceSetting_AudioOutputDevice
// 0x0070 (0x0210 - 0x01A0)
class UNoceSetting_AudioOutputDevice final : public UGameSettingValueDiscreteDynamic
{
public:
	uint8                                         Pad_1A0[0x70];                                     // 0x01A0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DefaultDeviceChanged(EAudioDeviceChangedRole InRole, const class FString& DeviceID);
	void DeviceAddedOrRemoved(const class FString& DeviceID);
	void OnAudioOutputDevicesObtained(const TArray<struct FAudioOutputDeviceInfo>& AvailableDevices);
	void OnCompletedDeviceSwap(const struct FSwapAudioOutputResult& SwapResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetting_AudioOutputDevice")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetting_AudioOutputDevice")
	}
	static class UNoceSetting_AudioOutputDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetting_AudioOutputDevice>();
	}
};
DUMPER7_ASSERTS_UNoceSetting_AudioOutputDevice;

// Class GameNoce.NoceSetting_Resolution
// 0x0048 (0x0180 - 0x0138)
class UNoceSetting_Resolution final : public UGameSettingValueDiscrete
{
public:
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSetting_Resolution")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSetting_Resolution")
	}
	static class UNoceSetting_Resolution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSetting_Resolution>();
	}
};
DUMPER7_ASSERTS_UNoceSetting_Resolution;

// Class GameNoce.NoceShiroRevive2ByProgressComp
// 0x0010 (0x0140 - 0x0130)
class UNoceShiroRevive2ByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	int32                                         PostProcessIndex;                                  // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Intensity;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Frequency;                                         // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceShiroRevive2ByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceShiroRevive2ByProgressComp")
	}
	static class UNoceShiroRevive2ByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceShiroRevive2ByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceShiroRevive2ByProgressComp;

// Class GameNoce.NoceSkyAtmosphereVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceSkyAtmosphereVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSkyAtmosphereDataRowHandle        SkyAtmosphereDataRow;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceSkyAtmosphereProgress>     AtmosphereDataByProgress;                          // 0x00E0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSkyAtmosphereVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSkyAtmosphereVolumeComponent")
	}
	static class UNoceSkyAtmosphereVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSkyAtmosphereVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSkyAtmosphereVolumeComponent;

// Class GameNoce.NoceSpeakerRegister
// 0x0008 (0x00A8 - 0x00A0)
class UNoceSpeakerRegister final : public UActorComponent
{
public:
	bool                                          RegisterOnBeginPlay;                               // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceDialogSpeaker                            Speaker;                                           // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegisterSpeaker();
	void UnregisterSpeaker();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSpeakerRegister")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSpeakerRegister")
	}
	static class UNoceSpeakerRegister* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSpeakerRegister>();
	}
};
DUMPER7_ASSERTS_UNoceSpeakerRegister;

// Class GameNoce.NoceStreamByProgressComp
// 0x00C8 (0x01F8 - 0x0130)
class UNoceStreamByProgressComp final : public UNoceShowByProgressBaseComponent
{
public:
	TArray<TSoftObjectPtr<class UDataLayerAsset>> HiddenInGameDataLayerAsset;                        // 0x0130(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         HiddenInGameActorMinBoundSize;                     // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, bool>                     HiddenInGameActors;                                // 0x0148(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TSet<class FName>                             HiddenInGameDataLayerNames;                        // 0x0198(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8[0x10];                                     // 0x01E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableStreamingFromGame(bool InEnable);
	void ResetHiddenInGameActors();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceStreamByProgressComp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceStreamByProgressComp")
	}
	static class UNoceStreamByProgressComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceStreamByProgressComp>();
	}
};
DUMPER7_ASSERTS_UNoceStreamByProgressComp;

// Class GameNoce.NoceSubtitleSubsystem
// 0x00D8 (0x0108 - 0x0030)
class UNoceSubtitleSubsystem final : public UWorldSubsystem
{
public:
	bool                                          DebugEnableSubtitle;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xD7];                                      // 0x0031(0x00D7)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForbitSubtitleForSpecifiedLanguage(const class FString& InLanguage, bool InForbit);
	bool GetCanShowSubtitle();
	void OnSettingChanged(class UNoceSystemSaveGame* Settings);
	void OnSystemSaveLoaded(class UNoceSystemSaveGame* InSystemSave);
	void RemoveAllCinematicNote();
	void RemoveAllSubtitle();
	void RequestCinematicNote(const class FText& InSubstitleText, float InDuration, int32 InPriority);
	void RequestSubtitle(const class FText& InSubstitleText, float InDuration, int32 InPriority, ENoceSubtitleType InType, bool UseItalic, bool AlwaysShow);
	void SetHideSubtitle(bool InHide);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSubtitleSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSubtitleSubsystem")
	}
	static class UNoceSubtitleSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSubtitleSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceSubtitleSubsystem;

// Class GameNoce.NoceSubtitleWidgetBase
// 0x0030 (0x0330 - 0x0300)
class UNoceSubtitleWidgetBase : public UNoceUserWidgetBase
{
public:
	TArray<struct FNoceSubtitleDisplay>           SubtitleOnScreen;                                  // 0x0300(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   EmptyText;                                         // 0x0310(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	int32                                         SubtitleLimit;                                     // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MergeTextWithSameSpeaker;                          // 0x0324(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_325[0xB];                                      // 0x0325(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSubtitleBackground(ENoceGameSettingSubtitleBackground InBackground);
	void SetSubtitleEmptyLineBP(int32 Index_0);
	void SetSubtitleLineBP(int32 Index_0, const class FText& Prefix, const class FText& Subtitle, bool HidePrefix);
	void SetSubtitleType(ENoceSubtitleType InType, bool UseItalic);
	void SetSubtitleVisible(bool InVisible);
	bool UpdateSetting(class UNoceSystemSaveGame* Settings);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSubtitleWidgetBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSubtitleWidgetBase")
	}
	static class UNoceSubtitleWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSubtitleWidgetBase>();
	}
};
DUMPER7_ASSERTS_UNoceSubtitleWidgetBase;

// Class GameNoce.NoceSweetLightVolumeComponent
// 0x0040 (0x0118 - 0x00D8)
class UNoceSweetLightVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceSweetLightDataRowHandle           CharacterLightDataRow;                             // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNoceSweetLightDataRowHandle           EnvironmentLightDataRow;                           // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceSweetLightProgress>        LightDataByProgress;                               // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x20];                                      // 0x00F8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSweetLightVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSweetLightVolumeComponent")
	}
	static class UNoceSweetLightVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSweetLightVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceSweetLightVolumeComponent;

// Class GameNoce.NoceSystemSaveGame
// 0x00C8 (0x00F8 - 0x0030)
class UNoceSystemSaveGame final : public UNoceSaveGameBase
{
public:
	int32                                         LastLoadSlotIndex;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastSaveSlotIndex;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastAutoSaveIndex;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UNoceSystemSaveGame* Settings)> OnSettingChanged;            // 0x0040(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x1];                                       // 0x0050(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsGameSettingInitialized;                          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PendingCulture;                                    // 0x0058(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Culture;                                           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x1];                                       // 0x0078(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ENoceLanguageType                             VoiceLanguage;                                     // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ShowSubtitles;                                     // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingSize                          SubtitleSize;                                      // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingFont                          SubtitleFont;                                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingSubtitleColor                 SubtitleColor;                                     // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SubtitleNames;                                     // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingSubtitleBackground            SubtitleBackground;                                // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingFont                          UIFont;                                            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          TutorialVisibility;                                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceInputGamepadType                         GamepadControlType;                                // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SprintToggle;                                      // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InvertCameraYawInput;                              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InvertCameraPitchInput;                            // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSensitivity;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MouseCameraSensitivity;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          EnableVibration;                                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverallVolume;                                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BGMVolume;                                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SFXVolume;                                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VoiceVolume;                                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UIVolume;                                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingAudioProfileType              AudioProfile;                                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingAudioDynamicRange             AudioDynamicRange;                                 // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Brightness;                                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Contrast;                                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENoceGameSettingPreset                        LastPreset;                                        // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasPendingPreset;                                  // 0x00B5(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EColorBlindMode                               ColorBlindMode;                                    // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorBlindStrength;                                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndingClearedBit;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoceEndingType                               LastEndingType;                                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TitleCorruptLevel;                                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SavedAchievementVersion;                           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceRecordStatus>              AchievementRecord;                                 // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnsyncedAchievementList;                           // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HasDLC1;                                           // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDLC2;                                           // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDLC3;                                           // 0x00F2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDLC4;                                           // 0x00F3(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<ENoceGameSettingPreset> GetAvailableConsolePresets();

	bool AnyEndingCleared();
	void ApplyConsolePreset();
	void ApplySettings();
	ENoceEndingType GetLastEndingType();
	int32 GetTitleCorruptionLevel();
	bool IsEndingCleared(ENoceEndingType EndingType);
	void SetAudioDynamicRange(ENoceGameSettingAudioDynamicRange Value);
	void SetAudioProfile(ENoceGameSettingAudioProfileType Value);
	void SetBGMVolume(float InVolume);
	void SetBrightness(float InVal);
	void SetCameraSensitivity(float Value);
	void SetColorBlindMode(EColorBlindMode InMode);
	void SetColorBlindStrength(int32 InColorBlindStrength);
	void SetContrast(float InVal);
	void SetEnableVibration(bool Value);
	void SetEndingCleared(ENoceEndingType EndingType);
	void SetEndingNotCleared(ENoceEndingType EndingType);
	void SetGamepadControlType(ENoceInputGamepadType InType);
	void SetInvertCameraPitchInput(bool Value);
	void SetInvertCameraYawInput(bool Value);
	void SetLastEndingType(ENoceEndingType InEndingType);
	void SetMouseCameraSensitivity(float Value);
	void SetOverallVolume(float InVolume);
	void SetPendingCulture(const class FString& NewCulture);
	void SetPreset(ENoceGameSettingPreset InVal);
	void SetSettingInitialized();
	void SetSFXVolume(float InVolume);
	void SetShowSubtitleNames(bool Value);
	void SetShowSubtitles(bool Value);
	void SetSprintToggle(bool Value);
	void SetSubtitleBackground(ENoceGameSettingSubtitleBackground Value);
	void SetSubtitleColor(ENoceGameSettingSubtitleColor Value);
	void SetSubtitleFont(ENoceGameSettingFont Value);
	void SetSubtitleSize(ENoceGameSettingSize Value);
	void SetTitleCorruptionLevel(int32 InLevel, bool ForceSet);
	void SetTutorialVisibility(bool Value);
	void SetUIFont(ENoceGameSettingFont Value);
	void SetUIVolume(float InVolume);
	void SetVoiceLanguage(ENoceLanguageType Value);
	void SetVoiceVolume(float InVolume);

	ENoceGameSettingAudioDynamicRange GetAudioDynamicRange() const;
	ENoceGameSettingAudioProfileType GetAudioProfile() const;
	float GetBGMVolume() const;
	float GetBrightness() const;
	float GetCameraSensitivity() const;
	EColorBlindMode GetColorBlindMode() const;
	int32 GetColorBlindStrength() const;
	float GetContrast() const;
	ENoceGameSettingPreset GetDefaultConsolePreset() const;
	ENoceLanguageType GetDefaultVoiceLanguage() const;
	bool GetEnableVibration() const;
	ENoceInputGamepadType GetGamepadControlType() const;
	bool GetInvertCameraPitchInput() const;
	bool GetInvertCameraYawInput() const;
	ENoceGameSettingPreset GetLastPreset() const;
	float GetMouseCameraSensitivity() const;
	float GetOverallVolume() const;
	float GetSFXVolume() const;
	bool GetShowSubtitleNames() const;
	bool GetShowSubtitles() const;
	bool GetSprintToggle() const;
	ENoceGameSettingSubtitleBackground GetSubtitleBackground() const;
	ENoceGameSettingSubtitleColor GetSubtitleColor() const;
	ENoceGameSettingFont GetSubtitleFont() const;
	ENoceGameSettingSize GetSubtitleSize() const;
	bool GetTutorialVisibility() const;
	ENoceGameSettingFont GetUIFont() const;
	float GetUIVolume() const;
	ENoceLanguageType GetVoiceLanguage() const;
	float GetVoiceVolume() const;
	bool IsSettingInitialized() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceSystemSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceSystemSaveGame")
	}
	static class UNoceSystemSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceSystemSaveGame>();
	}
};
DUMPER7_ASSERTS_UNoceSystemSaveGame;

// Class GameNoce.NoceTabList
// 0x0000 (0x00A0 - 0x00A0)
class UNoceTabList final : public UNoceSimpleList
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTabList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTabList")
	}
	static class UNoceTabList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTabList>();
	}
};
DUMPER7_ASSERTS_UNoceTabList;

// Class GameNoce.NoceTentacleSubsystem
// 0x0040 (0x0078 - 0x0038)
class UNoceTentacleSubsystem : public UNoceWorldSubsystem
{
public:
	TSoftClassPtr<class UClass>                   TentacleClass;                                     // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ANoceEnemyCharacter>     MyTentacle;                                        // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         ErosionTentacleArray;                              // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	TSoftClassPtr<class UClass> GetTentacleClass();
	bool IsTentacleEmpty();
	void OnTentacleExist(bool Value);
	void RegisterTentacle(class AActor* InActor);
	void RequestTentacleLink(class AActor* RequestActor, class AActor* TargetActor, class FName LinkName);
	void RequestTentacleLink_BP(class AActor* RequestActor, class AActor* TargetActor, class FName LinkName);
	void UnRegisterTentacle(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTentacleSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTentacleSubsystem")
	}
	static class UNoceTentacleSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTentacleSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceTentacleSubsystem;

// Class GameNoce.NoceTickConditionHandler
// 0x0020 (0x0140 - 0x0120)
class UNoceTickConditionHandler : public UNoceConditionHandler
{
public:
	bool                                          IsHandleOnce;                                      // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecuteSuccessActionsOnceMetCondition;             // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecuteFailedActionsOnceMetCondition;              // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuccessDuration;                                   // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedDuration;                                    // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasHandled;                                        // 0x012C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuccessTimer;                                      // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FailedTimer;                                       // 0x0134(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsEnabled;                                         // 0x0138(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Discontinued_BP();
	void StopHandleCondition();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTickConditionHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTickConditionHandler")
	}
	static class UNoceTickConditionHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTickConditionHandler>();
	}
};
DUMPER7_ASSERTS_UNoceTickConditionHandler;

// Class GameNoce.NoceTimeComponent
// 0x0018 (0x00B8 - 0x00A0)
class UNoceTimeComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              NiagaraComponents;                                 // 0x00A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddNiagaraComponent(class UFXSystemComponent* InFXSystemComponent);
	void ApplyHitStopTimeDilation(float InTimeDilation, float InDuration);
	bool IsDuringHitStopTimer();
	void OnHitStopTimerUp();
	void OnPlayerEnterEvent();
	void RemoveNiagaraComponent(class UFXSystemComponent* InFXSystemComponent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTimeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTimeComponent")
	}
	static class UNoceTimeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTimeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceTimeComponent;

// Class GameNoce.NoceTitleGameMode
// 0x0008 (0x0370 - 0x0368)
class ANoceTitleGameMode final : public AGameNoceGameModeBase
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadGame(class FName MapNameToLoad);
	void OnNewGame(class FName MapNameToLoad);
	void UpdateTitleScene(ENoceEndingType EndingType, int32 CorruptLevel);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTitleGameMode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTitleGameMode")
	}
	static class ANoceTitleGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceTitleGameMode>();
	}
};
DUMPER7_ASSERTS_ANoceTitleGameMode;

// Class GameNoce.NoceTitleTextWidget
// 0x0018 (0x02F8 - 0x02E0)
class UNoceTitleTextWidget : public UUserWidget
{
public:
	class FText                                   OverrideText;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTitleTextWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTitleTextWidget")
	}
	static class UNoceTitleTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTitleTextWidget>();
	}
};
DUMPER7_ASSERTS_UNoceTitleTextWidget;

// Class GameNoce.NoceTsukumoDefenseComponent
// 0x0020 (0x00C0 - 0x00A0)
class UNoceTsukumoDefenseComponent final : public UActorComponent
{
public:
	bool                                          StartEnable;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefenseTime;                                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefenseTimer;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefenseCooldownTime;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefenseCooldownTimer;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefenseResumeMinTime;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETsukumoDefenseState                          DefenseState;                                      // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTsukumoDefenseComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTsukumoDefenseComponent")
	}
	static class UNoceTsukumoDefenseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTsukumoDefenseComponent>();
	}
};
DUMPER7_ASSERTS_UNoceTsukumoDefenseComponent;

// Class GameNoce.NoceTutorialPopWindowWidget
// 0x0018 (0x03C8 - 0x03B0)
class UNoceTutorialPopWindowWidget final : public UNoceFocusableWidget
{
public:
	class UTextBlock*                             Title;                                             // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FNoceUITutorialPopWindowPageData> Data;                                            // 0x03B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ShowTutorial(const class FText& InTitle, const TArray<struct FNoceUITutorialPopWindowPageData>& InData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceTutorialPopWindowWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceTutorialPopWindowWidget")
	}
	static class UNoceTutorialPopWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceTutorialPopWindowWidget>();
	}
};
DUMPER7_ASSERTS_UNoceTutorialPopWindowWidget;

// Class GameNoce.NoceUIActionImage
// 0x0000 (0x02E0 - 0x02E0)
class UNoceUIActionImage final : public UImage
{
public:
	struct FNoceInputActionRowHandle              InputActionRowHandle;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetInputAction(class FName ActionName);
	void UpdateIcon();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIActionImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIActionImage")
	}
	static class UNoceUIActionImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIActionImage>();
	}
};
DUMPER7_ASSERTS_UNoceUIActionImage;

// Class GameNoce.NoceUIContainerInterface
// 0x0000 (0x0000 - 0x0000)
class INoceUIContainerInterface final
{
public:
	void OnChildMouseDown(class UUserWidget* ChildWidget, const struct FPointerEvent& MouseEvent, struct FEventReply* Reply);
	void OnChildMouseEnter(class UUserWidget* ChildWidget, struct FEventReply* Reply);
	void OnChildMouseLeave(class UUserWidget* ChildWidget, struct FEventReply* Reply);
	void OnChildMouseUp(class UUserWidget* ChildWidget, const struct FPointerEvent& MouseEvent, struct FEventReply* Reply);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIContainerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIContainerInterface")
	}
	static class INoceUIContainerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceUIContainerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceUIContainerInterface;

// Class GameNoce.NoceUIControllerWidgetData
// 0x0010 (0x0040 - 0x0030)
class UNoceUIControllerWidgetData final : public UDataAsset
{
public:
	TArray<struct FNoceUIControllerWidgetTypeData> Data;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIControllerWidgetData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIControllerWidgetData")
	}
	static class UNoceUIControllerWidgetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIControllerWidgetData>();
	}
};
DUMPER7_ASSERTS_UNoceUIControllerWidgetData;

// Class GameNoce.NoceUIAttributeWidgetData
// 0x0020 (0x0050 - 0x0030)
class UNoceUIAttributeWidgetData final : public UDataAsset
{
public:
	float                                         MinHealth;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStamina;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStamina;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSanity;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallFlowerValue;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BigFlowerValue;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetHealthPercent(float InValue);
	void GetSanityFlowerNum(float InValue, int32* SmallFlowerNum);
	float GetStaminaPercent(float InValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIAttributeWidgetData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIAttributeWidgetData")
	}
	static class UNoceUIAttributeWidgetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIAttributeWidgetData>();
	}
};
DUMPER7_ASSERTS_UNoceUIAttributeWidgetData;

// Class GameNoce.NoceUIDurabilityWidgetData
// 0x0020 (0x0050 - 0x0030)
class UNoceUIDurabilityWidgetData final : public UDataAsset
{
public:
	TArray<struct FNoceUIDurabilityImageData>     ImageData;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNoceUIDurabilityTextData>      TextData;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	struct FNoceUIDurabilityImageData GetImageData(int32 InMaxDurabilityNum);
	class FText GetTextData(float InDurabilityRatio);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIDurabilityWidgetData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIDurabilityWidgetData")
	}
	static class UNoceUIDurabilityWidgetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIDurabilityWidgetData>();
	}
};
DUMPER7_ASSERTS_UNoceUIDurabilityWidgetData;

// Class GameNoce.NoceUIChooseSkinWidgetData
// 0x0010 (0x0040 - 0x0030)
class UNoceUIChooseSkinWidgetData final : public UDataAsset
{
public:
	TArray<struct FNoceUIChooseSkinData>          DataList;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	struct FNoceUIChooseSkinData GetData(ENocePlayerOutfit Type);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIChooseSkinWidgetData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIChooseSkinWidgetData")
	}
	static class UNoceUIChooseSkinWidgetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIChooseSkinWidgetData>();
	}
};
DUMPER7_ASSERTS_UNoceUIChooseSkinWidgetData;

// Class GameNoce.NoceUIFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNoceUIFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TSoftObjectPtr<class UTexture2D> Conv_SoftObjPathToSoftTextureRef(const struct FSoftObjectPath& SoftObjectPath);
	static struct FNoceChapterInfoTableRow GetChapterInfoTableRow(const struct FGameplayTag& ProgressTag);
	static class FText GetChapterInfoText(const struct FGameplayTag& ProgressTag);
	static class FText GetChapterTextByType(ENoceChapterType ChapterType);
	static struct FSoftObjectPath GetGamepadInputImageResource(const struct FNoceUIInputImageTableRow& InData);
	static TArray<struct FNoceUIGuideData> GetGuideDataFromHandle(const struct FDataTableRowHandle& InData, bool IsRight);
	static struct FSoftObjectPath GetInputImageResource(const class FName& InIconName);
	static struct FNoceLocationInfoTableRow GetLocationInfo(class FName InName);
	static struct FNoceMissionHintTableRow GetMissionHint(const struct FGameplayTag& ProgressTag, const struct FGameplayTagContainer& AdditionalProgressTag);
	static TArray<struct FNoceMissionHintTableRow> GetMissionHintsByChapterName(const class FString& InChapterName);
	static void GetNeedTopDown(const TArray<bool>& IsVisibles, const TArray<bool>& IsNews, int32 StartIndex, int32 EndIndex, int32 CurrentIndex, bool* NeedTop, bool* NeedBottom);
	static void GetNeedTopDownWithTextCheck(const TArray<bool>& IsVisibles, const TArray<bool>& IsNews, int32 StartIndex, int32 EndIndex, int32 CurrentIndex, const TArray<class FText>& Texts, bool* NeedTop, bool* NeedBottom);
	static void GetPriorityIndex(TArray<int32>& InIDIndexes, const int32& InIDIndex, TArray<int32>& InPriorities, const int32& InPriority, int32* OutArrayIndex);
	static bool IsNewNotebookContent(const TArray<bool>& IsVisibles, const TArray<bool>& IsNews, int32 Index_0);
	static bool IsVisibleInHierarchy(class UWidget* InWidget);
	static void SetImage(class UImage* InImage, const struct FSoftObjectPath& InResourceObjectPath);
	static void SetInputImage(class UImage* InImage, const class FName& InIconName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIFunctionLibrary")
	}
	static class UNoceUIFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UNoceUIFunctionLibrary;

// Class GameNoce.NoceUIIconImageBase
// 0x0000 (0x02E0 - 0x02E0)
#pragma pack(push, 0x1)
class alignas(0x10) UNoceUIIconImageBase : public UImage
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIIconImageBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIIconImageBase")
	}
	static class UNoceUIIconImageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIIconImageBase>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UNoceUIIconImageBase;

// Class GameNoce.NoceUIGameplayTagMappingImage
// 0x00D0 (0x03B0 - 0x02E0)
class UNoceUIGameplayTagMappingImage final : public UNoceUIIconImageBase
{
public:
	struct FNoceUIKeyMappingImageStruct           DefaultImage;                                      // 0x02D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FNoceUIKeyMappingImageStruct> Images;                           // 0x0300(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultColor;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FLinearColor> Colors;                                           // 0x0360(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetColorByKey(const struct FGameplayTag& Key);
	void SetImageByKey(const struct FGameplayTag& Key);
	bool SetImageIfHasKey(const struct FGameplayTagContainer& TagContainer);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIGameplayTagMappingImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIGameplayTagMappingImage")
	}
	static class UNoceUIGameplayTagMappingImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIGameplayTagMappingImage>();
	}
};
DUMPER7_ASSERTS_UNoceUIGameplayTagMappingImage;

// Class GameNoce.NoceUIGlobalSubsystem
// 0x0050 (0x0080 - 0x0030)
class UNoceUIGlobalSubsystem final : public UGameInstanceSubsystem
{
public:
	TMap<struct FSoftObjectPath, struct FSlateBrush> Icons;                                          // 0x0030(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIGlobalSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIGlobalSubsystem")
	}
	static class UNoceUIGlobalSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIGlobalSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceUIGlobalSubsystem;

// Class GameNoce.NoceUIImage
// 0x0020 (0x0300 - 0x02E0)
class UNoceUIImage final : public UImage
{
public:
	struct FSoftObjectPath                        ImageTexture;                                      // 0x02D8(0x0020)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetImageTexture(const struct FSoftObjectPath& InImageTexture);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIImage")
	}
	static class UNoceUIImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIImage>();
	}
};
DUMPER7_ASSERTS_UNoceUIImage;

// Class GameNoce.NoceUIInputDirectionHelper
// 0x00E0 (0x0108 - 0x0028)
class UNoceUIInputDirectionHelper final : public UObject
{
public:
	struct FKey                                   RightAxisKey;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   UpAxisKey;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   UpKey;                                             // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DownKey;                                           // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   RightKey;                                          // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LeftKey;                                           // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FKey, float>                      KeyToValueMap;                                     // 0x00B8(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool IsLeftRight(const struct FKey& Key);
	bool IsUpDown(const struct FKey& Key);
	void SetAnalogValue(const struct FKey& Key, float Value);
	void SetupKeys();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIInputDirectionHelper")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIInputDirectionHelper")
	}
	static class UNoceUIInputDirectionHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIInputDirectionHelper>();
	}
};
DUMPER7_ASSERTS_UNoceUIInputDirectionHelper;

// Class GameNoce.NoceUIInputInterface
// 0x0000 (0x0000 - 0x0000)
class INoceUIInputInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIInputInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIInputInterface")
	}
	static class INoceUIInputInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceUIInputInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceUIInputInterface;

// Class GameNoce.NoceUIKBActionImage
// 0x0000 (0x02E0 - 0x02E0)
class UNoceUIKBActionImage final : public UImage
{
public:
	struct FNoceInputActionRowHandle              InputActionRowHandle;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetInputAction(class FName ActionName);
	void UpdateIcon();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIKBActionImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIKBActionImage")
	}
	static class UNoceUIKBActionImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIKBActionImage>();
	}
};
DUMPER7_ASSERTS_UNoceUIKBActionImage;

// Class GameNoce.NoceUIKeyMappingImage
// 0x00E0 (0x03C0 - 0x02E0)
class UNoceUIKeyMappingImage final : public UNoceUIIconImageBase
{
public:
	struct FNoceUIKeyMappingImageStruct           DefaultImage;                                      // 0x02D8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FNoceUIKeyMappingImageStruct> Images;                                         // 0x0300(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultColor;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FLinearColor>              Colors;                                            // 0x0360(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ImageKey;                                          // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B4[0xC];                                      // 0x03B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDefaultImage();
	void SetImageKey(int32 Key);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIKeyMappingImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIKeyMappingImage")
	}
	static class UNoceUIKeyMappingImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIKeyMappingImage>();
	}
};
DUMPER7_ASSERTS_UNoceUIKeyMappingImage;

// Class GameNoce.NoceUILockOnTarget
// 0x0008 (0x0308 - 0x0300)
class UNoceUILockOnTarget : public UNoceUserWidgetBase
{
public:
	float                                         FadeOutTime;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_FadeIn();
	void BP_FadeOut();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUILockOnTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUILockOnTarget")
	}
	static class UNoceUILockOnTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUILockOnTarget>();
	}
};
DUMPER7_ASSERTS_UNoceUILockOnTarget;

// Class GameNoce.NoceUIMissionSubsystem
// 0x0008 (0x0040 - 0x0038)
class UNoceUIMissionSubsystem : public UNoceWorldSubsystem
{
public:
	class UNoceQuestWidget*                       Widget;                                            // 0x0038(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnGameProgressChanged(const struct FGameplayTag& ProgressTag);
	void OnMissionStart(const class FText& InMissionHint);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIMissionSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIMissionSubsystem")
	}
	static class UNoceUIMissionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIMissionSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceUIMissionSubsystem;

// Class GameNoce.NoceUIRestrictionOverlay
// 0x0018 (0x01B8 - 0x01A0)
class UNoceUIRestrictionOverlay final : public UOverlay
{
public:
	TMulticastInlineDelegate<void(ESlateVisibility InVisibility)> OnVisibilityChanged;               // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ENoceUIRestrictionType                        HiddenRestriction;                                 // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindEvents();
	void OnRestrictionChanged(ENoceUIRestrictionType InType, bool IsAdd);
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUIRestrictionOverlay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUIRestrictionOverlay")
	}
	static class UNoceUIRestrictionOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUIRestrictionOverlay>();
	}
};
DUMPER7_ASSERTS_UNoceUIRestrictionOverlay;

// Class GameNoce.NoceUISubsystem
// 0x0168 (0x0198 - 0x0030)
class UNoceUISubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 InSize)>  OnUISubsystemWidgetStackSizeChanged;               // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENoceUIRestrictionType InType, bool InIsAdded)> OnUISubsystemRestrictionChanged; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          IsOpeningShortcutWheelByKeyboard;                  // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpeningShortcutWheelByGamepad;                   // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENoceUIRestrictionType>                CurrentRestrictions;                               // 0x0088(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             WidgetPathDataTable;                               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UUserWidget*>                    WidgetStack;                                       // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<struct FSoftClassPath, class UUserWidget*> Widgets;                                         // 0x00B0(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<struct FSoftObjectPath, class UObject*>  Icons;                                             // 0x0100(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FSoftClassPath>                 RequestingLoadClasses;                             // 0x0150(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UClass*>                         LoadedClasses;                                     // 0x0160(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x10];                                     // 0x0170(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsLoadingWidget;                                   // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0xF];                                      // 0x0181(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShortcutMode;                                      // 0x0190(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddRestriction(ENoceUIRestrictionType InType);
	void AddWidget(class UUserWidget* InWidget);
	void Clear();
	void ClearWidgetStack();
	class UUserWidget* GetTopWidget();
	class UUserWidget* GetWidget(class APlayerController* PlayerController, const struct FSoftClassPath& Path);
	class UUserWidget* GetWidgetByName(class APlayerController* PlayerController, class FName WidgetName);
	struct FSoftClassPath GetWidgetPathByName(class FName WidgetName);
	TArray<class UUserWidget*> GetWidgetStack();
	bool HasRestriction(ENoceUIRestrictionType InType);
	void IsWidgetInStack(const struct FSoftClassPath& Path, bool* IsInStack, class UUserWidget** Widget);
	void NotifyInputDeviceChange();
	void RemoveCreatedUIWidget(const struct FSoftClassPath& Path);
	void RemoveRestriction(ENoceUIRestrictionType InType);
	void RemoveWidget(class UUserWidget* InWidget);
	void RequestLoad(const TArray<struct FSoftClassPath>& WidgetPaths);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUISubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUISubsystem")
	}
	static class UNoceUISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUISubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceUISubsystem;

// Class GameNoce.NoceUpgradePopResultWidget
// 0x0000 (0x03B0 - 0x03B0)
class UNoceUpgradePopResultWidget final : public UNoceFocusableWidget
{
public:
	void ShowResult(ENoceUpgradeType InType, class FName InEmaName, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceUpgradePopResultWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceUpgradePopResultWidget")
	}
	static class UNoceUpgradePopResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceUpgradePopResultWidget>();
	}
};
DUMPER7_ASSERTS_UNoceUpgradePopResultWidget;

// Class GameNoce.NoceVerticalGrid
// 0x0008 (0x00B0 - 0x00A8)
class UNoceVerticalGrid final : public UNoceSimpleGrid
{
public:
	int32                                         NumItemsPerLine;                                   // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNumItemsPerLine(int32 InNumber);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceVerticalGrid")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceVerticalGrid")
	}
	static class UNoceVerticalGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceVerticalGrid>();
	}
};
DUMPER7_ASSERTS_UNoceVerticalGrid;

// Class GameNoce.NoceVolumetricFogVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceVolumetricFogVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceVolumetricFogDataRowHandle        SanityMaxRow;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceVolumetricFogProgress>     FogDataByProgress;                                 // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceVolumetricFogVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceVolumetricFogVolumeComponent")
	}
	static class UNoceVolumetricFogVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceVolumetricFogVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceVolumetricFogVolumeComponent;

// Class GameNoce.NoceWalkToComponentInterface
// 0x0000 (0x0000 - 0x0000)
class INoceWalkToComponentInterface final
{
public:
	bool GetIsRunTo();
	bool GetIsWalkTo();
	bool GetIsWalkToWithCameraRotation();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWalkToComponentInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWalkToComponentInterface")
	}
	static class INoceWalkToComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INoceWalkToComponentInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INoceWalkToComponentInterface;

// Class GameNoce.NoceWaveSpawnManager
// 0x0080 (0x0310 - 0x0290)
class ANoceWaveSpawnManager final : public AActor
{
public:
	struct FGameplayTag                           StartTag;                                          // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OnFinishTag;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaveSpawnSetting>              WaveSpawnSettings;                                 // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x50];                                     // 0x02B0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANoceEnemyCharacter*>            SpawnedChars;                                      // 0x0300(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnGameProgressChanged(const struct FGameplayTag& NewTag);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWaveSpawnManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWaveSpawnManager")
	}
	static class ANoceWaveSpawnManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceWaveSpawnManager>();
	}
};
DUMPER7_ASSERTS_ANoceWaveSpawnManager;

// Class GameNoce.NoceWeaponInfoDataAsset
// 0x00B0 (0x00E0 - 0x0030)
class UNoceWeaponInfoDataAsset final : public UDataAsset
{
public:
	TArray<struct FNoceWeaponInfoSetting>         NoceWeaponInfoSettings;                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FNoceWeaponInfoOverride> OverrideComboInfoMap;                          // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      OverrideStaminaKeyCostMap;                         // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWeaponInfoDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWeaponInfoDataAsset")
	}
	static class UNoceWeaponInfoDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWeaponInfoDataAsset>();
	}
};
DUMPER7_ASSERTS_UNoceWeaponInfoDataAsset;

// Class GameNoce.NoceWeaponSubsystem
// 0x0058 (0x0088 - 0x0030)
class UNoceWeaponSubsystem : public UGameInstanceSubsystem
{
public:
	class FName                                   UFOWeaponName;                                     // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UNoceWeaponInfoDataAsset*> WeaponInfoDataAssetMap;                       // 0x0038(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void GetAttackInfo(class FName InWeaponName, float InDurabilityRatio, float* OutAttackMultiplier, float* OutExtraAttackMultiplier, float* OutWinceMultiplier);
	bool GetCanBeBroken(class FName InWeaponName);
	bool GetCanBeBrokenInShiromukuRevive2(class FName InWeaponName);
	bool GetCanCostDurability(class FName InWeaponName);
	bool GetCanDiscard(class FName InWeaponName);
	bool GetCanFocusAttack(class FName InWeaponName);
	float GetDeflectRate(class FName InWeaponName, float InDurabilityRatio);
	void GetDurabilityUICount(class FName InWeaponName, float InDurability, int32* OutUIMaxCount, int32* OutUICount);
	float GetMaxDurability(class FName InWeaponName);
	void GetOverrideComboInfo(class FName InWeaponName, class FName InComboName, bool* OutFound, struct FNoceWeaponInfoOverride* OutComboInfo);
	void GetOverrideStaminaKeyCost(class FName InWeaponName, class FName InStaminaKey, bool* OutFound, float* OutStaminaCost);
	void GetUIInfo(class FName InWeaponName, float InDurabilityRatio, bool* OutShowOnUI);
	bool GetUseFocusAttackWhenFullCharged(class FName InWeaponName);
	class UNoceWeaponInfoDataAsset* GetWeaponInfoDataAssetByName(class FName InWeaponName);
	class FName GetWeaponQueryName(class FName InWeaponName);
	class ANoceWeapon* SpawnWeaponHandMesh(const class UObject* WorldContextObject, class FName InWeaponName, const struct FTransform& InTransform);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWeaponSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWeaponSubsystem")
	}
	static class UNoceWeaponSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWeaponSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceWeaponSubsystem;

// Class GameNoce.NoceWepDurabilityWidget
// 0x0068 (0x0368 - 0x0300)
class UNoceWepDurabilityWidget : public UNoceUserWidgetBase
{
public:
	class UWidgetAnimation*                       Percent;                                           // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Default;                                           // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Danger;                                            // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityRatio;                                   // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDanger;                                          // 0x031C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetAnimation*>               DurabilityAnimations;                              // 0x0320(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UOverlay*                               Group;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Shadow;                                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BG;                                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DurabilityBar;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 ShadowTop;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BlackTop;                                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoceUIDurabilityWidgetData*            Data;                                              // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDurability(class FName WeaponName, float Durability);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWepDurabilityWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWepDurabilityWidget")
	}
	static class UNoceWepDurabilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWepDurabilityWidget>();
	}
};
DUMPER7_ASSERTS_UNoceWepDurabilityWidget;

// Class GameNoce.NoceWinceDamageReduceComponent
// 0x0008 (0x00A8 - 0x00A0)
class UNoceWinceDamageReduceComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndWinceDamageReduce();
	float HandleWinceDamage(bool InIsForceWince, float InWinceDamage);
	bool IsWinceDamageReduce();
	void StartWinceDamageReduce();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWinceDamageReduceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWinceDamageReduceComponent")
	}
	static class UNoceWinceDamageReduceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWinceDamageReduceComponent>();
	}
};
DUMPER7_ASSERTS_UNoceWinceDamageReduceComponent;

// Class GameNoce.NoceWinceTypePriority
// 0x0050 (0x0080 - 0x0030)
class UNoceWinceTypePriority final : public UDataAsset
{
public:
	TMap<ENoceWinceType, struct FNoceWinceTypePrioritySetting> WinceTypePriorityMap;                 // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWinceTypePriority")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWinceTypePriority")
	}
	static class UNoceWinceTypePriority* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWinceTypePriority>();
	}
};
DUMPER7_ASSERTS_UNoceWinceTypePriority;

// Class GameNoce.NoceWindVolumeComponent
// 0x0018 (0x00F0 - 0x00D8)
class UNoceWindVolumeComponent final : public UNoceVolumeComponentBase
{
public:
	struct FNoceWindDataRowHandle                 WindDataRow;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNoceWindProgress>              LightDataByProgress;                               // 0x00E0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWindVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWindVolumeComponent")
	}
	static class UNoceWindVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWindVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UNoceWindVolumeComponent;

// Class GameNoce.NoceWorldManagerSubsystem
// 0x0210 (0x0250 - 0x0040)
class UNoceWorldManagerSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNoceWorldTriggerRequest*>       WorldTriggerRequests;                              // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           RequestsBySetting;                                 // 0x0060(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0xA0];                                      // 0x0070(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENoceLevelRegion, struct FNoceLevelRegionDataLayer> RegionDataLayerData;                    // 0x0110(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0xF0];                                     // 0x0160(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAllRequestBySetting();
	void NoceDataLayerTrackUpdateCallback(const class UDataLayerInstance* InDataLayerInstance);
	void PauseWorldTriggerUpdate(bool InPause);
	void RegisterLevelAlarm(class FName InName);
	void RequestFromWorldTrigger(class AActor* InTrigger, const class FString& InDisplayName, class UDataLayerAsset* InDataLayer, EDataLayerRuntimeState TargetState, bool DoRequest);
	void RequestGateway(class FName InRowName, bool DoRequest);
	void RequestGatewayWithProgress(class FName InRowName, bool DoRequest, const struct FGameplayTag& ProgressTag);
	void UnregisterLevelAlarm(class FName InName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWorldManagerSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWorldManagerSubsystem")
	}
	static class UNoceWorldManagerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceWorldManagerSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceWorldManagerSubsystem;

// Class GameNoce.NoceWorldSettings
// 0x0010 (0x04C0 - 0x04B0)
class ANoceWorldSettings final : public AWorldSettings
{
public:
	class UDataAsset*                             DefaultGameProgressData;                           // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoceNewGameDataAsset*                  DefaultNewGameData;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceWorldSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceWorldSettings")
	}
	static class ANoceWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANoceWorldSettings>();
	}
};
DUMPER7_ASSERTS_ANoceWorldSettings;

// Class GameNoce.OptionPresetListObject
// 0x0020 (0x0048 - 0x0028)
class UOptionPresetListObject final : public UObject
{
public:
	class FText                                   NameText;                                          // 0x0028(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0038(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("OptionPresetListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"OptionPresetListObject")
	}
	static class UOptionPresetListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionPresetListObject>();
	}
};
DUMPER7_ASSERTS_UOptionPresetListObject;

// Class GameNoce.PerformanceOptimizerInterface
// 0x0000 (0x0000 - 0x0000)
class IPerformanceOptimizerInterface final
{
public:
	void EnablePerformanceSaving(bool Enable);
	void EnablePerformanceSaving_BP(bool Enable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PerformanceOptimizerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PerformanceOptimizerInterface")
	}
	static class IPerformanceOptimizerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPerformanceOptimizerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IPerformanceOptimizerInterface;

// Class GameNoce.PlayerDamageExecutionCalculation
// 0x0000 (0x0040 - 0x0040)
class UPlayerDamageExecutionCalculation : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerDamageExecutionCalculation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerDamageExecutionCalculation")
	}
	static class UPlayerDamageExecutionCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerDamageExecutionCalculation>();
	}
};
DUMPER7_ASSERTS_UPlayerDamageExecutionCalculation;

// Class GameNoce.PlayerFlameDamageExecCalculation
// 0x0000 (0x0040 - 0x0040)
class UPlayerFlameDamageExecCalculation final : public UPlayerDamageExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerFlameDamageExecCalculation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerFlameDamageExecCalculation")
	}
	static class UPlayerFlameDamageExecCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerFlameDamageExecCalculation>();
	}
};
DUMPER7_ASSERTS_UPlayerFlameDamageExecCalculation;

// Class GameNoce.PlayerLimitedDamageExecCalc
// 0x0000 (0x0040 - 0x0040)
class UPlayerLimitedDamageExecCalc final : public UPlayerDamageExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerLimitedDamageExecCalc")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerLimitedDamageExecCalc")
	}
	static class UPlayerLimitedDamageExecCalc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerLimitedDamageExecCalc>();
	}
};
DUMPER7_ASSERTS_UPlayerLimitedDamageExecCalc;

// Class GameNoce.PlayerSanityExeCalculation
// 0x0000 (0x0040 - 0x0040)
class UPlayerSanityExeCalculation final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerSanityExeCalculation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerSanityExeCalculation")
	}
	static class UPlayerSanityExeCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerSanityExeCalculation>();
	}
};
DUMPER7_ASSERTS_UPlayerSanityExeCalculation;

// Class GameNoce.PlayerStaminaExeCalculation
// 0x0000 (0x0040 - 0x0040)
class UPlayerStaminaExeCalculation final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerStaminaExeCalculation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerStaminaExeCalculation")
	}
	static class UPlayerStaminaExeCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerStaminaExeCalculation>();
	}
};
DUMPER7_ASSERTS_UPlayerStaminaExeCalculation;

// Class GameNoce.RepairWeaponListObject
// 0x0018 (0x0040 - 0x0028)
class URepairWeaponListObject final : public UObject
{
public:
	class FName                                   ID;                                                // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Durability;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFull;                                            // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBroken;                                          // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponIndex;                                       // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RepairWeaponListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RepairWeaponListObject")
	}
	static class URepairWeaponListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URepairWeaponListObject>();
	}
};
DUMPER7_ASSERTS_URepairWeaponListObject;

// Class GameNoce.SellItemListObject
// 0x0080 (0x00A8 - 0x0028)
class USellItemListObject final : public UObject
{
public:
	bool                                          IsBlank;                                           // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x002C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0038(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0048(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HiddenDescription;                                 // 0x0058(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImagePath;                                         // 0x0068(0x0020)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxQuantity;                                       // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaithValue;                                        // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNoceOfferingEffectData>        OfferingEffects;                                   // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SellItemListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SellItemListObject")
	}
	static class USellItemListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USellItemListObject>();
	}
};
DUMPER7_ASSERTS_USellItemListObject;

// Class GameNoce.NoceColorCorrectionSubsystem
// 0x0008 (0x0038 - 0x0030)
class UNoceColorCorrectionSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetBrightness();
	float GetContrast();
	void SetBrightness(float InVal);
	void SetContrast(float InVal);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceColorCorrectionSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceColorCorrectionSubsystem")
	}
	static class UNoceColorCorrectionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceColorCorrectionSubsystem>();
	}
};
DUMPER7_ASSERTS_UNoceColorCorrectionSubsystem;

// Class GameNoce.UpgradeListObject
// 0x0088 (0x00B0 - 0x0028)
class UUpgradeListObject final : public UObject
{
public:
	struct FNoceSavePointUpgradeListItemData      ListItemData;                                      // 0x0028(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x009C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEma;                                           // 0x00A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnough;                                          // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UpgradeListObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UpgradeListObject")
	}
	static class UUpgradeListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUpgradeListObject>();
	}
};
DUMPER7_ASSERTS_UUpgradeListObject;

// Class GameNoce.NoceMovieScenePrimMatSection
// 0x0058 (0x0280 - 0x0228)
class UNoceMovieScenePrimMatSection final : public UMovieScenePrimitiveMaterialSection
{
public:
	bool                                          UseOutfitMaterial;                                 // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENocePlayerOutfit, TSoftObjectPtr<class UMaterialInterface>> OutfitMaterial;                // 0x0230(0x0050)(Edit, BlueprintVisible, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NoceMovieScenePrimMatSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NoceMovieScenePrimMatSection")
	}
	static class UNoceMovieScenePrimMatSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoceMovieScenePrimMatSection>();
	}
};
DUMPER7_ASSERTS_UNoceMovieScenePrimMatSection;

}

