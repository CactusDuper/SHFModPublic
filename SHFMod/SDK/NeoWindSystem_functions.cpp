#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeoWindSystem

#include "Basic.hpp"

#include "NeoWindSystem_classes.hpp"
#include "NeoWindSystem_parameters.hpp"


namespace SDK
{

// Function NeoWindSystem.NeoWindComponent.AddWindSppedCurveData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      InCurveFloatData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnique                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoWindComponent::AddWindSppedCurveData(class UCurveFloat* InCurveFloatData, bool bUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindComponent", "AddWindSppedCurveData");

	Params::NeoWindComponent_AddWindSppedCurveData Parms{};

	Parms.InCurveFloatData = InCurveFloatData;
	Parms.bUnique = bUnique;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindComponent.ClearWindSpeedCurves
// (Final, Native, Public, BlueprintCallable)

void UNeoWindComponent::ClearWindSpeedCurves()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindComponent", "ClearWindSpeedCurves");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindComponent.SetVirtualPositionDivide
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoWindComponent::SetVirtualPositionDivide(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindComponent", "SetVirtualPositionDivide");

	Params::NeoWindComponent_SetVirtualPositionDivide Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindComponent.SetWindDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  InWindDir                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InWindDirChange_Min                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InWindDirChange_Max                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InWindDirSwitchTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoWindComponent::SetWindDirection(const struct FRotator& InWindDir, float InWindDirChange_Min, float InWindDirChange_Max, float InWindDirSwitchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindComponent", "SetWindDirection");

	Params::NeoWindComponent_SetWindDirection Parms{};

	Parms.InWindDir = std::move(InWindDir);
	Parms.InWindDirChange_Min = InWindDirChange_Min;
	Parms.InWindDirChange_Max = InWindDirChange_Max;
	Parms.InWindDirSwitchTime = InWindDirSwitchTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindComponent.SetWindSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSwitchTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoWindComponent::SetWindSpeed(float InValue, float InSwitchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindComponent", "SetWindSpeed");

	Params::NeoWindComponent_SetWindSpeed Parms{};

	Parms.InValue = InValue;
	Parms.InSwitchTime = InSwitchTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindPhysicsComponent.FindOverlapWindZoneVolume
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ANeoWindZoneVolume*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ANeoWindZoneVolume* UNeoWindPhysicsComponent::FindOverlapWindZoneVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindPhysicsComponent", "FindOverlapWindZoneVolume");

	Params::NeoWindPhysicsComponent_FindOverlapWindZoneVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoWindSystem.NeoWindZoneVolume.AddWindActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InWindActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUnique                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANeoWindZoneVolume::AddWindActor(class AActor* InWindActor, bool IsUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindZoneVolume", "AddWindActor");

	Params::NeoWindZoneVolume_AddWindActor Parms{};

	Parms.InWindActor = InWindActor;
	Parms.IsUnique = IsUnique;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindZoneVolume.OnOverlapBegin
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANeoWindZoneVolume::OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindZoneVolume", "OnOverlapBegin");

	Params::NeoWindZoneVolume_OnOverlapBegin Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoWindSystem.NeoWindZoneVolume.OnOverlapEnd
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANeoWindZoneVolume::OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoWindZoneVolume", "OnOverlapEnd");

	Params::NeoWindZoneVolume_OnOverlapEnd Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

