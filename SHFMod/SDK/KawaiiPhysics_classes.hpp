#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "KawaiiPhysics_structs.hpp"


namespace SDK
{

// Class KawaiiPhysics.KawaiiPhysicsLibrary
// 0x0000 (0x0028 - 0x0028)
class UKawaiiPhysicsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FKawaiiPhysicsReference ConvertToKawaiiPhysics(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToKawaiiPhysicsPure(const struct FAnimNodeReference& Node, struct FKawaiiPhysicsReference* KawaiiPhysics, bool* Result);
	static bool GetAllowWorldCollision(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static float GetDummyBoneLength(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static bool GetEnableWind(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static struct FVector GetGravity(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static bool GetNeedWarmUp(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static struct FKawaiiPhysicsSettings GetPhysicsSettings(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static float GetTeleportDistanceThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static float GetTeleportRotationThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static float GetWindScale(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static struct FKawaiiPhysicsReference ResetDynamics(const struct FKawaiiPhysicsReference& KawaiiPhysics);
	static struct FKawaiiPhysicsReference SetAllowWorldCollision(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool AllowWorldCollision);
	static struct FKawaiiPhysicsReference SetDummyBoneLength(const struct FKawaiiPhysicsReference& KawaiiPhysics, float DummyBoneLength);
	static struct FKawaiiPhysicsReference SetEnableWind(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool EnableWind);
	static struct FKawaiiPhysicsReference SetGravity(const struct FKawaiiPhysicsReference& KawaiiPhysics, const struct FVector& Gravity);
	static struct FKawaiiPhysicsReference SetNeedWarmUp(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool NeedWarmUp);
	static struct FKawaiiPhysicsReference SetPhysicsSettings(const struct FKawaiiPhysicsReference& KawaiiPhysics, struct FKawaiiPhysicsSettings& PhysicsSettings);
	static struct FKawaiiPhysicsReference SetTeleportDistanceThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics, float TeleportDistanceThreshold);
	static struct FKawaiiPhysicsReference SetTeleportRotationThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics, float TeleportRotationThreshold);
	static struct FKawaiiPhysicsReference SetWarmUpFrames(const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 WarmUpFrames);
	static struct FKawaiiPhysicsReference SetWindScale(const struct FKawaiiPhysicsReference& KawaiiPhysics, float WindScale);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KawaiiPhysicsLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KawaiiPhysicsLibrary")
	}
	static class UKawaiiPhysicsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKawaiiPhysicsLibrary>();
	}
};
DUMPER7_ASSERTS_UKawaiiPhysicsLibrary;

// Class KawaiiPhysics.KawaiiPhysicsLimitsDataAsset
// 0x0030 (0x0060 - 0x0030)
class UKawaiiPhysicsLimitsDataAsset final : public UDataAsset
{
public:
	TArray<struct FSphericalLimit>                SphericalLimits;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimits;                                     // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimits;                                      // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KawaiiPhysicsLimitsDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KawaiiPhysicsLimitsDataAsset")
	}
	static class UKawaiiPhysicsLimitsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKawaiiPhysicsLimitsDataAsset>();
	}
};
DUMPER7_ASSERTS_UKawaiiPhysicsLimitsDataAsset;

}

