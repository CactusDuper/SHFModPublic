#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceTutorialInstructor_UseConsumableItem_Equip

#include "Basic.hpp"

#include "BP_NoceTutorialInstructor_UseConsumableItem_Equip_classes.hpp"
#include "BP_NoceTutorialInstructor_UseConsumableItem_Equip_parameters.hpp"


namespace SDK
{

// Function BP_NoceTutorialInstructor_UseConsumableItem_Equip.BP_NoceTutorialInstructor_UseConsumableItem_Equip_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_UseConsumableItem_Equip_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_UseConsumableItem_Equip_C", "ReceiveEndPlay");

	Params::BP_NoceTutorialInstructor_UseConsumableItem_Equip_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceTutorialInstructor_UseConsumableItem_Equip.BP_NoceTutorialInstructor_UseConsumableItem_Equip_C.OnAddConsumableItem_AutoGenFunc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_UseConsumableItem_Equip_C::OnAddConsumableItem_AutoGenFunc(class FName ID, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_UseConsumableItem_Equip_C", "OnAddConsumableItem_AutoGenFunc");

	Params::BP_NoceTutorialInstructor_UseConsumableItem_Equip_C_OnAddConsumableItem_AutoGenFunc Parms{};

	Parms.ID = ID;
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceTutorialInstructor_UseConsumableItem_Equip.BP_NoceTutorialInstructor_UseConsumableItem_Equip_C.IsStartCondition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NoceTutorialInstructor_UseConsumableItem_Equip_C::IsStartCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_UseConsumableItem_Equip_C", "IsStartCondition");

	Params::BP_NoceTutorialInstructor_UseConsumableItem_Equip_C_IsStartCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NoceTutorialInstructor_UseConsumableItem_Equip.BP_NoceTutorialInstructor_UseConsumableItem_Equip_C.ExecuteUbergraph_BP_NoceTutorialInstructor_UseConsumableItem_Equip
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NoceTutorialInstructor_UseConsumableItem_Equip_C::ExecuteUbergraph_BP_NoceTutorialInstructor_UseConsumableItem_Equip(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceTutorialInstructor_UseConsumableItem_Equip_C", "ExecuteUbergraph_BP_NoceTutorialInstructor_UseConsumableItem_Equip");

	Params::BP_NoceTutorialInstructor_UseConsumableItem_Equip_C_ExecuteUbergraph_BP_NoceTutorialInstructor_UseConsumableItem_Equip Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

