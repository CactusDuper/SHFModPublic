#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeoWindSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class NeoWindSystem.NeoWindComponent
// 0x0160 (0x0200 - 0x00A0)
class UNeoWindComponent final : public UActorComponent
{
public:
	float                                         WindStrength;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WindSpeed;                                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ToNewWindSpeedLerpCurve;                           // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCurveFloat*>                    WindSpeedCurves;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               WindDirectionRotator;                              // 0x00C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         WindDirectionChange_Min;                           // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WindDirectionChange_Max;                           // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            WindDirectionLerpCurve;                            // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           WindMPC;                                           // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraParameterCollection*            WindNPC;                                           // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WindDirectionParameterName;                        // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WindSpeedParameterName;                            // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WindVirtualPosParameterName;                       // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WindLastVirtualPosParameterName;                   // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PhysicalWindMultiplier;                            // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ParticleWindMultiplier;                            // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaterialWindMultiplier;                            // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VirtualPositionDivide;                             // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bEnabled : 1;                                      // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_129[0xAF];                                     // 0x0129(0x00AF)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurrWindSpeedCurve;                                // 0x01D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x8];                                      // 0x01E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWindDirectionalSourceComponent*        WindDirectionalSource;                             // 0x01E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialParameterCollectionInstance*   WindMPCInst;                                       // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNiagaraParameterCollectionInstance*    WindNPCInst;                                       // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddWindSppedCurveData(class UCurveFloat* InCurveFloatData, bool bUnique);
	void ClearWindSpeedCurves();
	void SetVirtualPositionDivide(float InValue);
	void SetWindDirection(const struct FRotator& InWindDir, float InWindDirChange_Min, float InWindDirChange_Max, float InWindDirSwitchTime);
	void SetWindSpeed(float InValue, float InSwitchTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NeoWindComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NeoWindComponent")
	}
	static class UNeoWindComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeoWindComponent>();
	}
};
DUMPER7_ASSERTS_UNeoWindComponent;

// Class NeoWindSystem.NeoWindPhysicsComponent
// 0x0020 (0x00C0 - 0x00A0)
class UNeoWindPhysicsComponent final : public UActorComponent
{
public:
	float                                         AngularDamping;                                    // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LinearDamping;                                     // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableUpdate;                                      // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A9[0x17];                                      // 0x00A9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ANeoWindZoneVolume* FindOverlapWindZoneVolume() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NeoWindPhysicsComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NeoWindPhysicsComponent")
	}
	static class UNeoWindPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeoWindPhysicsComponent>();
	}
};
DUMPER7_ASSERTS_UNeoWindPhysicsComponent;

// Class NeoWindSystem.NeoWindZoneVolume
// 0x0020 (0x02E8 - 0x02C8)
class ANeoWindZoneVolume final : public AVolume
{
public:
	class UNeoWindComponent*                      NeoWindComp;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bEnabled : 1;                                      // 0x02D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2D1[0x17];                                     // 0x02D1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddWindActor(class AActor* InWindActor, bool IsUnique);
	void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NeoWindZoneVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NeoWindZoneVolume")
	}
	static class ANeoWindZoneVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANeoWindZoneVolume>();
	}
};
DUMPER7_ASSERTS_ANeoWindZoneVolume;

}

