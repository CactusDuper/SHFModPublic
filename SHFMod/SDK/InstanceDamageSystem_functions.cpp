#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InstanceDamageSystem

#include "Basic.hpp"

#include "InstanceDamageSystem_classes.hpp"
#include "InstanceDamageSystem_parameters.hpp"


namespace SDK
{

// Function InstanceDamageSystem.DamageableFoliageISMC.RecieveBeginOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageableFoliageISMC::RecieveBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageableFoliageISMC", "RecieveBeginOverlap");

	Params::DamageableFoliageISMC_RecieveBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.DamageableFoliageISMC.RecieveHit
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageableFoliageISMC::RecieveHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageableFoliageISMC", "RecieveHit");

	Params::DamageableFoliageISMC_RecieveHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.DamageableFoliageISMC.RecievePointDamage
// (Native, Protected, HasDefaults)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ShotFromDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageableFoliageISMC::RecievePointDamage(int32 InstanceIndex, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageableFoliageISMC", "RecievePointDamage");

	Params::DamageableFoliageISMC_RecievePointDamage Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.HitLocation = std::move(HitLocation);
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.DamageableFoliageISMC.RecieveRadialDamage
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// const TArray<int32>&                    Instances                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<float>&                    Damages                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageableFoliageISMC::RecieveRadialDamage(const TArray<int32>& Instances, const TArray<float>& Damages, class AController* InstigatedBy, const struct FVector& Origin, float MaxRadius, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageableFoliageISMC", "RecieveRadialDamage");

	Params::DamageableFoliageISMC_RecieveRadialDamage Parms{};

	Parms.Instances = std::move(Instances);
	Parms.Damages = std::move(Damages);
	Parms.InstigatedBy = InstigatedBy;
	Parms.Origin = std::move(Origin);
	Parms.MaxRadius = MaxRadius;
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageCoreInterface.GetInstanceID
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInstanceID*                     OutInstanceID                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IInstanceDamageCoreInterface::GetInstanceID(struct FInstanceID* OutInstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageCoreInterface", "GetInstanceID");

	Params::InstanceDamageCoreInterface_GetInstanceID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInstanceID != nullptr)
		*OutInstanceID = std::move(Parms.OutInstanceID);

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageCoreInterface.GetPointDamageTraceTypes
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EObjectTypeQuery>*               OutObjectTypes                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IInstanceDamageCoreInterface::GetPointDamageTraceTypes(TArray<EObjectTypeQuery>* OutObjectTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageCoreInterface", "GetPointDamageTraceTypes");

	Params::InstanceDamageCoreInterface_GetPointDamageTraceTypes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObjectTypes != nullptr)
		*OutObjectTypes = std::move(Parms.OutObjectTypes);

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageCoreInterface.GetTargetMesh
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UStaticMesh>*      TargetMesh                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInstanceDamageCoreInterface::GetTargetMesh(TSoftObjectPtr<class UStaticMesh>* TargetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageCoreInterface", "GetTargetMesh");

	Params::InstanceDamageCoreInterface_GetTargetMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetMesh != nullptr)
		*TargetMesh = Parms.TargetMesh;
}


// Function InstanceDamageSystem.InstanceDamageCoreInterface.PoolBeginPlay
// (Native, Event, Public, BlueprintEvent)

void IInstanceDamageCoreInterface::PoolBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageCoreInterface", "PoolBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageCoreInterface.SetInstanceInfo
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInstanceID&               NewInstanceID                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UStaticMesh>&TargetMesh                                             (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInstanceDamageCoreInterface::SetInstanceInfo(const struct FInstanceID& NewInstanceID, const TSoftObjectPtr<class UStaticMesh>& TargetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageCoreInterface", "SetInstanceInfo");

	Params::InstanceDamageCoreInterface_SetInstanceInfo Parms{};

	Parms.NewInstanceID = std::move(NewInstanceID);
	Parms.TargetMesh = TargetMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageCoreInterface.SwitchToInstMeshOnEndPlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IInstanceDamageCoreInterface::SwitchToInstMeshOnEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageCoreInterface", "SwitchToInstMeshOnEndPlay");

	Params::InstanceDamageCoreInterface_SwitchToInstMeshOnEndPlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageRepHelperInterface.GetLocalInstCompReference
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TSoftObjectPtr<class UInstancedStaticMeshComponent>&ServerRef                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UInstancedStaticMeshComponent>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UInstancedStaticMeshComponent> IInstanceDamageRepHelperInterface::GetLocalInstCompReference(const TSoftObjectPtr<class UInstancedStaticMeshComponent>& ServerRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageRepHelperInterface", "GetLocalInstCompReference");

	Params::InstanceDamageRepHelperInterface_GetLocalInstCompReference Parms{};

	Parms.ServerRef = ServerRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageRepHelperInterface.GetServerInstCompReference
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UInstancedStaticMeshComponent>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UInstancedStaticMeshComponent> IInstanceDamageRepHelperInterface::GetServerInstCompReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InstanceDamageRepHelperInterface", "GetServerInstCompReference");

	Params::InstanceDamageRepHelperInterface_GetServerInstCompReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageReplication.OnRep_HiddenInstances
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TArray<struct FHiddenInstancesInfo>&PreRepHiddenInstances                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInstanceDamageReplication::OnRep_HiddenInstances(const TArray<struct FHiddenInstancesInfo>& PreRepHiddenInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageReplication", "OnRep_HiddenInstances");

	Params::InstanceDamageReplication_OnRep_HiddenInstances Parms{};

	Parms.PreRepHiddenInstances = std::move(PreRepHiddenInstances);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageReplication.OnVisibilityUpdate
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInstanceVisibilityInstigatorType       InstigatorType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Causer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageReplication::OnVisibilityUpdate(const struct FInstanceID& InstanceID, bool bIsVisible, EInstanceVisibilityInstigatorType InstigatorType, class AController* InstigatedBy, class UObject* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageReplication", "OnVisibilityUpdate");

	Params::InstanceDamageReplication_OnVisibilityUpdate Parms{};

	Parms.InstanceID = std::move(InstanceID);
	Parms.bIsVisible = bIsVisible;
	Parms.InstigatorType = InstigatorType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.Causer = Causer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.AddInstancedMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UInstancedStaticMeshComponent>InstMesh                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::AddInstancedMesh(TSoftObjectPtr<class UInstancedStaticMeshComponent> InstMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "AddInstancedMesh");

	Params::InstanceDamageSubsystem_AddInstancedMesh Parms{};

	Parms.InstMesh = InstMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.FindDestructibleByID
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UStaticMesh>       TargetMesh                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInstanceDamageSubsystem::FindDestructibleByID(const struct FInstanceID& InstanceID, TSoftObjectPtr<class UStaticMesh> TargetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "FindDestructibleByID");

	Params::InstanceDamageSubsystem_FindDestructibleByID Parms{};

	Parms.InstanceID = std::move(InstanceID);
	Parms.TargetMesh = TargetMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.ForceVisibilityUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UInstancedStaticMeshComponent>SingleTarget                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::ForceVisibilityUpdate(TSoftObjectPtr<class UInstancedStaticMeshComponent> SingleTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "ForceVisibilityUpdate");

	Params::InstanceDamageSubsystem_ForceVisibilityUpdate Parms{};

	Parms.SingleTarget = SingleTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.GetHiddenInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FHiddenInstancesInfo>*    OutHiddenInstances                                     (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::GetHiddenInstances(TArray<struct FHiddenInstancesInfo>* OutHiddenInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "GetHiddenInstances");

	Params::InstanceDamageSubsystem_GetHiddenInstances Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHiddenInstances != nullptr)
		*OutHiddenInstances = std::move(Parms.OutHiddenInstances);
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.GetRemovalTimer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimerHandle*                    OutTimerHandle                                         (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::GetRemovalTimer(struct FTimerHandle* OutTimerHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "GetRemovalTimer");

	Params::InstanceDamageSubsystem_GetRemovalTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTimerHandle != nullptr)
		*OutTimerHandle = std::move(Parms.OutTimerHandle);
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.GetRespawnTimer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimerHandle*                    OutTimerHandle                                         (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::GetRespawnTimer(struct FTimerHandle* OutTimerHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "GetRespawnTimer");

	Params::InstanceDamageSubsystem_GetRespawnTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTimerHandle != nullptr)
		*OutTimerHandle = std::move(Parms.OutTimerHandle);
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.HandleDestructibleRemoval
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::HandleDestructibleRemoval(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "HandleDestructibleRemoval");

	Params::InstanceDamageSubsystem_HandleDestructibleRemoval Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.HideInstance
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInstanceVisibilityInstigatorType       InstigatorType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Causer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::HideInstance(const struct FInstanceID& InstanceID, EInstanceVisibilityInstigatorType InstigatorType, class AController* InstigatedBy, class UObject* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "HideInstance");

	Params::InstanceDamageSubsystem_HideInstance Parms{};

	Parms.InstanceID = std::move(InstanceID);
	Parms.InstigatorType = InstigatorType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.Causer = Causer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.IDSReset
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UInstanceDamageSubsystem::IDSReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "IDSReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnInstBeginOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UInstancedStaticMeshComponent*InstancedMesh                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::OnInstBeginOverlap(const class UInstancedStaticMeshComponent* InstancedMesh, class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnInstBeginOverlap");

	Params::InstanceDamageSubsystem_OnInstBeginOverlap Parms{};

	Parms.InstancedMesh = InstancedMesh;
	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnInstHit
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UInstancedStaticMeshComponent*InstancedMesh                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::OnInstHit(const class UInstancedStaticMeshComponent* InstancedMesh, class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnInstHit");

	Params::InstanceDamageSubsystem_OnInstHit Parms{};

	Parms.InstancedMesh = InstancedMesh;
	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnInstPointDamage
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ShotFromDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::OnInstPointDamage(const struct FInstanceID& InstanceID, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnInstPointDamage");

	Params::InstanceDamageSubsystem_OnInstPointDamage Parms{};

	Parms.InstanceID = std::move(InstanceID);
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.HitLocation = std::move(HitLocation);
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnInstRadialDamage
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UInstancedStaticMeshComponent*InstancedMesh                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Instances                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<float>&                    Damages                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::OnInstRadialDamage(const class UInstancedStaticMeshComponent* InstancedMesh, const TArray<int32>& Instances, const TArray<float>& Damages, class AController* InstigatedBy, const struct FVector& Origin, float MaxRadius, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnInstRadialDamage");

	Params::InstanceDamageSubsystem_OnInstRadialDamage Parms{};

	Parms.InstancedMesh = InstancedMesh;
	Parms.Instances = std::move(Instances);
	Parms.Damages = std::move(Damages);
	Parms.InstigatedBy = InstigatedBy;
	Parms.Origin = std::move(Origin);
	Parms.MaxRadius = MaxRadius;
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnInstRadialDamageWorkaround
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   DamageRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EObjectTypeQuery>&         ObjectTypes                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::OnInstRadialDamageWorkaround(const struct FHitResult& HitResult, float DamageRadius, const TArray<EObjectTypeQuery>& ObjectTypes, class AController* InstigatedBy, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnInstRadialDamageWorkaround");

	Params::InstanceDamageSubsystem_OnInstRadialDamageWorkaround Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DamageRadius = DamageRadius;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnRemoval
// (Final, Native, Protected)

void UInstanceDamageSubsystem::OnRemoval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnRemoval");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.OnRespawn
// (Final, Native, Protected)

void UInstanceDamageSubsystem::OnRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "OnRespawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.RemoveInstancedMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UInstancedStaticMeshComponent>InstMesh                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::RemoveInstancedMesh(TSoftObjectPtr<class UInstancedStaticMeshComponent> InstMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "RemoveInstancedMesh");

	Params::InstanceDamageSubsystem_RemoveInstancedMesh Parms{};

	Parms.InstMesh = InstMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.RespawnInstances
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRespawnLoaded                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::RespawnInstances(bool bRespawnLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "RespawnInstances");

	Params::InstanceDamageSubsystem_RespawnInstances Parms{};

	Parms.bRespawnLoaded = bRespawnLoaded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.RestoreSavedInfo
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FHiddenInstancesInfo>&StoredInfo                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::RestoreSavedInfo(const TArray<struct FHiddenInstancesInfo>& StoredInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "RestoreSavedInfo");

	Params::InstanceDamageSubsystem_RestoreSavedInfo Parms{};

	Parms.StoredInfo = std::move(StoredInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.SetReplicationComp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInstanceDamageReplication*       RepComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::SetReplicationComp(class UInstanceDamageReplication* RepComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "SetReplicationComp");

	Params::InstanceDamageSubsystem_SetReplicationComp Parms{};

	Parms.RepComp = RepComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.ShowInstance
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInstanceVisibilityInstigatorType       InstigatorType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Causer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::ShowInstance(const struct FInstanceID& InstanceID, EInstanceVisibilityInstigatorType InstigatorType, class AController* InstigatedBy, class UObject* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "ShowInstance");

	Params::InstanceDamageSubsystem_ShowInstance Parms{};

	Parms.InstanceID = std::move(InstanceID);
	Parms.InstigatorType = InstigatorType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.Causer = Causer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.ShowInstancesSingleMesh
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FHiddenInstancesInfo&      InstancesInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EInstanceVisibilityInstigatorType       InstigatorType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Causer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::ShowInstancesSingleMesh(const struct FHiddenInstancesInfo& InstancesInfo, EInstanceVisibilityInstigatorType InstigatorType, class AController* InstigatedBy, class UObject* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "ShowInstancesSingleMesh");

	Params::InstanceDamageSubsystem_ShowInstancesSingleMesh Parms{};

	Parms.InstancesInfo = std::move(InstancesInfo);
	Parms.InstigatorType = InstigatorType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.Causer = Causer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.ToggleDebug
// (Final, Native, Public, BlueprintCallable)

void UInstanceDamageSubsystem::ToggleDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "ToggleDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.ToggleInstanceVisibility
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInstanceVisibilityInstigatorType       ToggleInstigatorType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Causer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceDamageSubsystem::ToggleInstanceVisibility(const struct FInstanceID& InstanceID, bool bVisible, EInstanceVisibilityInstigatorType ToggleInstigatorType, class AController* Instigator, class UObject* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "ToggleInstanceVisibility");

	Params::InstanceDamageSubsystem_ToggleInstanceVisibility Parms{};

	Parms.InstanceID = std::move(InstanceID);
	Parms.bVisible = bVisible;
	Parms.ToggleInstigatorType = ToggleInstigatorType;
	Parms.Instigator = Instigator;
	Parms.Causer = Causer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.GetSetup
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UStaticMesh>&TargetMesh                                             (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIDSSetupInfo              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FIDSSetupInfo UInstanceDamageSubsystem::GetSetup(const TSoftObjectPtr<class UStaticMesh>& TargetMesh) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "GetSetup");

	Params::InstanceDamageSubsystem_GetSetup Parms{};

	Parms.TargetMesh = TargetMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.IsDebugOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstanceDamageSubsystem::IsDebugOn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "IsDebugOn");

	Params::InstanceDamageSubsystem_IsDebugOn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageSubsystem.IsInstanceHidden
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstanceDamageSubsystem::IsInstanceHidden(const struct FInstanceID& InstanceID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceDamageSubsystem", "IsInstanceHidden");

	Params::InstanceDamageSubsystem_IsInstanceHidden Parms{};

	Parms.InstanceID = std::move(InstanceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.AreSoftSubobjectsEqual
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UObject>&    First                                                  (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UObject>&    Second                                                 (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstanceDamageStatics::AreSoftSubobjectsEqual(class AActor* WorldContextObject, const TSoftObjectPtr<class UObject>& First, const TSoftObjectPtr<class UObject>& Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "AreSoftSubobjectsEqual");

	Params::InstanceDamageStatics_AreSoftSubobjectsEqual Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.First = First;
	Parms.Second = Second;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.ComponentIsDamageableFrom
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              VictimComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IgnoredActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHitResult                                           (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstanceDamageStatics::ComponentIsDamageableFrom(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, const TArray<class AActor*>& IgnoreActors, ECollisionChannel TraceChannel, struct FHitResult* OutHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "ComponentIsDamageableFrom");

	Params::InstanceDamageStatics_ComponentIsDamageableFrom Parms{};

	Parms.VictimComp = VictimComp;
	Parms.Origin = std::move(Origin);
	Parms.IgnoredActor = IgnoredActor;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.TraceChannel = TraceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitResult != nullptr)
		*OutHitResult = std::move(Parms.OutHitResult);

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.GetClosestPlayerLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   StartLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstanceDamageStatics::GetClosestPlayerLocation(class UObject* WorldContextObject, const struct FVector& StartLocation, struct FVector* OutLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "GetClosestPlayerLocation");

	Params::InstanceDamageStatics_GetClosestPlayerLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StartLocation = std::move(StartLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.GetInstancedMeshCustomData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInstancedStaticMeshComponent*    InstMesh                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomDataIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInstanceDamageStatics::GetInstancedMeshCustomData(class UInstancedStaticMeshComponent* InstMesh, int32 InstanceIndex, int32 CustomDataIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "GetInstancedMeshCustomData");

	Params::InstanceDamageStatics_GetInstancedMeshCustomData Parms{};

	Parms.InstMesh = InstMesh;
	Parms.InstanceIndex = InstanceIndex;
	Parms.CustomDataIndex = CustomDataIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.GetMass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Primitive                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInstanceDamageStatics::GetMass(const class UObject* WorldContextObject, class UPrimitiveComponent* Primitive, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "GetMass");

	Params::InstanceDamageStatics_GetMass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Primitive = Primitive;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.InstanceIDToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInstanceID&               InstanceID                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInstanceDamageStatics::InstanceIDToString(const struct FInstanceID& InstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "InstanceIDToString");

	Params::InstanceDamageStatics_InstanceIDToString Parms{};

	Parms.InstanceID = std::move(InstanceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceDamageSystem.InstanceDamageStatics.IsAnyPlayerInRange
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InTestLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstanceDamageStatics::IsAnyPlayerInRange(class UObject* WorldContextObject, const struct FVector& InTestLocation, float Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceDamageStatics", "IsAnyPlayerInRange");

	Params::InstanceDamageStatics_IsAnyPlayerInRange Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTestLocation = std::move(InTestLocation);
	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

