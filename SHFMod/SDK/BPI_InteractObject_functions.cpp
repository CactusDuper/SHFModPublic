#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_InteractObject

#include "Basic.hpp"

#include "BPI_InteractObject_classes.hpp"
#include "BPI_InteractObject_parameters.hpp"


namespace SDK
{

// Function BPI_InteractObject.BPI_InteractObject_C.BPI_Telephone
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractObject_C::BPI_Telephone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_Telephone");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractObject.BPI_InteractObject_C.BPI_RingBell
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractObject_C::BPI_RingBell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_RingBell");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractObject.BPI_InteractObject_C.BPI_GetMotionWarpMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WarpTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         OutVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_InteractObject_C::BPI_GetMotionWarpMarker(class FName WarpTarget, struct FVector* OutVector, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_GetMotionWarpMarker");

	Params::BPI_InteractObject_C_BPI_GetMotionWarpMarker Parms{};

	Parms.WarpTarget = WarpTarget;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function BPI_InteractObject.BPI_InteractObject_C.BPI_GetAnimID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  OutAnimID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractObject_C::BPI_GetAnimID(int32* OutAnimID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_GetAnimID");

	Params::BPI_InteractObject_C_BPI_GetAnimID Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutAnimID != nullptr)
		*OutAnimID = Parms.OutAnimID;
}


// Function BPI_InteractObject.BPI_InteractObject_C.BPI_FoxFlipFlopHandleCol
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractObject_C::BPI_FoxFlipFlopHandleCol()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_FoxFlipFlopHandleCol");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractObject.BPI_InteractObject_C.BPI_FoxFlipFlop
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractObject_C::BPI_FoxFlipFlop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_FoxFlipFlop");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractObject.BPI_InteractObject_C.BPI_DoMotionWarp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractObject_C::BPI_DoMotionWarp(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractObject_C", "BPI_DoMotionWarp");

	Params::BPI_InteractObject_C_BPI_DoMotionWarp Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}

}

