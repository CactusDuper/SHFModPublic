#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LockCharComponent_Base

#include "Basic.hpp"

#include "BP_LockCharComponent_Base_classes.hpp"
#include "BP_LockCharComponent_Base_parameters.hpp"


namespace SDK
{

// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.UpdateRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::UpdateRotation(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "UpdateRotation");

	Params::BP_LockCharComponent_Base_C_UpdateRotation Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.UpdateMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::UpdateMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "UpdateMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.UpdateFlicker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::UpdateFlicker(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "UpdateFlicker");

	Params::BP_LockCharComponent_Base_C_UpdateFlicker Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.UpdateCurrentAnswer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::UpdateCurrentAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "UpdateCurrentAnswer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.UpdateCorrectAnswers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<ENoceRiddleLevel, int32>&    CorrectAnswers_0                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_LockCharComponent_Base_C::UpdateCorrectAnswers(const TMap<ENoceRiddleLevel, int32>& CorrectAnswers_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "UpdateCorrectAnswers");

	Params::BP_LockCharComponent_Base_C_UpdateCorrectAnswers Parms{};

	Parms.CorrectAnswers_0 = std::move(CorrectAnswers_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.SubtractCurrentIndex
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::SubtractCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "SubtractCurrentIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.ShowFocusEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowEffect                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::ShowFocusEffect(bool ShowEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "ShowFocusEffect");

	Params::BP_LockCharComponent_Base_C_ShowFocusEffect Parms{};

	Parms.ShowEffect = ShowEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.ShowDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::ShowDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "ShowDebugInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.SetFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocus_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::SetFocus(bool IsFocus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "SetFocus");

	Params::BP_LockCharComponent_Base_C_SetFocus Parms{};

	Parms.IsFocus_0 = IsFocus_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "ReceiveTick");

	Params::BP_LockCharComponent_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_LockCharComponent_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.ExecuteUbergraph_BP_LockCharComponent_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::ExecuteUbergraph_BP_LockCharComponent_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "ExecuteUbergraph_BP_LockCharComponent_Base");

	Params::BP_LockCharComponent_Base_C_ExecuteUbergraph_BP_LockCharComponent_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.CheckAnswer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsCorrect                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LockCharComponent_Base_C::CheckAnswer(bool* IsCorrect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "CheckAnswer");

	Params::BP_LockCharComponent_Base_C_CheckAnswer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCorrect != nullptr)
		*IsCorrect = Parms.IsCorrect;
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.AddCurrentIndex
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::AddCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "AddCurrentIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.MoveToPrevious
// (BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::MoveToPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "MoveToPrevious");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.MoveToNext
// (BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::MoveToNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "MoveToNext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LockCharComponent_Base.BP_LockCharComponent_Base_C.HandleOnRecordLoaded
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LockCharComponent_Base_C::HandleOnRecordLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LockCharComponent_Base_C", "HandleOnRecordLoaded");

	UObject::ProcessEvent(Func, nullptr);
}

}

