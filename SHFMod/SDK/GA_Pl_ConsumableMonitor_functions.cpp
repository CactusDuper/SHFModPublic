#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Pl_ConsumableMonitor

#include "Basic.hpp"

#include "GA_Pl_ConsumableMonitor_classes.hpp"
#include "GA_Pl_ConsumableMonitor_parameters.hpp"


namespace SDK
{

// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.EventReceived_0142D5A14C161C4CDEE5FA91307C879C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayEventData&        Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_Pl_ConsumableMonitor_C::EventReceived_0142D5A14C161C4CDEE5FA91307C879C(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "EventReceived_0142D5A14C161C4CDEE5FA91307C879C");

	Params::GA_Pl_ConsumableMonitor_C_EventReceived_0142D5A14C161C4CDEE5FA91307C879C Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.ExecuteUbergraph_GA_Pl_ConsumableMonitor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Pl_ConsumableMonitor_C::ExecuteUbergraph_GA_Pl_ConsumableMonitor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "ExecuteUbergraph_GA_Pl_ConsumableMonitor");

	Params::GA_Pl_ConsumableMonitor_C_ExecuteUbergraph_GA_Pl_ConsumableMonitor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Pl_ConsumableMonitor_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "K2_OnEndAbility");

	Params::GA_Pl_ConsumableMonitor_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.OnAttributeChanged_00E8CD10428EF53606FB6FA15B1CE1A1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayAttribute&        Attribute                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// float                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OldValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Pl_ConsumableMonitor_C::OnAttributeChanged_00E8CD10428EF53606FB6FA15B1CE1A1(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "OnAttributeChanged_00E8CD10428EF53606FB6FA15B1CE1A1");

	Params::GA_Pl_ConsumableMonitor_C_OnAttributeChanged_00E8CD10428EF53606FB6FA15B1CE1A1 Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.NewValue = NewValue;
	Parms.OldValue = OldValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.OnEnterEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::OnEnterEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "OnEnterEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.OnExitEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::OnExitEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "OnExitEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.OnGameplayTagChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagExists                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Pl_ConsumableMonitor_C::OnGameplayTagChanged(const struct FGameplayTag& Tag, bool TagExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "OnGameplayTagChanged");

	Params::GA_Pl_ConsumableMonitor_C_OnGameplayTagChanged Parms{};

	Parms.Tag = std::move(Tag);
	Parms.TagExists = TagExists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.Record Effect Remain Time
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::Record_Effect_Remain_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "Record Effect Remain Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.RemoveAllBuffEffects
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::RemoveAllBuffEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "RemoveAllBuffEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.RestoreEffectRemainTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::RestoreEffectRemainTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "RestoreEffectRemainTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Pl_ConsumableMonitor.GA_Pl_ConsumableMonitor_C.UpdateCurrentMaxSanityTag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_Pl_ConsumableMonitor_C::UpdateCurrentMaxSanityTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Pl_ConsumableMonitor_C", "UpdateCurrentMaxSanityTag");

	UObject::ProcessEvent(Func, nullptr);
}

}

