#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pl_Base_Base_State

#include "Basic.hpp"

#include "BP_Pl_Base_Base_State_classes.hpp"
#include "BP_Pl_Base_Base_State_parameters.hpp"


namespace SDK
{

// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.Cached Pos Wait Montage Blend In
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InTime                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::Cached_Pos_Wait_Montage_Blend_In(float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "Cached Pos Wait Montage Blend In");

	Params::BP_Pl_Base_Base_State_C_Cached_Pos_Wait_Montage_Blend_In Parms{};

	Parms.InTime = InTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanAcceptInputAttack
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   AttackAccepted                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::CanAcceptInputAttack(bool* AttackAccepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanAcceptInputAttack");

	Params::BP_Pl_Base_Base_State_C_CanAcceptInputAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackAccepted != nullptr)
		*AttackAccepted = Parms.AttackAccepted;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanAcceptInputClawTransform
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   AttackAccepted                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::CanAcceptInputClawTransform(bool* AttackAccepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanAcceptInputClawTransform");

	Params::BP_Pl_Base_Base_State_C_CanAcceptInputClawTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackAccepted != nullptr)
		*AttackAccepted = Parms.AttackAccepted;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanAcceptInputDodge
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   AttackAccepted                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::CanAcceptInputDodge(bool* AttackAccepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanAcceptInputDodge");

	Params::BP_Pl_Base_Base_State_C_CanAcceptInputDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackAccepted != nullptr)
		*AttackAccepted = Parms.AttackAccepted;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanAcceptInputFocus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::CanAcceptInputFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanAcceptInputFocus");

	Params::BP_Pl_Base_Base_State_C_CanAcceptInputFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanAcceptInputInteract
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::CanAcceptInputInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanAcceptInputInteract");

	Params::BP_Pl_Base_Base_State_C_CanAcceptInputInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanSkipThisState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   CanSkip                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::CanSkipThisState(bool* CanSkip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanSkipThisState");

	Params::BP_Pl_Base_Base_State_C_CanSkipThisState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanSkip != nullptr)
		*CanSkip = Parms.CanSkip;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanUseCounter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::CanUseCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanUseCounter");

	Params::BP_Pl_Base_Base_State_C_CanUseCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CanVault
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::CanVault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CanVault");

	Params::BP_Pl_Base_Base_State_C_CanVault Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CheckShojiArmCorrector
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::CheckShojiArmCorrector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CheckShojiArmCorrector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.ClearApplyCachedPos
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::ClearApplyCachedPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "ClearApplyCachedPos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.ComputeAngle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_Pl_Base_Base_State_C::ComputeAngle(const struct FVector& A, const struct FVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "ComputeAngle");

	Params::BP_Pl_Base_Base_State_C_ComputeAngle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.ConstructionScript
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::ConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "ConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.CostStamina
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InStaminaKey                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::CostStamina(class FName InStaminaKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "CostStamina");

	Params::BP_Pl_Base_Base_State_C_CostStamina Parms{};

	Parms.InStaminaKey = InStaminaKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.DebugInfo_LogStateBegin
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::DebugInfo_LogStateBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "DebugInfo_LogStateBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.DebugInfo_LogStateEnd
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::DebugInfo_LogStateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "DebugInfo_LogStateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.ExecuteUbergraph_BP_Pl_Base_Base_State
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::ExecuteUbergraph_BP_Pl_Base_Base_State(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "ExecuteUbergraph_BP_Pl_Base_Base_State");

	Params::BP_Pl_Base_Base_State_C_ExecuteUbergraph_BP_Pl_Base_Base_State Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.GetAnimCancelType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENocePlayerAnimStateType                InAnimStateType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceAnimCancel*                        AnimCancel                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::GetAnimCancelType(ENocePlayerAnimStateType InAnimStateType, ENoceAnimCancel* AnimCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "GetAnimCancelType");

	Params::BP_Pl_Base_Base_State_C_GetAnimCancelType Parms{};

	Parms.InAnimStateType = InAnimStateType;

	UObject::ProcessEvent(Func, &Parms);

	if (AnimCancel != nullptr)
		*AnimCancel = Parms.AnimCancel;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.GetAnimCancelTypeHeavyAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENocePlayerAnimStateType                InAnimStateType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceAnimCancel*                        AnimCancel                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::GetAnimCancelTypeHeavyAttack(ENocePlayerAnimStateType InAnimStateType, ENoceAnimCancel* AnimCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "GetAnimCancelTypeHeavyAttack");

	Params::BP_Pl_Base_Base_State_C_GetAnimCancelTypeHeavyAttack Parms{};

	Parms.InAnimStateType = InAnimStateType;

	UObject::ProcessEvent(Func, &Parms);

	if (AnimCancel != nullptr)
		*AnimCancel = Parms.AnimCancel;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.GetAnimCancelTypeLightAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENocePlayerAnimStateType                InAnimStateType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceAnimCancel*                        AnimCancel                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::GetAnimCancelTypeLightAttack(ENocePlayerAnimStateType InAnimStateType, ENoceAnimCancel* AnimCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "GetAnimCancelTypeLightAttack");

	Params::BP_Pl_Base_Base_State_C_GetAnimCancelTypeLightAttack Parms{};

	Parms.InAnimStateType = InAnimStateType;

	UObject::ProcessEvent(Func, &Parms);

	if (AnimCancel != nullptr)
		*AnimCancel = Parms.AnimCancel;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.GetInputActionDownTime
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_Pl_Base_Base_State_C::GetInputActionDownTime(class FName InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "GetInputActionDownTime");

	Params::BP_Pl_Base_Base_State_C_GetInputActionDownTime Parms{};

	Parms.InputAction = InputAction;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleAutoCounter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutAutoCounter                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleAutoCounter(bool* OutAutoCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleAutoCounter");

	Params::BP_Pl_Base_Base_State_C_HandleAutoCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutAutoCounter != nullptr)
		*OutAutoCounter = Parms.OutAutoCounter;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleBrokenWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::HandleBrokenWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleBrokenWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleCounter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutCounter                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleCounter(bool* OutCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleCounter");

	Params::BP_Pl_Base_Base_State_C_HandleCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutCounter != nullptr)
		*OutCounter = Parms.OutCounter;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleDeflect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNoceAttackDeflectResult&        InDeflectResult                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_Pl_Base_Base_State_C::HandleDeflect(struct FNoceAttackDeflectResult& InDeflectResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleDeflect");

	Params::BP_Pl_Base_Base_State_C_HandleDeflect Parms{};

	Parms.InDeflectResult = std::move(InDeflectResult);

	UObject::ProcessEvent(Func, &Parms);

	InDeflectResult = std::move(Parms.InDeflectResult);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionClawTransform
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InTransformKB                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleInputActionClawTransform(bool InTransformKB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionClawTransform");

	Params::BP_Pl_Base_Base_State_C_HandleInputActionClawTransform Parms{};

	Parms.InTransformKB = InTransformKB;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionDodge
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutCanDodge                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleInputActionDodge(bool* OutCanDodge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionDodge");

	Params::BP_Pl_Base_Base_State_C_HandleInputActionDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutCanDodge != nullptr)
		*OutCanDodge = Parms.OutCanDodge;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionForLocomotion
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceInputAction                        InInputAction                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InPressed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleInputActionForLocomotion(ENoceInputAction InInputAction, bool InPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionForLocomotion");

	Params::BP_Pl_Base_Base_State_C_HandleInputActionForLocomotion Parms{};

	Parms.InInputAction = InInputAction;
	Parms.InPressed = InPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionHeavyAttack
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InCheckCounterCancel                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutCanHeavyAttack                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleInputActionHeavyAttack(bool InCheckCounterCancel, bool* OutCanHeavyAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionHeavyAttack");

	Params::BP_Pl_Base_Base_State_C_HandleInputActionHeavyAttack Parms{};

	Parms.InCheckCounterCancel = InCheckCounterCancel;

	UObject::ProcessEvent(Func, &Parms);

	if (OutCanHeavyAttack != nullptr)
		*OutCanHeavyAttack = Parms.OutCanHeavyAttack;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionInteract
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::HandleInputActionInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionLightAttack
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutCanLightAttack                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleInputActionLightAttack(bool* OutCanLightAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionLightAttack");

	Params::BP_Pl_Base_Base_State_C_HandleInputActionLightAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutCanLightAttack != nullptr)
		*OutCanLightAttack = Parms.OutCanLightAttack;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputActionSprint
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::HandleInputActionSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputActionSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputAxis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceInputAxis                          InInputAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<ENocePlayerAnimStateType>&       InAnimStateTypes                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_Pl_Base_Base_State_C::HandleInputAxis(ENoceInputAxis InInputAxis, double InValue, TArray<ENocePlayerAnimStateType>& InAnimStateTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputAxis");

	Params::BP_Pl_Base_Base_State_C_HandleInputAxis Parms{};

	Parms.InInputAxis = InInputAxis;
	Parms.InValue = InValue;
	Parms.InAnimStateTypes = std::move(InAnimStateTypes);

	UObject::ProcessEvent(Func, &Parms);

	InAnimStateTypes = std::move(Parms.InAnimStateTypes);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputQueue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<ENocePlayerAnimStateType>& InAnimStateTypes                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_Pl_Base_Base_State_C::HandleInputQueue(const TArray<ENocePlayerAnimStateType>& InAnimStateTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputQueue");

	Params::BP_Pl_Base_Base_State_C_HandleInputQueue Parms{};

	Parms.InAnimStateTypes = std::move(InAnimStateTypes);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleInputQueueForLocomotion
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::HandleInputQueueForLocomotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleInputQueueForLocomotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HandleUsingFocus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HandleUsingFocus(bool* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HandleUsingFocus");

	Params::BP_Pl_Base_Base_State_C_HandleUsingFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.HasObstacleInFront
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InCheckSprint                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutHasObstacle                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::HasObstacleInFront(bool InCheckSprint, bool* OutHasObstacle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "HasObstacleInFront");

	Params::BP_Pl_Base_Base_State_C_HasObstacleInFront Parms{};

	Parms.InCheckSprint = InCheckSprint;

	UObject::ProcessEvent(Func, &Parms);

	if (OutHasObstacle != nullptr)
		*OutHasObstacle = Parms.OutHasObstacle;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.Initialize
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.InNoCostStamina
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::InNoCostStamina(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "InNoCostStamina");

	Params::BP_Pl_Base_Base_State_C_InNoCostStamina Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.InStaminaTired
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::InStaminaTired(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "InStaminaTired");

	Params::BP_Pl_Base_Base_State_C_InStaminaTired Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsChangeWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsChangeWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsChangeWeapon");

	Params::BP_Pl_Base_Base_State_C_IsChangeWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsClawGTransformToClaw
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsClawGTransformToClaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsClawGTransformToClaw");

	Params::BP_Pl_Base_Base_State_C_IsClawGTransformToClaw Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsCustomUpperBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsCustomUpperBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsCustomUpperBody");

	Params::BP_Pl_Base_Base_State_C_IsCustomUpperBody Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsForceTransformToClaw
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsForceTransformToClaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsForceTransformToClaw");

	Params::BP_Pl_Base_Base_State_C_IsForceTransformToClaw Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsHellModeDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsHellModeDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsHellModeDamage");

	Params::BP_Pl_Base_Base_State_C_IsHellModeDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsInputActionPressed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsInputActionPressed(class FName InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsInputActionPressed");

	Params::BP_Pl_Base_Base_State_C_IsInputActionPressed Parms{};

	Parms.InputAction = InputAction;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsLeaveLocomotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsLeaveLocomotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsLeaveLocomotion");

	Params::BP_Pl_Base_Base_State_C_IsLeaveLocomotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsUseShortcutItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_Base_Base_State_C::IsUseShortcutItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsUseShortcutItem");

	Params::BP_Pl_Base_Base_State_C_IsUseShortcutItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.IsWeaponBroken
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::IsWeaponBroken(bool* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "IsWeaponBroken");

	Params::BP_Pl_Base_Base_State_C_IsWeaponBroken Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnCachedPosMontageBlendIn
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::OnCachedPosMontageBlendIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnCachedPosMontageBlendIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnInputAction
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceInputAction                        InInputAction                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InPressed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::OnInputAction(ENoceInputAction InInputAction, bool InPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnInputAction");

	Params::BP_Pl_Base_Base_State_C_OnInputAction Parms{};

	Parms.InInputAction = InInputAction;
	Parms.InPressed = InPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnInputAxis
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceInputAxis                          InInputAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::OnInputAxis(ENoceInputAxis InInputAxis, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnInputAxis");

	Params::BP_Pl_Base_Base_State_C_OnInputAxis Parms{};

	Parms.InInputAxis = InInputAxis;
	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnMontageStateChanged
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceMontageState                       NewMontageState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_Base_Base_State_C::OnMontageStateChanged(ENoceMontageState NewMontageState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnMontageStateChanged");

	Params::BP_Pl_Base_Base_State_C_OnMontageStateChanged Parms{};

	Parms.NewMontageState = NewMontageState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnStateBegin
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::OnStateBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnStateBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnStateEnd
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::OnStateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnStateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.OnStateInitialized
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::OnStateInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "OnStateInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.PlaySprintForbiddenHint
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::PlaySprintForbiddenHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "PlaySprintForbiddenHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.PlayStamiaTiredForbiddenHint
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::PlayStamiaTiredForbiddenHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "PlayStamiaTiredForbiddenHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.QueueDodgeState
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::QueueDodgeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "QueueDodgeState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.QueueStaminaState
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::QueueStaminaState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "QueueStaminaState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.ResetAnimInstanceVariables
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::ResetAnimInstanceVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "ResetAnimInstanceVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupCanEnterDodge
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupCanEnterDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupCanEnterDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupClawGTransformToClaw
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupClawGTransformToClaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupClawGTransformToClaw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupClawTransform
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupClawTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupClawTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupDodgeDirection
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupDodgeDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupDodgeDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupFocusAttack
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupFocusAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupFocusAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupWantToAttack
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupWantToAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupWantToAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.SetupWantToDodge
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::SetupWantToDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "SetupWantToDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.UpdateCharacterRotationMode
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::UpdateCharacterRotationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "UpdateCharacterRotationMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_Base_State.BP_Pl_Base_Base_State_C.UpdateForApplyCachedPos
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_Base_Base_State_C::UpdateForApplyCachedPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_Base_State_C", "UpdateForApplyCachedPos");

	UObject::ProcessEvent(Func, nullptr);
}

}

