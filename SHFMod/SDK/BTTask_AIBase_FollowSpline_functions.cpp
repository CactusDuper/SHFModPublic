#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_AIBase_FollowSpline

#include "Basic.hpp"

#include "BTTask_AIBase_FollowSpline_classes.hpp"
#include "BTTask_AIBase_FollowSpline_parameters.hpp"


namespace SDK
{

// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.Debug Draw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::Debug_Draw(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "Debug Draw");

	Params::BTTask_AIBase_FollowSpline_C_Debug_Draw Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.ExecuteUbergraph_BTTask_AIBase_FollowSpline
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::ExecuteUbergraph_BTTask_AIBase_FollowSpline(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "ExecuteUbergraph_BTTask_AIBase_FollowSpline");

	Params::BTTask_AIBase_FollowSpline_C_ExecuteUbergraph_BTTask_AIBase_FollowSpline Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.GetCurrentDistanceOnSpline
// (Public, BlueprintCallable, BlueprintEvent)

void UBTTask_AIBase_FollowSpline_C::GetCurrentDistanceOnSpline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "GetCurrentDistanceOnSpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.GetForwardAimLocation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         FrontLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::GetForwardAimLocation(struct FVector* FrontLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "GetForwardAimLocation");

	Params::BTTask_AIBase_FollowSpline_C_GetForwardAimLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FrontLocation != nullptr)
		*FrontLocation = std::move(Parms.FrontLocation);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.IsArriveDestination
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Arrived                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::IsArriveDestination(bool* Arrived)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "IsArriveDestination");

	Params::BTTask_AIBase_FollowSpline_C_IsArriveDestination Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Arrived != nullptr)
		*Arrived = Parms.Arrived;
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.IsInverseDirection
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Vec1                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Vec2                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInverse                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::IsInverseDirection(const struct FVector& Vec1, const struct FVector& Vec2, bool* IsInverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "IsInverseDirection");

	Params::BTTask_AIBase_FollowSpline_C_IsInverseDirection Parms{};

	Parms.Vec1 = std::move(Vec1);
	Parms.Vec2 = std::move(Vec2);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInverse != nullptr)
		*IsInverse = Parms.IsInverse;
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.MoveToDestination
// (Public, BlueprintCallable, BlueprintEvent)

void UBTTask_AIBase_FollowSpline_C::MoveToDestination()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "MoveToDestination");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "ReceiveExecuteAI");

	Params::BTTask_AIBase_FollowSpline_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "ReceiveTickAI");

	Params::BTTask_AIBase_FollowSpline_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.RotateToDestinaion TestVer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_AIBase_FollowSpline_C::RotateToDestinaion_TestVer(double Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "RotateToDestinaion TestVer");

	Params::BTTask_AIBase_FollowSpline_C_RotateToDestinaion_TestVer Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_AIBase_FollowSpline.BTTask_AIBase_FollowSpline_C.UpdateDestination
// (Public, BlueprintCallable, BlueprintEvent)

void UBTTask_AIBase_FollowSpline_C::UpdateDestination()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_AIBase_FollowSpline_C", "UpdateDestination");

	UObject::ProcessEvent(Func, nullptr);
}

}

