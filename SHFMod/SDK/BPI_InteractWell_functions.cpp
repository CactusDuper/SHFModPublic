#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_InteractWell

#include "Basic.hpp"

#include "BPI_InteractWell_classes.hpp"
#include "BPI_InteractWell_parameters.hpp"


namespace SDK
{

// Function BPI_InteractWell.BPI_InteractWell_C.BPI_PullUpFailed
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractWell_C::BPI_PullUpFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_PullUpFailed");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_GetSuccessTimes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  SuccessTimes                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  CurrentSuccessTimes                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractWell_C::BPI_GetSuccessTimes(int32* SuccessTimes, int32* CurrentSuccessTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_GetSuccessTimes");

	Params::BPI_InteractWell_C_BPI_GetSuccessTimes Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (SuccessTimes != nullptr)
		*SuccessTimes = Parms.SuccessTimes;

	if (CurrentSuccessTimes != nullptr)
		*CurrentSuccessTimes = Parms.CurrentSuccessTimes;
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_GetMotionWarpMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WarpTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         OutVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_InteractWell_C::BPI_GetMotionWarpMarker(class FName WarpTarget, struct FVector* OutVector, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_GetMotionWarpMarker");

	Params::BPI_InteractWell_C_BPI_GetMotionWarpMarker Parms{};

	Parms.WarpTarget = WarpTarget;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_GetCurrentDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurrentDuration                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractWell_C::BPI_GetCurrentDuration(double* CurrentDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_GetCurrentDuration");

	Params::BPI_InteractWell_C_BPI_GetCurrentDuration Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CurrentDuration != nullptr)
		*CurrentDuration = Parms.CurrentDuration;
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_GetCheckDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CheckDuration                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractWell_C::BPI_GetCheckDuration(double* CheckDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_GetCheckDuration");

	Params::BPI_InteractWell_C_BPI_GetCheckDuration Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CheckDuration != nullptr)
		*CheckDuration = Parms.CheckDuration;
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_GetCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_InteractWell_C::BPI_GetCameraRotation(struct FRotator* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_GetCameraRotation");

	Params::BPI_InteractWell_C_BPI_GetCameraRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_GetAnimID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  OutAnimID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractWell_C::BPI_GetAnimID(int32* OutAnimID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_GetAnimID");

	Params::BPI_InteractWell_C_BPI_GetAnimID Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (OutAnimID != nullptr)
		*OutAnimID = Parms.OutAnimID;
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_DoMotionWarp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractWell_C::BPI_DoMotionWarp(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_DoMotionWarp");

	Params::BPI_InteractWell_C_BPI_DoMotionWarp Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_StartShake
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractWell_C::BPI_StartShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_StartShake");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_StartPull
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractWell_C::BPI_StartPull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_StartPull");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_StartMoving
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractWell_C::BPI_StartMoving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_StartMoving");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_PullUpWellBucket
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_InteractWell_C::BPI_PullUpWellBucket(double CurrentDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_PullUpWellBucket");

	Params::BPI_InteractWell_C_BPI_PullUpWellBucket Parms{};

	Parms.CurrentDuration = CurrentDuration;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_InteractWell.BPI_InteractWell_C.BPI_PullUpSuccess
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_InteractWell_C::BPI_PullUpSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_InteractWell_C", "BPI_PullUpSuccess");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

