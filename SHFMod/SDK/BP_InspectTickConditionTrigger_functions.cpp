#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InspectTickConditionTrigger

#include "Basic.hpp"

#include "BP_InspectTickConditionTrigger_classes.hpp"
#include "BP_InspectTickConditionTrigger_parameters.hpp"


namespace SDK
{

// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.ActivateInspectEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActiviate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::ActivateInspectEffect(bool IsActiviate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "ActivateInspectEffect");

	Params::BP_InspectTickConditionTrigger_C_ActivateInspectEffect Parms{};

	Parms.IsActiviate = IsActiviate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.BindOverlapEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::BindOverlapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "BindOverlapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.CanInspect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   CanInspect_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::CanInspect(bool* CanInspect_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "CanInspect");

	Params::BP_InspectTickConditionTrigger_C_CanInspect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanInspect_0 != nullptr)
		*CanInspect_0 = Parms.CanInspect_0;
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.CanPlayCancelEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   CanPlay                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::CanPlayCancelEffect(bool* CanPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "CanPlayCancelEffect");

	Params::BP_InspectTickConditionTrigger_C_CanPlayCancelEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanPlay != nullptr)
		*CanPlay = Parms.CanPlay;
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.ExecuteUbergraph_BP_InspectTickConditionTrigger
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::ExecuteUbergraph_BP_InspectTickConditionTrigger(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "ExecuteUbergraph_BP_InspectTickConditionTrigger");

	Params::BP_InspectTickConditionTrigger_C_ExecuteUbergraph_BP_InspectTickConditionTrigger Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.HandleOnDiscontinued
// (BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::HandleOnDiscontinued()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "HandleOnDiscontinued");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.HandlePlayCancelEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::HandlePlayCancelEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "HandlePlayCancelEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.OnShapeBeginOverlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_InspectTickConditionTrigger_C::OnShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "OnShapeBeginOverlap");

	Params::BP_InspectTickConditionTrigger_C_OnShapeBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.OnShapeEndOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::OnShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "OnShapeEndOverlap");

	Params::BP_InspectTickConditionTrigger_C_OnShapeEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.OnSuccess
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::OnSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "OnSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.PlayInspectingAudio
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::PlayInspectingAudio(bool IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "PlayInspectingAudio");

	Params::BP_InspectTickConditionTrigger_C_PlayInspectingAudio Parms{};

	Parms.IsPlay = IsPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.PlaySuccessEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::PlaySuccessEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "PlaySuccessEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "ReceiveEndPlay");

	Params::BP_InspectTickConditionTrigger_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "ReceiveTick");

	Params::BP_InspectTickConditionTrigger_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.ShowDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::ShowDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "ShowDebugInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.StopEffect
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::StopEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "StopEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.UnbindOverlapEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::UnbindOverlapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "UnbindOverlapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.UpdateActorTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnableTick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::UpdateActorTick(bool IsEnableTick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "UpdateActorTick");

	Params::BP_InspectTickConditionTrigger_C_UpdateActorTick Parms{};

	Parms.IsEnableTick = IsEnableTick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.UpdateEffect
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::UpdateEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "UpdateEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.UpdateEffectActivation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::UpdateEffectActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "UpdateEffectActivation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.UpdateEffectAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InspectTickConditionTrigger_C::UpdateEffectAlpha(double InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "UpdateEffectAlpha");

	Params::BP_InspectTickConditionTrigger_C_UpdateEffectAlpha Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InspectTickConditionTrigger.BP_InspectTickConditionTrigger_C.UpdateEffectParameters
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InspectTickConditionTrigger_C::UpdateEffectParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InspectTickConditionTrigger_C", "UpdateEffectParameters");

	UObject::ProcessEvent(Func, nullptr);
}

}

