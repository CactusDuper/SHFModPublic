#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NpcBase_NoceNpcCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameNoce_structs.hpp"
#include "GameNoce_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NpcBase_NoceNpcCharacter.BP_NpcBase_NoceNpcCharacter_C
// 0x0080 (0x0E00 - 0x0D80)
class ABP_NpcBase_NoceNpcCharacter_C : public ANoceNpcCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0D88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSync;                                           // 0x0D90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNoceNPCLookTargetComponent*            NoceNPCLookTarget;                                 // 0x0D98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_AIBase_EquipWeaponHandle_C*        BPC_AIBase_EquipWeaponHandle;                      // 0x0DA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAnimPlusBankRegisterComponent*         AnimPlusBankRegister;                              // 0x0DA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNoceCharacterAttachmentComponent*      NoceCharacterAttachment;                           // 0x0DB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNeoAudioSoundComponent*                NeoAudioSound;                                     // 0x0DB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAnimPlusBankComponent*                 AnimPlusBank;                                      // 0x0DC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SplineTarget;                                      // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              ShiroDestroyed;                                    // 0x0DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UseAnimOptimaztion;                                // 0x0DE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurrentOptimizeMode;                             // 0x0DE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE2[0x6];                                      // 0x0DE2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultGravity;                                    // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideMeshWhenOverlapCamera;                         // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF1[0x3];                                      // 0x0DF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HideMeshWhenOverlapCameraRadius;                   // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CC_HideMeshWhenOverlapCamera;                      // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void CheckHideMeshWhenOverlapCamera();
	void ExecuteUbergraph_BP_NpcBase_NoceNpcCharacter(int32 EntryPoint);
	class ANoceWeapon* GetCurrentWeapon();
	void Handle_Optimization_Mode(bool Start_Optimization);
	void HandleHideMesh(bool InHide);
	void IEmBase_ApplySplineTarget(class USplineComponent* SplineComp);
	void IEmBase_ArriveSplineDestination();
	void IEmBase_CanFollowSpline(bool* FollowSpline);
	void IEmBase_ClearSplineTarget();
	void IEmBase_CustomEvent(class FName PatternName, double Parameter);
	void IEmBase_DebugBeahivourRemoveComp(class UActorComponent* In);
	void IEMBase_EnableMeshCollisionToPlayer(bool InEnable);
	void IEmBase_GetCurBaseMovementSpeed(double* BaseSpeed);
	void IEmBase_GetDefaultCapusleSetting(double* Radius, double* HalfHeight, TMap<ECollisionChannel, ECollisionResponse>* Response, ECollisionChannel* ObjectType);
	void IEmBase_GetDefaultSpawnMontage(class UAnimMontage** SpawnMontage);
	void IEmBase_GetIsCurrentOptimized(bool* Bool);
	void IEmBase_GetIsStrafe(bool* IsStrafe);
	void IEmBase_GetLocoTurnMontage(int32 Index_0, class UAnimMontage** outMTG);
	void IEmBase_GetPivotTurnMontage(double QuickTurnDegree, double LongTurnDegree, const struct FVector& TargetLoc, class UAnimMontage** TurnMontage);
	void IEmBase_GetSplineTarget(class USplineComponent** SplineComp);
	void IEmBase_GetStrafeDirectionMontage(ENoceHitReactionFourWayType Direction, class UAnimMontage** Montage);
	void IEmBase_GetUsedNavData(class ARecastNavMesh** NavData);
	void IEmBase_HandleDialogWhenDamaged(ENoceWinceType WinceType);
	void IEmBase_HandleHitByFriend(const struct FNoceAttackHitResult& NoceHitResult);
	void IEmBase_HandleSpawnerTeleportEvent(const struct FVector& DestLocation, const struct FRotator& DestRoration, bool* Result);
	void IEmBase_IsInPlayerCamDirection(bool* Bool);
	void IEmBase_IsPauseFollowSpline(bool* Pause);
	void IEmBase_OverrideLocoBaseSpeed(double BaseSpeed);
	void IEmBase_PlayMontageFromAnimBank(int32 BankID, int32 MotionID, double* duration);
	void IEmBase_RandomFient(double duration, double Dilation, class UAnimSequenceBase* Anim);
	void IEmBase_SendAudioTrigger(class FName AudioTriggerName);
	void IEmBase_SetEnableLookAt(bool Enable, const struct FNoceAILookAtSetting& LookAtSetting, bool* Result);
	void IEmBase_SetFaceToTargetInfo(const struct FNoceAIFaceToTargetInfo& Info);
	void IEmBase_SetFocusActor(bool IsStrafe, class AActor* FocusActor);
	void IEmBase_SetFocusPoint(bool IsStrafe, const struct FVector& FocusLoc);
	void IEmBase_SetHopeNotMove(bool HopeNotMove);
	void IEmBase_SetMaxLookDistance(bool Enable, double MaxLookDistance, bool* Result);
	void IEmBase_ShootProjectile(class FName PatternName);
	void IEmBase_TriggerLinkAbility(class ANoceCharacter* LinkTarget, class FName ExAbilityName);
	void IEmBase_UpdateAdditionalCollisionTransform();
	void IEmBase_UpdateBaseMovementSpeed(double BaseSpeed);
	void IEmBase_UpdateLocomotionOffset(const struct FVector& Offset);
	void IEmBase_UpdateModifiedMovementSpeed(double Modifier);
	void InitNavSetting();
	void OnPostSignificance(class ANoceCharacter* Character, float Significance);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetupHideMeshWhenOverlapCamera();
	void SwitchToRunSpeed(bool Enable);
	void TurnToTarget(class AActor* TurnTarget);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_NpcBase_NoceNpcCharacter_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_NpcBase_NoceNpcCharacter_C")
	}
	static class ABP_NpcBase_NoceNpcCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NpcBase_NoceNpcCharacter_C>();
	}
};
DUMPER7_ASSERTS_ABP_NpcBase_NoceNpcCharacter_C;

}

