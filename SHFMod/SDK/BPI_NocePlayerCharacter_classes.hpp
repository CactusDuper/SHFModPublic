#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NocePlayerCharacter

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GameNoce_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_NocePlayerCharacter.BPI_NocePlayerCharacter_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_NocePlayerCharacter_C final
{
public:
	void BPI_ApplyBattleStatusTimerTick();
	void BPI_ApplyBattling();
	void BPI_ApplyCameraMode(const struct FGameplayTag& CameraMode, bool WithInterpolation, bool ForceSet);
	void BPI_ApplyCameraReset();
	void BPI_ApplyClawGInSequence();
	void BPI_ApplyClawGStatusTimerTickInSequence();
	void BPI_ApplyCustomCamera(const struct FGameplayTag& CameraMode, bool WithInterpolation);
	void BPI_ApplyDamageWithReaction(double InHealthDamage, double InWinceDamage, double InMaxSanityDamage, double InStaminaDamage, double InMaxSanityDamageToHealthDamageRatio, bool IsForceWince, ENoceWinceType InWinceType, ENoceDeathType InDeathType, bool InCheckInvincible_, bool InHealthDamageEffectedByDamageRatio, bool InHealthDamageApplyGutsCheck, bool InIsLimitHealth, bool InCheckOmamoriKagami, bool InCheckSuperArmor);
	void BPI_ClearWalkToLocationTimerHandle();
	void BPI_DebugPlayerDeath(int32 DeathType, int32 DeathDir);
	void BPI_DebugPlayerInvincbile(bool InEnable);
	void BPI_DebugPlayerNoCostStamina(bool InEable);
	void BPI_DebugPlayerNoStaminaTiredTimerTick(bool InEnable);
	void BPI_DebugSetNoCostClawTransform(bool InEnable);
	void BPI_DebugTogglePlayerInvincible();
	void BPI_DropWeapon(const struct FVector& Impulse);
	void BPI_EnableForceStay(bool InEnable);
	void BPI_EnableMaterialsClaw(bool InEnable);
	void BPI_EnableMaterialsClawG(bool InEnable);
	void BPI_EndFaceTargetCameraMode();
	void BPI_EndWeddingCameraMode();
	void BPI_GetAudioProbeLocation(struct FVector* Location);
	void BPI_GetCameraViewRotation(struct FRotator* Rotation);
	void BPI_GetCounterAutoAimSearchInfo(double* OutRadius, double* OutHalfAngle);
	void BPI_HandleDamage(const struct FNoceAttackHitResult& InAttackHitResult);
	void BPI_HandleOnSlopeChanged(bool InIsOnSlope);
	void BPI_InRealBattleStatus(bool* OutValue);
	void BPI_LockInputWithDuration(bool InAcceptAction, bool InAcceptAxis, bool InAcceptUIAction, bool InAcceptCamera, class FName InToken, double InDuration);
	void BPI_RemoveBattling();
	void BPI_ResetCustomCamera(bool WithInterpolation);
	void BPI_ResetToPreviousCamera();
	void BPI_SetCameraViewRotation(const struct FRotator& Rotation);
	void BPI_SetClawFurWPOIntensityForCutscene(double InValue);
	void BPI_SetCollisionResponseIgnorePawn(bool Ignore);
	void BPI_SetPlayerIdleVarInt(int32 IdleVarInt);
	void BPI_SetPlayerIdleVarTime(double OverwriteIdleVarTime);
	void BPI_ShowCloth(class FName InValue);
	void BPI_StartFaceTargetCameraMode(class AActor* InTargetActor);
	void BPI_StartFaceTargetCameraModeWithRotation(const struct FRotator& InRotation);
	void BPI_StartRunTo(const struct FRotator& InRunToRotation, double InRunToDuration, bool InLimitInput);
	void BPI_StartWeddingCameraMode(const struct FRotator& InRotation);
	void BPI_StopWalking(bool IsStop);
	void BPI_SwitchWeaponAudioType(const struct FGameplayTag& InSwitchValue);
	void BPI_TestHellModeDamage(class UNoceHellModeDataAsset* InHellModeDataAsset);
	void BPI_WalkToLocation(double InStartDelayTime, const struct FVector& InTargetLocation, double InCameraLerpTime, bool InLimitInput);
	void BPI_WalkToWithCameraRotation(double InStartDelayTime, const struct FRotator& InCameraRotation, const struct FVector& InWalkToLocation, double InCameraLerpTime, bool InLimitInput);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BPI_NocePlayerCharacter_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BPI_NocePlayerCharacter_C")
	}
	static class IBPI_NocePlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_NocePlayerCharacter_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IBPI_NocePlayerCharacter_C;

}

