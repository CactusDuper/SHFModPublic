#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceCheatManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameNoce_structs.hpp"
#include "GameNoce_classes.hpp"
#include "EAttackRightRequestMethod_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NoceCheatManager.BP_NoceCheatManager_C
// 0x00F8 (0x0580 - 0x0488)
class UBP_NoceCheatManager_C final : public UNoceCheatManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0488(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         AutoIndicatorNumLeft;                              // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDataTable*>                     DebugFogTable;                                     // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DevFogMin;                                         // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevFogMax;                                         // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevFogTable;                                       // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDevFogRequest;                                  // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, TSoftClassPtr<class UClass>> EnemyAssetMap;                                    // 0x04B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_Dev_TeleportPoint_Spatially_Movable_C* TeleportPointActor;                             // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UClass*>              PickupAssetPaths;                                  // 0x0510(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SpawnedCount;                                      // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnEnemyLastIndex;                               // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             FastTravelData;                                    // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CacheShowingIndicator;                             // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipCutScene;                                      // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_572[0x6];                                      // 0x0572(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             EnemyList;                                         // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BP_Debug_SetWeaponDurability(float InValue);
	void CheckIndicatorOnProgressChanged(const struct FGameplayTag& NewTag);
	void Completed_362885874529DE0C7F2BB9961ADDA698(class USaveGame* SaveGame, bool bSuccess);
	void Debug_AsyncAutoSave();
	void Debug_DisableAllEngineStats();
	void Debug_DisableShiroFogGameOver(bool Enable);
	void Debug_EnableShiroFogEffect(bool Enable);
	void Debug_EnableShiroFogSpawner(bool Enable);
	void Debug_EnableTentacleNodeDetection(bool Enable);
	void Debug_EnemyLinkNearest();
	void Debug_EnemyLinkNearestByType(int32 InEnemyType);
	void Debug_EnmDrawNaviTarget();
	void Debug_EnmToggleAttackSlotInfo();
	void Debug_GoGameOverFlow();
	void Debug_GoNextIndicator(int32 Num);
	void Debug_GoNextIndicatorInternal();
	void Debug_HideLoadingScreen(bool IsHide);
	void Debug_KillAllEnemies();
	void Debug_KillAllEnemiesNotRevive();
	void Debug_NoCostClawTransform(bool InEnable);
	void Debug_NoCostStamina(bool InEnable);
	void Debug_NoStaminaTiredTimerTick(bool InEnable);
	void Debug_OpenSesame();
	void Debug_PerformanceSavingMode(bool Activate);
	void Debug_PlayerAutoRevive(bool on);
	void Debug_PlayerDamageReaction(int32 InWinceIndex);
	void Debug_PlayerDeathBack(int32 DeathType);
	void Debug_PlayerDeathFront(int32 DeathType);
	void Debug_PlayerForceBattle(bool InEnable);
	void Debug_PlayIdleVarInt(int32 DebugIdleVarInt);
	void Debug_PP_BreakDown();
	void Debug_PP_DisableSharpen(bool Enable);
	void Debug_PP_HellModeSpiritAttack();
	void Debug_PP_HPWarnings(int32 InValue);
	void Debug_PP_JustDodge();
	void Debug_PP_SanityFocus(bool InValue);
	void Debug_PP_SanityWeak(bool InValue);
	void Debug_PP_ShiromukuRevive(int32 InValue);
	void Debug_RemoveDevFog();
	void Debug_SetDataLayerRuntimeState(class FName Label, int32 State);
	void Debug_SetDevFog(class FName InType, int32 InFogMax);
	void Debug_SetDevFogInternal(int32 TableIndex, int32 MaxRowIndex, bool IsRequest);
	void Debug_SetFarmQuizIndex(int32 Index_0);
	void Debug_SetPlayerIdleVarTime(int32 InValue);
	void Debug_SetPlayerInvincible(bool IsEnable);
	void Debug_SetVirtualPositionDivide(double InValue);
	void Debug_ShowInspectDebugInfo(bool IsShow);
	void Debug_ShowLockDebugInfo(bool IsShow);
	void Debug_SkipCutScene(bool InValue);
	void Debug_SkipFarmGimmick();
	void Debug_SkipPotionRoomGimmick();
	void Debug_SpawnEnemy();
	void Debug_SSwordBundle();
	void Debug_SwitchCameraMode(int32 InMode);
	void Debug_SwtichGlobalAttackSlotMethod(int32 Int);
	void Debug_TeleportTo(double X, double Y, double Z, class FName Gateway);
	void Debug_TentacleLinkMotion(class FName LinkName);
	void Debug_ToggleErosionTentacleInfo();
	void Debug_TogglePlayerInvincible();
	void Debug_ToggleShowErosionTentacle();
	void Debug_ToggleShowHidePlayer();
	void Debug_UseHina(bool ResetWeapon);
	void Debug_UseHinaClaw(bool ResetWeapon);
	void DebugJump(class FName Target);
	void DebugShowAchievement(class FName RecordName);
	void ExecuteUbergraph_BP_NoceCheatManager(int32 EntryPoint);
	TArray<class UDataTable*> GetDialogParentTables(class UCompositeDataTable* CompositeDataTable);
	void InitializeProgressIndicator(const struct FGameplayTag& InProgress);
	void NextProgressTrigger();
	void OnSpawnEnemyWindowDecided(const struct FNeoCheatPopWindowOutputParam& Results);
	void ReceiveEndPlay();
	void ReceiveInitCheatManager();
	void RecordMode();
	void ShowNavMesh();
	void ToggleAreaFogLightTest();
	void TogglePlayerGravity();

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_NoceCheatManager_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_NoceCheatManager_C")
	}
	static class UBP_NoceCheatManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NoceCheatManager_C>();
	}
};
DUMPER7_ASSERTS_UBP_NoceCheatManager_C;

}

