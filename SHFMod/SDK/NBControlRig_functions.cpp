#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NBControlRig

#include "Basic.hpp"

#include "NBControlRig_classes.hpp"
#include "NBControlRig_parameters.hpp"


namespace SDK
{

// Function NBControlRig.ANS_FullBodyIKBase.OnUpdateFullBodyIKContext
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FFullBodyIKContext*              FullBodyIKCtxU                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           MeshComp                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UANS_FullBodyIKBase::OnUpdateFullBodyIKContext(struct FFullBodyIKContext* FullBodyIKCtxU, class USkeletalMeshComponent* MeshComp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ANS_FullBodyIKBase", "OnUpdateFullBodyIKContext");

	Params::ANS_FullBodyIKBase_OnUpdateFullBodyIKContext Parms{};

	Parms.MeshComp = MeshComp;

	UObject::ProcessEvent(Func, &Parms);

	if (FullBodyIKCtxU != nullptr)
		*FullBodyIKCtxU = std::move(Parms.FullBodyIKCtxU);
}


// Function NBControlRig.IKControllerComponent.CalculateCustomAimTargetPosition
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   InAimTargetPosition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutAimTargetPosition                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bUpdated                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIKControllerComponent::CalculateCustomAimTargetPosition(const struct FVector& InAimTargetPosition, struct FVector* OutAimTargetPosition, bool* bUpdated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKControllerComponent", "CalculateCustomAimTargetPosition");

	Params::IKControllerComponent_CalculateCustomAimTargetPosition Parms{};

	Parms.InAimTargetPosition = std::move(InAimTargetPosition);

	UObject::ProcessEvent(Func, &Parms);

	if (OutAimTargetPosition != nullptr)
		*OutAimTargetPosition = std::move(Parms.OutAimTargetPosition);

	if (bUpdated != nullptr)
		*bUpdated = Parms.bUpdated;
}


// Function NBControlRig.IKControllerComponent.CanApplyFullBodyIK
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UIKControllerComponent::CanApplyFullBodyIK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKControllerComponent", "CanApplyFullBodyIK");

	Params::IKControllerComponent_CanApplyFullBodyIK Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NBControlRig.IKControllerComponent.DisableIK
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UAnimNotifyState*           InAnimNotifyState                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EIKType                                 IKType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIKControllerComponent::DisableIK(const class UAnimNotifyState* InAnimNotifyState, EIKType IKType, float BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKControllerComponent", "DisableIK");

	Params::IKControllerComponent_DisableIK Parms{};

	Parms.InAnimNotifyState = InAnimNotifyState;
	Parms.IKType = IKType;
	Parms.BlendOutTime = BlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NBControlRig.IKControllerComponent.EnableIK
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UAnimNotifyState*           InAnimNotifyState                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EIKType                                 IKType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIKContext&                IKContext                                              (Parm, NativeAccessSpecifierPublic)

void UIKControllerComponent::EnableIK(const class UAnimNotifyState* InAnimNotifyState, EIKType IKType, const struct FIKContext& IKContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKControllerComponent", "EnableIK");

	Params::IKControllerComponent_EnableIK Parms{};

	Parms.InAnimNotifyState = InAnimNotifyState;
	Parms.IKType = IKType;
	Parms.IKContext = std::move(IKContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NBControlRig.IKControllerComponent.SetUpdateAimTargetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIKControllerComponent::SetUpdateAimTargetPosition(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKControllerComponent", "SetUpdateAimTargetPosition");

	Params::IKControllerComponent_SetUpdateAimTargetPosition Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

