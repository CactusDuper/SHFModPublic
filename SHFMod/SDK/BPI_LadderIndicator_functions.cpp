#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_LadderIndicator

#include "Basic.hpp"

#include "BPI_LadderIndicator_classes.hpp"
#include "BPI_LadderIndicator_parameters.hpp"


namespace SDK
{

// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_IsNearUpOutMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_LadderIndicator_C::BPI_IsNearUpOutMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_IsNearUpOutMarker");

	Params::BPI_LadderIndicator_C_BPI_IsNearUpOutMarker Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_IsNearUpInMaker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_LadderIndicator_C::BPI_IsNearUpInMaker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_IsNearUpInMaker");

	Params::BPI_LadderIndicator_C_BPI_IsNearUpInMaker Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_IsActiveTriggerUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_LadderIndicator_C::BPI_IsActiveTriggerUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_IsActiveTriggerUp");

	Params::BPI_LadderIndicator_C_BPI_IsActiveTriggerUp Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_HiddenAllIKMarkTarget
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_LadderIndicator_C::BPI_HiddenAllIKMarkTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_HiddenAllIKMarkTarget");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetWarpInfoUpIn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         ReturnLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        ReturnRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LadderIndicator_C::BPI_GetWarpInfoUpIn(struct FVector* ReturnLocation, struct FRotator* ReturnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetWarpInfoUpIn");

	Params::BPI_LadderIndicator_C_BPI_GetWarpInfoUpIn Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ReturnLocation != nullptr)
		*ReturnLocation = std::move(Parms.ReturnLocation);

	if (ReturnRotation != nullptr)
		*ReturnRotation = std::move(Parms.ReturnRotation);
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetWarpInfoUpEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         ReturnLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        ReturnRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LadderIndicator_C::BPI_GetWarpInfoUpEnd(struct FVector* ReturnLocation, struct FRotator* ReturnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetWarpInfoUpEnd");

	Params::BPI_LadderIndicator_C_BPI_GetWarpInfoUpEnd Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ReturnLocation != nullptr)
		*ReturnLocation = std::move(Parms.ReturnLocation);

	if (ReturnRotation != nullptr)
		*ReturnRotation = std::move(Parms.ReturnRotation);
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetIKMarkerTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InBegin                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InUpFirst                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InMoveUp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         RightHand                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         LeftHand                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LadderIndicator_C::BPI_GetIKMarkerTarget(bool InBegin, bool InUpFirst, bool InMoveUp, struct FVector* RightHand, struct FVector* LeftHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetIKMarkerTarget");

	Params::BPI_LadderIndicator_C_BPI_GetIKMarkerTarget Parms{};

	Parms.InBegin = InBegin;
	Parms.InUpFirst = InUpFirst;
	Parms.InMoveUp = InMoveUp;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (RightHand != nullptr)
		*RightHand = std::move(Parms.RightHand);

	if (LeftHand != nullptr)
		*LeftHand = std::move(Parms.LeftHand);
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetWarpInfoEnter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsUp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ReturnLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        ReturnRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LadderIndicator_C::BPI_GetWarpInfoEnter(bool InIsUp, struct FVector* ReturnLocation, struct FRotator* ReturnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetWarpInfoEnter");

	Params::BPI_LadderIndicator_C_BPI_GetWarpInfoEnter Parms{};

	Parms.InIsUp = InIsUp;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ReturnLocation != nullptr)
		*ReturnLocation = std::move(Parms.ReturnLocation);

	if (ReturnRotation != nullptr)
		*ReturnRotation = std::move(Parms.ReturnRotation);
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator IBPI_LadderIndicator_C::BPI_GetCameraRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetCameraRotation");

	Params::BPI_LadderIndicator_C_BPI_GetCameraRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetWarpInfoDownIn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         ReturnLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        ReturnRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LadderIndicator_C::BPI_GetWarpInfoDownIn(struct FVector* ReturnLocation, struct FRotator* ReturnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetWarpInfoDownIn");

	Params::BPI_LadderIndicator_C_BPI_GetWarpInfoDownIn Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ReturnLocation != nullptr)
		*ReturnLocation = std::move(Parms.ReturnLocation);

	if (ReturnRotation != nullptr)
		*ReturnRotation = std::move(Parms.ReturnRotation);
}


// Function BPI_LadderIndicator.BPI_LadderIndicator_C.BPI_GetUpInPointer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class USceneComponent* IBPI_LadderIndicator_C::BPI_GetUpInPointer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LadderIndicator_C", "BPI_GetUpInPointer");

	Params::BPI_LadderIndicator_C_BPI_GetUpInPointer Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

