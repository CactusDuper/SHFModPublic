#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceHitPerformComponent

#include "Basic.hpp"

#include "BP_NoceHitPerformComponent_classes.hpp"
#include "BP_NoceHitPerformComponent_parameters.hpp"


namespace SDK
{

// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ApplyHitMoveDistance
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InQueryTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ApplyHitMoveDistance(double InQueryTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ApplyHitMoveDistance");

	Params::BP_NoceHitPerformComponent_C_ApplyHitMoveDistance Parms{};

	Parms.InQueryTime = InQueryTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ApplyHitStop
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttackActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InHitActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  InTimeDilation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ApplyHitStop(class AActor* InAttackActor, class AActor* InHitActor, double InTimeDilation, double InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ApplyHitStop");

	Params::BP_NoceHitPerformComponent_C_ApplyHitStop Parms{};

	Parms.InAttackActor = InAttackActor;
	Parms.InHitActor = InHitActor;
	Parms.InTimeDilation = InTimeDilation;
	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ClearSpawnedNiagara
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InForceClear                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ClearSpawnedNiagara(bool InForceClear, double InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ClearSpawnedNiagara");

	Params::BP_NoceHitPerformComponent_C_ClearSpawnedNiagara Parms{};

	Parms.InForceClear = InForceClear;
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ExecuteUbergraph_BP_NoceHitPerformComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ExecuteUbergraph_BP_NoceHitPerformComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ExecuteUbergraph_BP_NoceHitPerformComponent");

	Params::BP_NoceHitPerformComponent_C_ExecuteUbergraph_BP_NoceHitPerformComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.FindDeflectPerformSetting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNoceDeflectPerformDataAsset*&    InDeflectPerformDataAsset                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class FName                             InWeaponName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FNoceDeflectPerformSetting       ReturnValue                                            (Parm, OutParm, ReturnParm)
// bool*                                   ReturnFind                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FNoceDeflectPerformSetting UBP_NoceHitPerformComponent_C::FindDeflectPerformSetting(class UNoceDeflectPerformDataAsset*& InDeflectPerformDataAsset, class FName InWeaponName, bool* ReturnFind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "FindDeflectPerformSetting");

	Params::BP_NoceHitPerformComponent_C_FindDeflectPerformSetting Parms{};

	Parms.InDeflectPerformDataAsset = InDeflectPerformDataAsset;
	Parms.InWeaponName = InWeaponName;

	UObject::ProcessEvent(Func, &Parms);

	InDeflectPerformDataAsset = Parms.InDeflectPerformDataAsset;

	if (ReturnFind != nullptr)
		*ReturnFind = Parms.ReturnFind;

	return Parms.ReturnValue;
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.FindHitPerformComboRotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             InComboName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutFind                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        OutRotator                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_NoceHitPerformComponent_C::FindHitPerformComboRotation(class AActor* InAttacker, class FName InComboName, bool* OutFind, struct FRotator* OutRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "FindHitPerformComboRotation");

	Params::BP_NoceHitPerformComponent_C_FindHitPerformComboRotation Parms{};

	Parms.InAttacker = InAttacker;
	Parms.InComboName = InComboName;

	UObject::ProcessEvent(Func, &Parms);

	if (OutFind != nullptr)
		*OutFind = Parms.OutFind;

	if (OutRotator != nullptr)
		*OutRotator = std::move(Parms.OutRotator);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.FindHitPerformSetting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             InComboName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FNoceHitPerformSetting           ReturnValue                                            (Parm, OutParm, ReturnParm)
// bool*                                   ReturnFind                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FNoceHitPerformSetting UBP_NoceHitPerformComponent_C::FindHitPerformSetting(class AActor* InAttacker, class FName InComboName, bool* ReturnFind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "FindHitPerformSetting");

	Params::BP_NoceHitPerformComponent_C_FindHitPerformSetting Parms{};

	Parms.InAttacker = InAttacker;
	Parms.InComboName = InComboName;

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnFind != nullptr)
		*ReturnFind = Parms.ReturnFind;

	return Parms.ReturnValue;
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.FindWincePerformUnit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutFind                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FNoceWincePerformUnit*           OutWincePerformUnit                                    (Parm, OutParm)

void UBP_NoceHitPerformComponent_C::FindWincePerformUnit(ENoceWinceType InWinceType, bool* OutFind, struct FNoceWincePerformUnit* OutWincePerformUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "FindWincePerformUnit");

	Params::BP_NoceHitPerformComponent_C_FindWincePerformUnit Parms{};

	Parms.InWinceType = InWinceType;

	UObject::ProcessEvent(Func, &Parms);

	if (OutFind != nullptr)
		*OutFind = Parms.OutFind;

	if (OutWincePerformUnit != nullptr)
		*OutWincePerformUnit = std::move(Parms.OutWincePerformUnit);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.GetHitFriendWinceType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ComboName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType*                         MyWinceType                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::GetHitFriendWinceType(class FName ComboName, ENoceWinceType* MyWinceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "GetHitFriendWinceType");

	Params::BP_NoceHitPerformComponent_C_GetHitFriendWinceType Parms{};

	Parms.ComboName = ComboName;

	UObject::ProcessEvent(Func, &Parms);

	if (MyWinceType != nullptr)
		*MyWinceType = Parms.MyWinceType;
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.GetHitPerformGroupName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName*                            GroupName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::GetHitPerformGroupName(class AActor* InAttacker, class FName* GroupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "GetHitPerformGroupName");

	Params::BP_NoceHitPerformComponent_C_GetHitPerformGroupName Parms{};

	Parms.InAttacker = InAttacker;

	UObject::ProcessEvent(Func, &Parms);

	if (GroupName != nullptr)
		*GroupName = Parms.GroupName;
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.Handle on Deflect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNoceAttackDeflectResult&        InDeflectResult                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_NoceHitPerformComponent_C::Handle_on_Deflect(struct FNoceAttackDeflectResult& InDeflectResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "Handle on Deflect");

	Params::BP_NoceHitPerformComponent_C_Handle_on_Deflect Parms{};

	Parms.InDeflectResult = std::move(InDeflectResult);

	UObject::ProcessEvent(Func, &Parms);

	InDeflectResult = std::move(Parms.InDeflectResult);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.HandleHitMove
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAttackHitResult&      InAttackHitResult                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::HandleHitMove(const struct FNoceAttackHitResult& InAttackHitResult, ENoceWinceType InWinceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "HandleHitMove");

	Params::BP_NoceHitPerformComponent_C_HandleHitMove Parms{};

	Parms.InAttackHitResult = std::move(InAttackHitResult);
	Parms.InWinceType = InWinceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.HandleHitPerform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNoceAttackHitResult&            InAttackHitResult                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UBP_NoceHitPerformComponent_C::HandleHitPerform(struct FNoceAttackHitResult& InAttackHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "HandleHitPerform");

	Params::BP_NoceHitPerformComponent_C_HandleHitPerform Parms{};

	Parms.InAttackHitResult = std::move(InAttackHitResult);

	UObject::ProcessEvent(Func, &Parms);

	InAttackHitResult = std::move(Parms.InAttackHitResult);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.HandleOnEnterEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceHitPerformComponent_C::HandleOnEnterEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "HandleOnEnterEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.HandleOnWince
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InHitLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::HandleOnWince(class AActor* InAttacker, ENoceWinceType InWinceType, const struct FVector& InHitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "HandleOnWince");

	Params::BP_NoceHitPerformComponent_C_HandleOnWince Parms{};

	Parms.InAttacker = InAttacker;
	Parms.InWinceType = InWinceType;
	Parms.InHitLocation = std::move(InHitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.Initialize
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_NoceHitPerformComponent_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.OnPlayerFocusCharged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceHitPerformComponent_C::OnPlayerFocusCharged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "OnPlayerFocusCharged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.OnPlayerInputForbidWhenStaminaTired
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceHitPerformComponent_C::OnPlayerInputForbidWhenStaminaTired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "OnPlayerInputForbidWhenStaminaTired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.Play Force Feedback and UISound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceControllerVibrationType            InVibrationType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FNeoAudioTriggerIdHandle&  InUISoundTriggerId                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_NoceHitPerformComponent_C::Play_Force_Feedback_and_UISound(ENoceControllerVibrationType InVibrationType, const struct FNeoAudioTriggerIdHandle& InUISoundTriggerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "Play Force Feedback and UISound");

	Params::BP_NoceHitPerformComponent_C_Play_Force_Feedback_and_UISound Parms{};

	Parms.InVibrationType = InVibrationType;
	Parms.InUISoundTriggerId = std::move(InUISoundTriggerId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayAudio
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNeoAudioTriggerIdHandle&  InAudioTriggerIdHandle                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FVector&                   InAudioPlayLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayAudio(const struct FNeoAudioTriggerIdHandle& InAudioTriggerIdHandle, const struct FVector& InAudioPlayLocation, class AActor* Character, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayAudio");

	Params::BP_NoceHitPerformComponent_C_PlayAudio Parms{};

	Parms.InAudioTriggerIdHandle = std::move(InAudioTriggerIdHandle);
	Parms.InAudioPlayLocation = std::move(InAudioPlayLocation);
	Parms.Character = Character;
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayCameraShake
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UCameraShakeBase>     InCameraShakeClass                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayCameraShake(TSubclassOf<class UCameraShakeBase> InCameraShakeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayCameraShake");

	Params::BP_NoceHitPerformComponent_C_PlayCameraShake Parms{};

	Parms.InCameraShakeClass = InCameraShakeClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayForceFeedback
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForceFeedbackEffect*             InForceFeedback                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayForceFeedback(class UForceFeedbackEffect* InForceFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayForceFeedback");

	Params::BP_NoceHitPerformComponent_C_PlayForceFeedback Parms{};

	Parms.InForceFeedback = InForceFeedback;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayParticle
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAffectedByHitStop                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAttached                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   InNiagaraSystem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             InComboName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InHitBoneName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InImpactPoint                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InImpactNormal                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InCloseHitLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceHitPerformParticleRotationType     InParticleRotationType                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWoundType                          InWoundType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayParticle(bool InAffectedByHitStop, bool InAttached, class AActor* InAttacker, class UNiagaraSystem* InNiagaraSystem, class FName InComboName, class FName InHitBoneName, const struct FVector& InImpactPoint, const struct FVector& InImpactNormal, const struct FVector& InCloseHitLocation, ENoceHitPerformParticleRotationType InParticleRotationType, ENoceWoundType InWoundType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayParticle");

	Params::BP_NoceHitPerformComponent_C_PlayParticle Parms{};

	Parms.InAffectedByHitStop = InAffectedByHitStop;
	Parms.InAttached = InAttached;
	Parms.InAttacker = InAttacker;
	Parms.InNiagaraSystem = InNiagaraSystem;
	Parms.InComboName = InComboName;
	Parms.InHitBoneName = InHitBoneName;
	Parms.InImpactPoint = std::move(InImpactPoint);
	Parms.InImpactNormal = std::move(InImpactNormal);
	Parms.InCloseHitLocation = std::move(InCloseHitLocation);
	Parms.InParticleRotationType = InParticleRotationType;
	Parms.InWoundType = InWoundType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayParticleDeflect
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAffectedByHitStop                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAttached                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   InNiagaraSystem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InMeshComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             InHitBoneName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InImpactPoint                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InImpactNormal                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayParticleDeflect(bool InAffectedByHitStop, bool InAttached, class UNiagaraSystem* InNiagaraSystem, class UPrimitiveComponent* InMeshComp, class FName InHitBoneName, const struct FVector& InImpactPoint, const struct FVector& InImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayParticleDeflect");

	Params::BP_NoceHitPerformComponent_C_PlayParticleDeflect Parms{};

	Parms.InAffectedByHitStop = InAffectedByHitStop;
	Parms.InAttached = InAttached;
	Parms.InNiagaraSystem = InNiagaraSystem;
	Parms.InMeshComp = InMeshComp;
	Parms.InHitBoneName = InHitBoneName;
	Parms.InImpactPoint = std::move(InImpactPoint);
	Parms.InImpactNormal = std::move(InImpactNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayPostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceHitPerformPostProcessType          InPostProcessType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayPostProcess(ENoceHitPerformPostProcessType InPostProcessType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayPostProcess");

	Params::BP_NoceHitPerformComponent_C_PlayPostProcess Parms{};

	Parms.InPostProcessType = InPostProcessType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.PlayWinceParticle
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAffectedByHitStop                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAttached                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   InNiagaraSystem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InSpawnLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::PlayWinceParticle(bool InAffectedByHitStop, bool InAttached, class UNiagaraSystem* InNiagaraSystem, const struct FVector& InSpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "PlayWinceParticle");

	Params::BP_NoceHitPerformComponent_C_PlayWinceParticle Parms{};

	Parms.InAffectedByHitStop = InAffectedByHitStop;
	Parms.InAttached = InAttached;
	Parms.InNiagaraSystem = InNiagaraSystem;
	Parms.InSpawnLocation = std::move(InSpawnLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_NoceHitPerformComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ReceiveEndPlay");

	Params::BP_NoceHitPerformComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ReceiveTick");

	Params::BP_NoceHitPerformComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ReportNoiseByTimer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceHitPerformComponent_C::ReportNoiseByTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ReportNoiseByTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ReportNoiseEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InLoudness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InMaxRange                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InTag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InUseLineTrace                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHit                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::ReportNoiseEvent(class AActor* InAttacker, const struct FVector& InLocation, double InLoudness, double InMaxRange, class FName InTag, bool InUseLineTrace, bool InHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ReportNoiseEvent");

	Params::BP_NoceHitPerformComponent_C_ReportNoiseEvent Parms{};

	Parms.InAttacker = InAttacker;
	Parms.InLocation = std::move(InLocation);
	Parms.InLoudness = InLoudness;
	Parms.InMaxRange = InMaxRange;
	Parms.InTag = InTag;
	Parms.InUseLineTrace = InUseLineTrace;
	Parms.InHit = InHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.RequestCurveMove
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      MoveCurve                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   MoveVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::RequestCurveMove(class UCurveFloat* MoveCurve, const struct FVector& MoveVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "RequestCurveMove");

	Params::BP_NoceHitPerformComponent_C_RequestCurveMove Parms{};

	Parms.MoveCurve = MoveCurve;
	Parms.MoveVector = std::move(MoveVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.SetAudioSwitch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNeoAudioSoundComponent*          NeoAudioSound_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::SetAudioSwitch(class UObject* Object, class UNeoAudioSoundComponent* NeoAudioSound_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "SetAudioSwitch");

	Params::BP_NoceHitPerformComponent_C_SetAudioSwitch Parms{};

	Parms.Object = Object;
	Parms.NeoAudioSound_0 = NeoAudioSound_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ShowDebugVFXAtLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_NoceHitPerformComponent_C::ShowDebugVFXAtLocation(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ShowDebugVFXAtLocation");

	Params::BP_NoceHitPerformComponent_C_ShowDebugVFXAtLocation Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.ShowDebugVFXAttached
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InBoneName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_NoceHitPerformComponent_C::ShowDebugVFXAttached(class FName InBoneName, const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "ShowDebugVFXAttached");

	Params::BP_NoceHitPerformComponent_C_ShowDebugVFXAttached Parms{};

	Parms.InBoneName = InBoneName;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceHitPerformComponent.BP_NoceHitPerformComponent_C.UpdateHitMove
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceHitPerformComponent_C::UpdateHitMove(double InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceHitPerformComponent_C", "UpdateHitMove");

	Params::BP_NoceHitPerformComponent_C_UpdateHitMove Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

