#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AICommandHandler

#include "Basic.hpp"

#include "BP_AICommandHandler_classes.hpp"
#include "BP_AICommandHandler_parameters.hpp"


namespace SDK
{

// Function BP_AICommandHandler.BP_AICommandHandler_C.EndAllCommands
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AICommandHandler_C::EndAllCommands()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "EndAllCommands");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.EndCurrWaitingCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AICommandHandler_C::EndCurrWaitingCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "EndCurrWaitingCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.ExecuteUbergraph_BP_AICommandHandler
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AICommandHandler_C::ExecuteUbergraph_BP_AICommandHandler(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "ExecuteUbergraph_BP_AICommandHandler");

	Params::BP_AICommandHandler_C_ExecuteUbergraph_BP_AICommandHandler Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.GetCurrCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FNoceAICommand*                  Command                                                (Parm, OutParm, NoDestructor)

void UBP_AICommandHandler_C::GetCurrCommand(struct FNoceAICommand* Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "GetCurrCommand");

	Params::BP_AICommandHandler_C_GetCurrCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Command != nullptr)
		*Command = std::move(Parms.Command);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.OnCommandDone
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EndLoop                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AICommandHandler_C::OnCommandDone(bool EndLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "OnCommandDone");

	Params::BP_AICommandHandler_C_OnCommandDone Parms{};

	Parms.EndLoop = EndLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.PlayDialog
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAICommandDialogInfo&  NoceAICommandDialogInfo                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_AICommandHandler_C::PlayDialog(const struct FNoceAICommandDialogInfo& NoceAICommandDialogInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "PlayDialog");

	Params::BP_AICommandHandler_C_PlayDialog Parms{};

	Parms.NoceAICommandDialogInfo = std::move(NoceAICommandDialogInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AICommandHandler_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.SetAICommands
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNoceAICommand>&          Commands                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ENoceAICommandExecType                  CommandExecType_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SetBrainToActiveWhenFin_0                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AICommandHandler_C::SetAICommands(TArray<struct FNoceAICommand>& Commands, ENoceAICommandExecType CommandExecType_0, bool SetBrainToActiveWhenFin_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "SetAICommands");

	Params::BP_AICommandHandler_C_SetAICommands Parms{};

	Parms.Commands = std::move(Commands);
	Parms.CommandExecType_0 = CommandExecType_0;
	Parms.SetBrainToActiveWhenFin_0 = SetBrainToActiveWhenFin_0;

	UObject::ProcessEvent(Func, &Parms);

	Commands = std::move(Parms.Commands);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.SetupCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CommandIdx                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AICommandHandler_C::SetupCommand(int32 CommandIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "SetupCommand");

	Params::BP_AICommandHandler_C_SetupCommand Parms{};

	Parms.CommandIdx = CommandIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AICommandHandler.BP_AICommandHandler_C.StartRunCommands
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AICommandHandler_C::StartRunCommands()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AICommandHandler_C", "StartRunCommands");

	UObject::ProcessEvent(Func, nullptr);
}

}

