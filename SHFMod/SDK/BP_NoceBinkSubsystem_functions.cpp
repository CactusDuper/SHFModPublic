#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NoceBinkSubsystem

#include "Basic.hpp"

#include "BP_NoceBinkSubsystem_classes.hpp"
#include "BP_NoceBinkSubsystem_parameters.hpp"


namespace SDK
{

// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.EnableBinkRender
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceBinkSubsystem_C::EnableBinkRender(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "EnableBinkRender");

	Params::BP_NoceBinkSubsystem_C_EnableBinkRender Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.PlayBinkVideo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceBinkSubsystem_C::PlayBinkVideo(bool IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "PlayBinkVideo");

	Params::BP_NoceBinkSubsystem_C_PlayBinkVideo Parms{};

	Parms.IsPlay = IsPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.PreloadBinkVideo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBinkMediaPlayer*                 EditorModeBinkPlayerSource                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBinkMediaPlayer*                 BinkPlayerSource                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Seconds                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    BinkLinkUrl                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsBinkSeekEveryFrame                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceBinkSubsystem_C::PreloadBinkVideo(const struct FTransform& SpawnTransform, class UBinkMediaPlayer* EditorModeBinkPlayerSource, class UBinkMediaPlayer* BinkPlayerSource, double Seconds, const class FString& BinkLinkUrl, bool IsBinkSeekEveryFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "PreloadBinkVideo");

	Params::BP_NoceBinkSubsystem_C_PreloadBinkVideo Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.EditorModeBinkPlayerSource = EditorModeBinkPlayerSource;
	Parms.BinkPlayerSource = BinkPlayerSource;
	Parms.Seconds = Seconds;
	Parms.BinkLinkUrl = std::move(BinkLinkUrl);
	Parms.IsBinkSeekEveryFrame = IsBinkSeekEveryFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.PreloadBinkVideo_BP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceBinkPreloadData&      InData                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_NoceBinkSubsystem_C::PreloadBinkVideo_BP(const struct FNoceBinkPreloadData& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "PreloadBinkVideo_BP");

	Params::BP_NoceBinkSubsystem_C_PreloadBinkVideo_BP Parms{};

	Parms.InData = std::move(InData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.ReleaseBinkPlayTool
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceBinkSubsystem_C::ReleaseBinkPlayTool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "ReleaseBinkPlayTool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.RewindBinkVideo
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceBinkSubsystem_C::RewindBinkVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "RewindBinkVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.SeekBinkVideo
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceBinkSubsystem_C::SeekBinkVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "SeekBinkVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.SetBinkSeekEveryFrame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSeekEveryFrame                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceBinkSubsystem_C::SetBinkSeekEveryFrame(bool IsSeekEveryFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "SetBinkSeekEveryFrame");

	Params::BP_NoceBinkSubsystem_C_SetBinkSeekEveryFrame Parms{};

	Parms.IsSeekEveryFrame = IsSeekEveryFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.SetBinkVideoTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NoceBinkSubsystem_C::SetBinkVideoTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "SetBinkVideoTime");

	Params::BP_NoceBinkSubsystem_C_SetBinkVideoTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.StopBinkVideo
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NoceBinkSubsystem_C::StopBinkVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "StopBinkVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NoceBinkSubsystem.BP_NoceBinkSubsystem_C.UpdateOrSpawnBinkPlayTool
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBinkMediaPlayer*                 EditorModeBinkPlayerSource                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBinkMediaPlayer*                 BinkPlayerSource                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Seconds                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    BinkLinkUrl                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsBinkSeekEveryFrame                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACS_BinkPlayTool_C**              BinkPlayTool_0                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NoceBinkSubsystem_C::UpdateOrSpawnBinkPlayTool(const struct FTransform& SpawnTransform, class UBinkMediaPlayer* EditorModeBinkPlayerSource, class UBinkMediaPlayer* BinkPlayerSource, double Seconds, const class FString& BinkLinkUrl, bool IsBinkSeekEveryFrame, class ACS_BinkPlayTool_C** BinkPlayTool_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NoceBinkSubsystem_C", "UpdateOrSpawnBinkPlayTool");

	Params::BP_NoceBinkSubsystem_C_UpdateOrSpawnBinkPlayTool Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.EditorModeBinkPlayerSource = EditorModeBinkPlayerSource;
	Parms.BinkPlayerSource = BinkPlayerSource;
	Parms.Seconds = Seconds;
	Parms.BinkLinkUrl = std::move(BinkLinkUrl);
	Parms.IsBinkSeekEveryFrame = IsBinkSeekEveryFrame;

	UObject::ProcessEvent(Func, &Parms);

	if (BinkPlayTool_0 != nullptr)
		*BinkPlayTool_0 = Parms.BinkPlayTool_0;
}

}

