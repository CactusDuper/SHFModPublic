#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NocePostProcessManager

#include "Basic.hpp"

#include "BP_NocePostProcessManager_classes.hpp"
#include "BP_NocePostProcessManager_parameters.hpp"


namespace SDK
{

// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.TL_ShiroRevive2EnterAtk__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::TL_ShiroRevive2EnterAtk__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "TL_ShiroRevive2EnterAtk__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.TL_ShiroRevive2EnterAtk__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::TL_ShiroRevive2EnterAtk__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "TL_ShiroRevive2EnterAtk__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.TL_ShiroPlayerRevive2Update__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::TL_ShiroPlayerRevive2Update__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "TL_ShiroPlayerRevive2Update__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.TL_ShiroPlayerRevive2Update__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::TL_ShiroPlayerRevive2Update__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "TL_ShiroPlayerRevive2Update__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_StartHPWarnings__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_StartHPWarnings__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_StartHPWarnings__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_StartHPWarnings__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_StartHPWarnings__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_StartHPWarnings__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_StartCounterableHint__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_StartCounterableHint__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_StartCounterableHint__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_StartCounterableHint__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_StartCounterableHint__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_StartCounterableHint__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_SanityWeak__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_SanityWeak__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_SanityWeak__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_SanityWeak__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_SanityWeak__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_SanityWeak__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_SanityFocus__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_SanityFocus__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_SanityFocus__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_SanityFocus__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_SanityFocus__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_SanityFocus__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_JustDodge__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_JustDodge__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_JustDodge__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_JustDodge__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_JustDodge__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_JustDodge__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_HellModeSpiritAttack__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_HellModeSpiritAttack__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_HellModeSpiritAttack__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_HellModeSpiritAttack__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_HellModeSpiritAttack__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_HellModeSpiritAttack__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_FocusFOV__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_FocusFOV__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_FocusFOV__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_FocusFOV__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_FocusFOV__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_FocusFOV__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_EndHPWarnings__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_EndHPWarnings__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_EndHPWarnings__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_EndHPWarnings__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_EndHPWarnings__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_EndHPWarnings__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_EndCounterableHint__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_EndCounterableHint__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_EndCounterableHint__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_EndCounterableHint__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_EndCounterableHint__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_EndCounterableHint__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_BreakDown_Blend__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_BreakDown_Blend__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_BreakDown_Blend__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_BreakDown_Blend__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_BreakDown_Blend__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_BreakDown_Blend__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_BreakDown_Alpha__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_BreakDown_Alpha__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_BreakDown_Alpha__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_BreakDown_Alpha__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_BreakDown_Alpha__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_BreakDown_Alpha__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_BreadDown_Drop__UpdateFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_BreadDown_Drop__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_BreadDown_Drop__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.Timeline_BreadDown_Drop__FinishedFunc
// (BlueprintEvent)

void ABP_NocePostProcessManager_C::Timeline_BreadDown_Drop__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "Timeline_BreadDown_Drop__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.StartHPWarningsProcess
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InSourceFormEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::StartHPWarningsProcess(bool InSourceFormEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "StartHPWarningsProcess");

	Params::BP_NocePostProcessManager_C_StartHPWarningsProcess Parms{};

	Parms.InSourceFormEvent = InSourceFormEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.StartHPWarnings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InPlayTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InSourceFormEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::StartHPWarnings(double InPlayTime, bool InSourceFormEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "StartHPWarnings");

	Params::BP_NocePostProcessManager_C_StartHPWarnings Parms{};

	Parms.InPlayTime = InPlayTime;
	Parms.InSourceFormEvent = InSourceFormEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.StartCounterableHintProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::StartCounterableHintProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "StartCounterableHintProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.StartCounterableHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InAlpha                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InBlend                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InJitterScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InJitterSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InOverlayColor_ColorShiftBlend                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InOverlayColorRatio                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              InOverlapColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::StartCounterableHint(double InAlpha, double InBlend, double InJitterScale, double InJitterSpeed, double InOverlayColor_ColorShiftBlend, double InOverlayColorRatio, const struct FLinearColor& InOverlapColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "StartCounterableHint");

	Params::BP_NocePostProcessManager_C_StartCounterableHint Parms{};

	Parms.InAlpha = InAlpha;
	Parms.InBlend = InBlend;
	Parms.InJitterScale = InJitterScale;
	Parms.InJitterSpeed = InJitterSpeed;
	Parms.InOverlayColor_ColorShiftBlend = InOverlayColor_ColorShiftBlend;
	Parms.InOverlayColorRatio = InOverlayColorRatio;
	Parms.InOverlapColor = std::move(InOverlapColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiroRevive2WepCurveSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Wep                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ComboState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutCruve                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::ShiroRevive2WepCurveSelect(class FName Wep, class FName ComboState, double* OutCruve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiroRevive2WepCurveSelect");

	Params::BP_NocePostProcessManager_C_ShiroRevive2WepCurveSelect Parms{};

	Parms.Wep = Wep;
	Parms.ComboState = ComboState;

	UObject::ProcessEvent(Func, &Parms);

	if (OutCruve != nullptr)
		*OutCruve = Parms.OutCruve;
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiroPlayerRevive2OnAtk
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StateName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::ShiroPlayerRevive2OnAtk(class FName WeaponName, class FName StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiroPlayerRevive2OnAtk");

	Params::BP_NocePostProcessManager_C_ShiroPlayerRevive2OnAtk Parms{};

	Parms.WeaponName = WeaponName;
	Parms.StateName = StateName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiromukuRevive4Progress
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::ShiromukuRevive4Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiromukuRevive4Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiromukuRevive4End
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::ShiromukuRevive4End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiromukuRevive4End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiromukuRevive3Progress
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::ShiromukuRevive3Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiromukuRevive3Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiromukuRevive3End
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::ShiromukuRevive3End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiromukuRevive3End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiromukuRevive2Progress
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::ShiromukuRevive2Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiromukuRevive2Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ShiromukuRevive2End
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::ShiromukuRevive2End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ShiromukuRevive2End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupShiromukuRevive4
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupShiromukuRevive4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupShiromukuRevive4");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupShiromukuRevive3
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupShiromukuRevive3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupShiromukuRevive3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupShiromukuRevive2
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupShiromukuRevive2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupShiromukuRevive2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupShiromukuRevive1
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupShiromukuRevive1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupShiromukuRevive1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupSanityWeak
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupSanityWeak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupSanityWeak");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupSanityFocus
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupSanityFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupSanityFocus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupJustDodge
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupJustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupJustDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupHPWarnings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupHPWarnings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupHPWarnings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupHellModeSpiritAttack
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupHellModeSpiritAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupHellModeSpiritAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupCounterableHint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupCounterableHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupCounterableHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupBreakDown
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupBreakDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupBreakDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetupAciveCameraComponent
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SetupAciveCameraComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetupAciveCameraComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SetPlayerMeshStencilValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InStencilValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::SetPlayerMeshStencilValue(int32 InStencilValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SetPlayerMeshStencilValue");

	Params::BP_NocePostProcessManager_C_SetPlayerMeshStencilValue Parms{};

	Parms.InStencilValue = InStencilValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SanityWeakEndProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SanityWeakEndProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SanityWeakEndProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SanityWeak
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEanble                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::SanityWeak(bool InEanble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SanityWeak");

	Params::BP_NocePostProcessManager_C_SanityWeak Parms{};

	Parms.InEanble = InEanble;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SanityFocusStartProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SanityFocusStartProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SanityFocusStartProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SanityFocusEndProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::SanityFocusEndProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SanityFocusEndProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.SanityFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::SanityFocus(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "SanityFocus");

	Params::BP_NocePostProcessManager_C_SanityFocus Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ReceiveEndPlay");

	Params::BP_NocePostProcessManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NocePostProcessManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.OnUseCineCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUsing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::OnUseCineCamera(bool IsUsing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "OnUseCineCamera");

	Params::BP_NocePostProcessManager_C_OnUseCineCamera Parms{};

	Parms.IsUsing = IsUsing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.OnPlayerEnterAttackState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InWeaponName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InStateName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::OnPlayerEnterAttackState(class FName InWeaponName, class FName InStateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "OnPlayerEnterAttackState");

	Params::BP_NocePostProcessManager_C_OnPlayerEnterAttackState Parms{};

	Parms.InWeaponName = InWeaponName;
	Parms.InStateName = InStateName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.JustDodgeProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::JustDodgeProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "JustDodgeProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.JustDodge
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::JustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "JustDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.HellModeSpiritAttackStartProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::HellModeSpiritAttackStartProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "HellModeSpiritAttackStartProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.HellModeSpiritAttackEndProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::HellModeSpiritAttackEndProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "HellModeSpiritAttackEndProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.HellModeSpiritAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::HellModeSpiritAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "HellModeSpiritAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.HandleSwitchPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       InNewPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::HandleSwitchPlayer(class ACharacter* InNewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "HandleSwitchPlayer");

	Params::BP_NocePostProcessManager_C_HandleSwitchPlayer Parms{};

	Parms.InNewPlayer = InNewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.HandleShiromukuRevive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::HandleShiromukuRevive(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "HandleShiromukuRevive");

	Params::BP_NocePostProcessManager_C_HandleShiromukuRevive Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.HandleCineCameraChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::HandleCineCameraChanged(bool InEnter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "HandleCineCameraChanged");

	Params::BP_NocePostProcessManager_C_HandleCineCameraChanged Parms{};

	Parms.InEnter = InEnter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.ExecuteUbergraph_BP_NocePostProcessManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::ExecuteUbergraph_BP_NocePostProcessManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "ExecuteUbergraph_BP_NocePostProcessManager");

	Params::BP_NocePostProcessManager_C_ExecuteUbergraph_BP_NocePostProcessManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.EndHPWarningsProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::EndHPWarningsProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "EndHPWarningsProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.EndHPWarnings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InSourceFormEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::EndHPWarnings(bool InSourceFormEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "EndHPWarnings");

	Params::BP_NocePostProcessManager_C_EndHPWarnings Parms{};

	Parms.InSourceFormEvent = InSourceFormEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.EndCounterableHintProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::EndCounterableHintProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "EndCounterableHintProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.EndCounterableHint
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::EndCounterableHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "EndCounterableHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.CreateEffectMaterialInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterial*                        Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                MaterialInstance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*&        Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_NocePostProcessManager_C::CreateEffectMaterialInstance(class UMaterial* Material, class UMaterialInstance* MaterialInstance, class UMaterialInstanceDynamic*& Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "CreateEffectMaterialInstance");

	Params::BP_NocePostProcessManager_C_CreateEffectMaterialInstance Parms{};

	Parms.Material = Material;
	Parms.MaterialInstance = MaterialInstance;
	Parms.Instance = Instance;

	UObject::ProcessEvent(Func, &Parms);

	Instance = Parms.Instance;
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.BreakDownProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::BreakDownProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "BreakDownProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NocePostProcessManager.BP_NocePostProcessManager_C.BreakDown
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NocePostProcessManager_C::BreakDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NocePostProcessManager_C", "BreakDown");

	UObject::ProcessEvent(Func, nullptr);
}

}

