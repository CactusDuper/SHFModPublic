#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pl_NoceWalkToComponent

#include "Basic.hpp"

#include "BP_Pl_NoceWalkToComponent_classes.hpp"
#include "BP_Pl_NoceWalkToComponent_parameters.hpp"


namespace SDK
{

// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.ApplyInputVector
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::ApplyInputVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "ApplyInputVector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.EnableForceStay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::EnableForceStay(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "EnableForceStay");

	Params::BP_Pl_NoceWalkToComponent_C_EnableForceStay Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.ExecuteUbergraph_BP_Pl_NoceWalkToComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::ExecuteUbergraph_BP_Pl_NoceWalkToComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "ExecuteUbergraph_BP_Pl_NoceWalkToComponent");

	Params::BP_Pl_NoceWalkToComponent_C_ExecuteUbergraph_BP_Pl_NoceWalkToComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.GetIsRunTo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_NoceWalkToComponent_C::GetIsRunTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "GetIsRunTo");

	Params::BP_Pl_NoceWalkToComponent_C_GetIsRunTo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.GetIsWalkTo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_NoceWalkToComponent_C::GetIsWalkTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "GetIsWalkTo");

	Params::BP_Pl_NoceWalkToComponent_C_GetIsWalkTo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.GetIsWalkToWithCameraRotation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_Pl_NoceWalkToComponent_C::GetIsWalkToWithCameraRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "GetIsWalkToWithCameraRotation");

	Params::BP_Pl_NoceWalkToComponent_C_GetIsWalkToWithCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.GetRunToInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutIsRunTo                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutInputForward                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutInputRight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutInputLength                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::GetRunToInfo(bool* OutIsRunTo, double* OutInputForward, double* OutInputRight, double* OutInputLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "GetRunToInfo");

	Params::BP_Pl_NoceWalkToComponent_C_GetRunToInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsRunTo != nullptr)
		*OutIsRunTo = Parms.OutIsRunTo;

	if (OutInputForward != nullptr)
		*OutInputForward = Parms.OutInputForward;

	if (OutInputRight != nullptr)
		*OutInputRight = Parms.OutInputRight;

	if (OutInputLength != nullptr)
		*OutInputLength = Parms.OutInputLength;
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.HandleOnEnterEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::HandleOnEnterEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "HandleOnEnterEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.HandleWalkToStartDelayTimerUp
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::HandleWalkToStartDelayTimerUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "HandleWalkToStartDelayTimerUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.HandleWalkToWithCameraStartDelayTimerUp
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::HandleWalkToWithCameraStartDelayTimerUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "HandleWalkToWithCameraStartDelayTimerUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.IsReachWalkToLocation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsReached                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::IsReachWalkToLocation(bool* IsReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "IsReachWalkToLocation");

	Params::BP_Pl_NoceWalkToComponent_C_IsReachWalkToLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReached != nullptr)
		*IsReached = Parms.IsReached;
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.LerpCameraRotation
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::LerpCameraRotation(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "LerpCameraRotation");

	Params::BP_Pl_NoceWalkToComponent_C_LerpCameraRotation Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "ReceiveTick");

	Params::BP_Pl_NoceWalkToComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.RunToWaitDurationEnd
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::RunToWaitDurationEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "RunToWaitDurationEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.SetStopWalking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::SetStopWalking(bool IsStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "SetStopWalking");

	Params::BP_Pl_NoceWalkToComponent_C_SetStopWalking Parms{};

	Parms.IsStop = IsStop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.SetupInputVector
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::SetupInputVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "SetupInputVector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.SetupLimitInput
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCanSprint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::SetupLimitInput(bool InLimitInput, bool InCanSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "SetupLimitInput");

	Params::BP_Pl_NoceWalkToComponent_C_SetupLimitInput Parms{};

	Parms.InLimitInput = InLimitInput;
	Parms.InCanSprint = InCanSprint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.StartRunTo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRunToRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  InRunToDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::StartRunTo(const struct FRotator& InRunToRotation, double InRunToDuration, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "StartRunTo");

	Params::BP_Pl_NoceWalkToComponent_C_StartRunTo Parms{};

	Parms.InRunToRotation = std::move(InRunToRotation);
	Parms.InRunToDuration = InRunToDuration;
	Parms.InLimitInput = InLimitInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.StartWalkTo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStartDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InWalkToLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCameraLerpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::StartWalkTo(double InStartDelayTime, const struct FVector& InWalkToLocation, double InCameraLerpTime, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "StartWalkTo");

	Params::BP_Pl_NoceWalkToComponent_C_StartWalkTo Parms{};

	Parms.InStartDelayTime = InStartDelayTime;
	Parms.InWalkToLocation = std::move(InWalkToLocation);
	Parms.InCameraLerpTime = InCameraLerpTime;
	Parms.InLimitInput = InLimitInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.StartWalkToWithCameraRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStartDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  InCameraRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   InWalkToLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCameraLerpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::StartWalkToWithCameraRotation(double InStartDelayTime, const struct FRotator& InCameraRotation, const struct FVector& InWalkToLocation, double InCameraLerpTime, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "StartWalkToWithCameraRotation");

	Params::BP_Pl_NoceWalkToComponent_C_StartWalkToWithCameraRotation Parms{};

	Parms.InStartDelayTime = InStartDelayTime;
	Parms.InCameraRotation = std::move(InCameraRotation);
	Parms.InWalkToLocation = std::move(InWalkToLocation);
	Parms.InCameraLerpTime = InCameraLerpTime;
	Parms.InLimitInput = InLimitInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.StopWalkToLocation
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::StopWalkToLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "StopWalkToLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.UpdateForceStay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::UpdateForceStay(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "UpdateForceStay");

	Params::BP_Pl_NoceWalkToComponent_C_UpdateForceStay Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.UpdateRunTo
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::UpdateRunTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "UpdateRunTo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.UpdateWalkTo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::UpdateWalkTo(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "UpdateWalkTo");

	Params::BP_Pl_NoceWalkToComponent_C_UpdateWalkTo Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.UpdateWalkToWithCameraRotation
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Pl_NoceWalkToComponent_C::UpdateWalkToWithCameraRotation(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "UpdateWalkToWithCameraRotation");

	Params::BP_Pl_NoceWalkToComponent_C_UpdateWalkToWithCameraRotation Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.WalkToReturnToIdle
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::WalkToReturnToIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "WalkToReturnToIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_NoceWalkToComponent.BP_Pl_NoceWalkToComponent_C.WalkToWitchCameraReturnToLoco
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_Pl_NoceWalkToComponent_C::WalkToWitchCameraReturnToLoco()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_NoceWalkToComponent_C", "WalkToWitchCameraReturnToLoco");

	UObject::ProcessEvent(Func, nullptr);
}

}

