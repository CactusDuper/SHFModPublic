#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_EmBase_BaseControl

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GameNoce_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_EmBase_BaseControl.BPI_EmBase_BaseControl_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_EmBase_BaseControl_C final
{
public:
	void IEmBase_ApplySplineTarget(class USplineComponent* SplineComp);
	void IEmBase_ArriveSplineDestination();
	void IEmBase_CanFollowSpline(bool* FollowSpline);
	void IEmBase_ClearSplineTarget();
	void IEmBase_CustomEvent(class FName PatternName, double Parameter);
	void IEmBase_DebugBeahivourRemoveComp(class UActorComponent* In);
	void IEMBase_EnableMeshCollisionToPlayer(bool InEnable);
	void IEmBase_GetCurBaseMovementSpeed(double* BaseSpeed);
	void IEmBase_GetDefaultCapusleSetting(double* Radius, double* HalfHeight, TMap<ECollisionChannel, ECollisionResponse>* Response, ECollisionChannel* ObjectType);
	void IEmBase_GetDefaultSpawnMontage(class UAnimMontage** SpawnMontage);
	void IEmBase_GetIsCurrentOptimized(bool* Bool);
	void IEmBase_GetIsStrafe(bool* IsStrafe);
	void IEmBase_GetLocoTurnMontage(int32 Index_0, class UAnimMontage** outMTG);
	void IEmBase_GetPivotTurnMontage(double QuickTurnDegree, double LongTurnDegree, const struct FVector& TargetLoc, class UAnimMontage** TurnMontage);
	void IEmBase_GetSplineTarget(class USplineComponent** SplineComp);
	void IEmBase_GetStrafeDirectionMontage(ENoceHitReactionFourWayType Direction, class UAnimMontage** Montage);
	void IEmBase_GetUsedNavData(class ARecastNavMesh** NavData);
	void IEmBase_HandleDialogWhenDamaged(ENoceWinceType WinceType);
	void IEmBase_HandleHitByFriend(const struct FNoceAttackHitResult& NoceHitResult);
	void IEmBase_HandleSpawnerTeleportEvent(const struct FVector& DestLocation, const struct FRotator& DestRoration, bool* Result);
	void IEmBase_IsInPlayerCamDirection(bool* Bool);
	void IEmBase_IsPauseFollowSpline(bool* Pause);
	void IEmBase_OverrideLocoBaseSpeed(double BaseSpeed);
	void IEmBase_PlayMontageFromAnimBank(int32 BankID, int32 MotionID, double* duration);
	void IEmBase_RandomFient(double duration, double Dilation, class UAnimSequenceBase* Anim);
	void IEmBase_SendAudioTrigger(class FName AudioTriggerName);
	void IEmBase_SetEnableLookAt(bool Enable, const struct FNoceAILookAtSetting& LookAtSetting, bool* Result);
	void IEmBase_SetFaceToTargetInfo(const struct FNoceAIFaceToTargetInfo& Info);
	void IEmBase_SetFocusActor(bool IsStrafe, class AActor* FocusActor);
	void IEmBase_SetFocusPoint(bool IsStrafe, const struct FVector& FocusLoc);
	void IEmBase_SetHopeNotMove(bool HopeNotMove);
	void IEmBase_SetMaxLookDistance(bool Enable, double MaxLookDistance, bool* Result);
	void IEmBase_ShootProjectile(class FName PatternName);
	void IEmBase_TriggerLinkAbility(class ANoceCharacter* LinkTarget, class FName ExAbilityName);
	void IEmBase_UpdateAdditionalCollisionTransform();
	void IEmBase_UpdateBaseMovementSpeed(double BaseSpeed);
	void IEmBase_UpdateLocomotionOffset(const struct FVector& Offset);
	void IEmBase_UpdateModifiedMovementSpeed(double Modifier);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BPI_EmBase_BaseControl_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BPI_EmBase_BaseControl_C")
	}
	static class IBPI_EmBase_BaseControl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_EmBase_BaseControl_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IBPI_EmBase_BaseControl_C;

}

