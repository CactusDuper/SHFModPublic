#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pl_Base_NocePlayerCharacter

#include "Basic.hpp"

#include "BP_Pl_Base_NocePlayerCharacter_classes.hpp"
#include "BP_Pl_Base_NocePlayerCharacter_parameters.hpp"


namespace SDK
{

// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.Apply Claw GIn Sequence
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::Apply_Claw_GIn_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "Apply Claw GIn Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ApplyBattleStatusTimerTick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ApplyBattleStatusTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ApplyBattleStatusTimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ApplyBattling
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ApplyBattling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ApplyBattling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ApplyClawGStatusTimerTickInSequence
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ApplyClawGStatusTimerTickInSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ApplyClawGStatusTimerTickInSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ApplyDamageWithReaction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InHealthDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InWinceDamage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InMaxSanityDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InStaminaDamage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InMaxSanityDamageToHealthDamageRatio                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForceWince                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceDeathType                          InDeathType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckInvincible_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHealthDamageEffectedByDamageRatio                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHealthDamageApplyGutsCheck                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsLimitHealth                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckOmamoriKagami                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckSuperArmor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ApplyDamageWithReaction(double InHealthDamage, double InWinceDamage, double InMaxSanityDamage, double InStaminaDamage, float InMaxSanityDamageToHealthDamageRatio, bool IsForceWince, ENoceWinceType InWinceType, ENoceDeathType InDeathType, bool InCheckInvincible_, bool InHealthDamageEffectedByDamageRatio, bool InHealthDamageApplyGutsCheck, bool InIsLimitHealth, bool InCheckOmamoriKagami, bool InCheckSuperArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ApplyDamageWithReaction");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ApplyDamageWithReaction Parms{};

	Parms.InHealthDamage = InHealthDamage;
	Parms.InWinceDamage = InWinceDamage;
	Parms.InMaxSanityDamage = InMaxSanityDamage;
	Parms.InStaminaDamage = InStaminaDamage;
	Parms.InMaxSanityDamageToHealthDamageRatio = InMaxSanityDamageToHealthDamageRatio;
	Parms.IsForceWince = IsForceWince;
	Parms.InWinceType = InWinceType;
	Parms.InDeathType = InDeathType;
	Parms.InCheckInvincible_ = InCheckInvincible_;
	Parms.InHealthDamageEffectedByDamageRatio = InHealthDamageEffectedByDamageRatio;
	Parms.InHealthDamageApplyGutsCheck = InHealthDamageApplyGutsCheck;
	Parms.InIsLimitHealth = InIsLimitHealth;
	Parms.InCheckOmamoriKagami = InCheckOmamoriKagami;
	Parms.InCheckSuperArmor = InCheckSuperArmor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ApplyWinceType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ApplyWinceType(ENoceWinceType InWinceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ApplyWinceType");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ApplyWinceType Parms{};

	Parms.InWinceType = InWinceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.AudioDebugDraw
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::AudioDebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "AudioDebugDraw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyBattleStatusTimerTick
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyBattleStatusTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyBattleStatusTimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyBattling
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyBattling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyBattling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              CameraMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceSet                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyCameraMode(const struct FGameplayTag& CameraMode, bool WithInterpolation, bool ForceSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyCameraMode");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_ApplyCameraMode Parms{};

	Parms.CameraMode = std::move(CameraMode);
	Parms.WithInterpolation = WithInterpolation;
	Parms.ForceSet = ForceSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyCameraReset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyCameraReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyCameraReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyClawGInSequence
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyClawGInSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyClawGInSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyClawGStatusTimerTickInSequence
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyClawGStatusTimerTickInSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyClawGStatusTimerTickInSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyCustomCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              CameraMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyCustomCamera(const struct FGameplayTag& CameraMode, bool WithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyCustomCamera");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_ApplyCustomCamera Parms{};

	Parms.CameraMode = std::move(CameraMode);
	Parms.WithInterpolation = WithInterpolation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ApplyDamageWithReaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InHealthDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InWinceDamage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InMaxSanityDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InStaminaDamage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InMaxSanityDamageToHealthDamageRatio                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForceWince                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType                          InWinceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceDeathType                          InDeathType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckInvincible_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHealthDamageEffectedByDamageRatio                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHealthDamageApplyGutsCheck                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsLimitHealth                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckOmamoriKagami                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InCheckSuperArmor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ApplyDamageWithReaction(double InHealthDamage, double InWinceDamage, double InMaxSanityDamage, double InStaminaDamage, double InMaxSanityDamageToHealthDamageRatio, bool IsForceWince, ENoceWinceType InWinceType, ENoceDeathType InDeathType, bool InCheckInvincible_, bool InHealthDamageEffectedByDamageRatio, bool InHealthDamageApplyGutsCheck, bool InIsLimitHealth, bool InCheckOmamoriKagami, bool InCheckSuperArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ApplyDamageWithReaction");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_ApplyDamageWithReaction Parms{};

	Parms.InHealthDamage = InHealthDamage;
	Parms.InWinceDamage = InWinceDamage;
	Parms.InMaxSanityDamage = InMaxSanityDamage;
	Parms.InStaminaDamage = InStaminaDamage;
	Parms.InMaxSanityDamageToHealthDamageRatio = InMaxSanityDamageToHealthDamageRatio;
	Parms.IsForceWince = IsForceWince;
	Parms.InWinceType = InWinceType;
	Parms.InDeathType = InDeathType;
	Parms.InCheckInvincible_ = InCheckInvincible_;
	Parms.InHealthDamageEffectedByDamageRatio = InHealthDamageEffectedByDamageRatio;
	Parms.InHealthDamageApplyGutsCheck = InHealthDamageApplyGutsCheck;
	Parms.InIsLimitHealth = InIsLimitHealth;
	Parms.InCheckOmamoriKagami = InCheckOmamoriKagami;
	Parms.InCheckSuperArmor = InCheckSuperArmor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ClearWalkToLocationTimerHandle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ClearWalkToLocationTimerHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ClearWalkToLocationTimerHandle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DebugPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeathType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DeathDir                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DebugPlayerDeath(int32 DeathType, int32 DeathDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DebugPlayerDeath");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_DebugPlayerDeath Parms{};

	Parms.DeathType = DeathType;
	Parms.DeathDir = DeathDir;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DebugPlayerInvincbile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DebugPlayerInvincbile(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DebugPlayerInvincbile");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_DebugPlayerInvincbile Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DebugPlayerNoCostStamina
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DebugPlayerNoCostStamina(bool InEable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DebugPlayerNoCostStamina");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_DebugPlayerNoCostStamina Parms{};

	Parms.InEable = InEable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DebugPlayerNoStaminaTiredTimerTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DebugPlayerNoStaminaTiredTimerTick(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DebugPlayerNoStaminaTiredTimerTick");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_DebugPlayerNoStaminaTiredTimerTick Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DebugSetNoCostClawTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DebugSetNoCostClawTransform(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DebugSetNoCostClawTransform");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_DebugSetNoCostClawTransform Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DebugTogglePlayerInvincible
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DebugTogglePlayerInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DebugTogglePlayerInvincible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_DropWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_DropWeapon(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_DropWeapon");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_DropWeapon Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_EnableForceStay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_EnableForceStay(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_EnableForceStay");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_EnableForceStay Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_EnableMaterialsClaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_EnableMaterialsClaw(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_EnableMaterialsClaw");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_EnableMaterialsClaw Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_EnableMaterialsClawG
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_EnableMaterialsClawG(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_EnableMaterialsClawG");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_EnableMaterialsClawG Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_EndFaceTargetCameraMode
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_EndFaceTargetCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_EndFaceTargetCameraMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_EndWeddingCameraMode
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_EndWeddingCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_EndWeddingCameraMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_GetAudioProbeLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_GetAudioProbeLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_GetAudioProbeLocation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_GetAudioProbeLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_GetCameraViewRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_GetCameraViewRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_GetCameraViewRotation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_GetCameraViewRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_GetCounterAutoAimSearchInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutHalfAngle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_GetCounterAutoAimSearchInfo(double* OutRadius, double* OutHalfAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_GetCounterAutoAimSearchInfo");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_GetCounterAutoAimSearchInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;

	if (OutHalfAngle != nullptr)
		*OutHalfAngle = Parms.OutHalfAngle;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_HandleDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAttackHitResult&      InAttackHitResult                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_HandleDamage(const struct FNoceAttackHitResult& InAttackHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_HandleDamage");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_HandleDamage Parms{};

	Parms.InAttackHitResult = std::move(InAttackHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_HandleOnSlopeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsOnSlope                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_HandleOnSlopeChanged(bool InIsOnSlope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_HandleOnSlopeChanged");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_HandleOnSlopeChanged Parms{};

	Parms.InIsOnSlope = InIsOnSlope;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_InRealBattleStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_InRealBattleStatus(bool* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_InRealBattleStatus");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_InRealBattleStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_LockInputWithDuration
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAcceptAction                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAcceptAxis                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAcceptUIAction                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAcceptCamera                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InToken                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_LockInputWithDuration(bool InAcceptAction, bool InAcceptAxis, bool InAcceptUIAction, bool InAcceptCamera, class FName InToken, double InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_LockInputWithDuration");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_LockInputWithDuration Parms{};

	Parms.InAcceptAction = InAcceptAction;
	Parms.InAcceptAxis = InAcceptAxis;
	Parms.InAcceptUIAction = InAcceptUIAction;
	Parms.InAcceptCamera = InAcceptCamera;
	Parms.InToken = InToken;
	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_RemoveBattling
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_RemoveBattling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_RemoveBattling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ResetCustomCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ResetCustomCamera(bool WithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ResetCustomCamera");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_ResetCustomCamera Parms{};

	Parms.WithInterpolation = WithInterpolation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ResetToPreviousCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ResetToPreviousCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ResetToPreviousCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_SetCameraViewRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_SetCameraViewRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_SetCameraViewRotation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_SetCameraViewRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_SetClawFurWPOIntensityForCutscene
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_SetClawFurWPOIntensityForCutscene(double InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_SetClawFurWPOIntensityForCutscene");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_SetClawFurWPOIntensityForCutscene Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_SetCollisionResponseIgnorePawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ignore                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_SetCollisionResponseIgnorePawn(bool Ignore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_SetCollisionResponseIgnorePawn");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_SetCollisionResponseIgnorePawn Parms{};

	Parms.Ignore = Ignore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_SetPlayerIdleVarInt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IdleVarInt                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_SetPlayerIdleVarInt(int32 IdleVarInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_SetPlayerIdleVarInt");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_SetPlayerIdleVarInt Parms{};

	Parms.IdleVarInt = IdleVarInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_SetPlayerIdleVarTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  OverwriteIdleVarTime_0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_SetPlayerIdleVarTime(double OverwriteIdleVarTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_SetPlayerIdleVarTime");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_SetPlayerIdleVarTime Parms{};

	Parms.OverwriteIdleVarTime_0 = OverwriteIdleVarTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_ShowCloth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_ShowCloth(class FName InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_ShowCloth");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_ShowCloth Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_StartFaceTargetCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InTargetActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_StartFaceTargetCameraMode(class AActor* InTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_StartFaceTargetCameraMode");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_StartFaceTargetCameraMode Parms{};

	Parms.InTargetActor = InTargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_StartFaceTargetCameraModeWithRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_StartFaceTargetCameraModeWithRotation(const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_StartFaceTargetCameraModeWithRotation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_StartFaceTargetCameraModeWithRotation Parms{};

	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_StartRunTo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRunToRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  InRunToDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_StartRunTo(const struct FRotator& InRunToRotation, double InRunToDuration, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_StartRunTo");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_StartRunTo Parms{};

	Parms.InRunToRotation = std::move(InRunToRotation);
	Parms.InRunToDuration = InRunToDuration;
	Parms.InLimitInput = InLimitInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_StartWeddingCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_StartWeddingCameraMode(const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_StartWeddingCameraMode");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_StartWeddingCameraMode Parms{};

	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_StopWalking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_StopWalking(bool IsStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_StopWalking");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_StopWalking Parms{};

	Parms.IsStop = IsStop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_SwitchWeaponAudioType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InSwitchValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_SwitchWeaponAudioType(const struct FGameplayTag& InSwitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_SwitchWeaponAudioType");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_SwitchWeaponAudioType Parms{};

	Parms.InSwitchValue = std::move(InSwitchValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_TestHellModeDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNoceHellModeDataAsset*           InHellModeDataAsset                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_TestHellModeDamage(class UNoceHellModeDataAsset* InHellModeDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_TestHellModeDamage");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_TestHellModeDamage Parms{};

	Parms.InHellModeDataAsset = InHellModeDataAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_WalkToLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStartDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InTargetLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCameraLerpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_WalkToLocation(double InStartDelayTime, const struct FVector& InTargetLocation, double InCameraLerpTime, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_WalkToLocation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_WalkToLocation Parms{};

	Parms.InStartDelayTime = InStartDelayTime;
	Parms.InTargetLocation = std::move(InTargetLocation);
	Parms.InCameraLerpTime = InCameraLerpTime;
	Parms.InLimitInput = InLimitInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.BPI_WalkToWithCameraRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStartDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  InCameraRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   InWalkToLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCameraLerpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InLimitInput                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::BPI_WalkToWithCameraRotation(double InStartDelayTime, const struct FRotator& InCameraRotation, const struct FVector& InWalkToLocation, double InCameraLerpTime, bool InLimitInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "BPI_WalkToWithCameraRotation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_BPI_WalkToWithCameraRotation Parms{};

	Parms.InStartDelayTime = InStartDelayTime;
	Parms.InCameraRotation = std::move(InCameraRotation);
	Parms.InWalkToLocation = std::move(InWalkToLocation);
	Parms.InCameraLerpTime = InCameraLerpTime;
	Parms.InLimitInput = InLimitInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ClearLockInput
// (BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ClearLockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ClearLockInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DebugPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeathType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DeathDir                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::DebugPlayerDeath(int32 DeathType, int32 DeathDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DebugPlayerDeath");

	Params::BP_Pl_Base_NocePlayerCharacter_C_DebugPlayerDeath Parms{};

	Parms.DeathType = DeathType;
	Parms.DeathDir = DeathDir;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DebugPlayerInvincible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::DebugPlayerInvincible(bool InEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DebugPlayerInvincible");

	Params::BP_Pl_Base_NocePlayerCharacter_C_DebugPlayerInvincible Parms{};

	Parms.InEnabled = InEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DebugPlayerNoCostClawTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnbale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::DebugPlayerNoCostClawTransform(bool InEnbale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DebugPlayerNoCostClawTransform");

	Params::BP_Pl_Base_NocePlayerCharacter_C_DebugPlayerNoCostClawTransform Parms{};

	Parms.InEnbale = InEnbale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DebugPlayerNoCostStamina
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnbale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::DebugPlayerNoCostStamina(bool InEnbale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DebugPlayerNoCostStamina");

	Params::BP_Pl_Base_NocePlayerCharacter_C_DebugPlayerNoCostStamina Parms{};

	Parms.InEnbale = InEnbale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DebugPlayerNoStaminaTiredTimerTick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::DebugPlayerNoStaminaTiredTimerTick(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DebugPlayerNoStaminaTiredTimerTick");

	Params::BP_Pl_Base_NocePlayerCharacter_C_DebugPlayerNoStaminaTiredTimerTick Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DebugTogglePlayerInvincbile
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::DebugTogglePlayerInvincbile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DebugTogglePlayerInvincbile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DoEndLevelCameraMode
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::DoEndLevelCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DoEndLevelCameraMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.DoStartLevelCameraMode
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InCameraModeTag                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Pl_Base_NocePlayerCharacter_C::DoStartLevelCameraMode(const struct FGameplayTag& InCameraModeTag, const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "DoStartLevelCameraMode");

	Params::BP_Pl_Base_NocePlayerCharacter_C_DoStartLevelCameraMode Parms{};

	Parms.InCameraModeTag = std::move(InCameraModeTag);
	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.EndCapsuleShrink
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::EndCapsuleShrink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "EndCapsuleShrink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ExecuteUbergraph_BP_Pl_Base_NocePlayerCharacter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ExecuteUbergraph_BP_Pl_Base_NocePlayerCharacter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ExecuteUbergraph_BP_Pl_Base_NocePlayerCharacter");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ExecuteUbergraph_BP_Pl_Base_NocePlayerCharacter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.FindCounterTarget_BP
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InCounterHint                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFromRealInput                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class AActor* ABP_Pl_Base_NocePlayerCharacter_C::FindCounterTarget_BP(bool InCounterHint, bool InFromRealInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "FindCounterTarget_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_FindCounterTarget_BP Parms{};

	Parms.InCounterHint = InCounterHint;
	Parms.InFromRealInput = InFromRealInput;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.Handle Load Record
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::Handle_Load_Record()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "Handle Load Record");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleAxeDefenseCounter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNoceAttackHitResult&            InAttackHitResult                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// bool                                    InCheckOmamoriKagami                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   SkipDamage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   SkipHitPerform                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   SkipDamageAction                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType*                         OutWinceType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleAxeDefenseCounter(struct FNoceAttackHitResult& InAttackHitResult, bool InCheckOmamoriKagami, bool* SkipDamage, bool* SkipHitPerform, bool* SkipDamageAction, ENoceWinceType* OutWinceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleAxeDefenseCounter");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleAxeDefenseCounter Parms{};

	Parms.InAttackHitResult = std::move(InAttackHitResult);
	Parms.InCheckOmamoriKagami = InCheckOmamoriKagami;

	UObject::ProcessEvent(Func, &Parms);

	InAttackHitResult = std::move(Parms.InAttackHitResult);

	if (SkipDamage != nullptr)
		*SkipDamage = Parms.SkipDamage;

	if (SkipHitPerform != nullptr)
		*SkipHitPerform = Parms.SkipHitPerform;

	if (SkipDamageAction != nullptr)
		*SkipDamageAction = Parms.SkipDamageAction;

	if (OutWinceType != nullptr)
		*OutWinceType = Parms.OutWinceType;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleClawTransform_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InTransformToClawG                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleClawTransform_BP(bool InTransformToClawG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleClawTransform_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleClawTransform_BP Parms{};

	Parms.InTransformToClawG = InTransformToClawG;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAttackHitResult&      AttackHitResult                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleDamage(const struct FNoceAttackHitResult& AttackHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleDamage");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleDamage Parms{};

	Parms.AttackHitResult = std::move(AttackHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleEventModeChange
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleEventModeChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleEventModeChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleInteractInterruptedByDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleInteractInterruptedByDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleInteractInterruptedByDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleJust DodgeEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleJust_DodgeEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleJust DodgeEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleJustDodge_BP
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAttackHitResult&      InHitResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleJustDodge_BP(const struct FNoceAttackHitResult& InHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleJustDodge_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleJustDodge_BP Parms{};

	Parms.InHitResult = std::move(InHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleKatanaAutoDefense
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNoceAttackHitResult&            InHitResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// bool                                    InCheckOmamoriKagami                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutSkipDamage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutSkipHitPerform                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OutSkipDamageAction                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENoceWinceType*                         OutWinceType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleKatanaAutoDefense(struct FNoceAttackHitResult& InHitResult, bool InCheckOmamoriKagami, bool* OutSkipDamage, bool* OutSkipHitPerform, bool* OutSkipDamageAction, ENoceWinceType* OutWinceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleKatanaAutoDefense");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleKatanaAutoDefense Parms{};

	Parms.InHitResult = std::move(InHitResult);
	Parms.InCheckOmamoriKagami = InCheckOmamoriKagami;

	UObject::ProcessEvent(Func, &Parms);

	InHitResult = std::move(Parms.InHitResult);

	if (OutSkipDamage != nullptr)
		*OutSkipDamage = Parms.OutSkipDamage;

	if (OutSkipHitPerform != nullptr)
		*OutSkipHitPerform = Parms.OutSkipHitPerform;

	if (OutSkipDamageAction != nullptr)
		*OutSkipDamageAction = Parms.OutSkipDamageAction;

	if (OutWinceType != nullptr)
		*OutWinceType = Parms.OutWinceType;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleOnAttributeSetInitialized
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleOnAttributeSetInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleOnAttributeSetInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleOnPossessed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InPossessed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleOnPossessed(bool InPossessed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleOnPossessed");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleOnPossessed Parms{};

	Parms.InPossessed = InPossessed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleOnSlopeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsOnSlope                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleOnSlopeChanged(bool InIsOnSlope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleOnSlopeChanged");

	Params::BP_Pl_Base_NocePlayerCharacter_C_HandleOnSlopeChanged Parms{};

	Parms.InIsOnSlope = InIsOnSlope;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.HandleWaitForLevelReady_BP
// (Event, Public, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::HandleWaitForLevelReady_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "HandleWaitForLevelReady_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.InitializeHUD
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::InitializeHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "InitializeHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.InitializeSweetLight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::InitializeSweetLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "InitializeSweetLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.InpActEvt_Delete_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::InpActEvt_Delete_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "InpActEvt_Delete_K2Node_InputKeyEvent_2");

	Params::BP_Pl_Base_NocePlayerCharacter_C_InpActEvt_Delete_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.InpActEvt_PageDown_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::InpActEvt_PageDown_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "InpActEvt_PageDown_K2Node_InputKeyEvent_0");

	Params::BP_Pl_Base_NocePlayerCharacter_C_InpActEvt_PageDown_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.InpActEvt_PageUp_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::InpActEvt_PageUp_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "InpActEvt_PageUp_K2Node_InputKeyEvent_1");

	Params::BP_Pl_Base_NocePlayerCharacter_C_InpActEvt_PageUp_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.IsDamageTriggerJustDodge_BP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceAttackHitResult&      InHitResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Pl_Base_NocePlayerCharacter_C::IsDamageTriggerJustDodge_BP(const struct FNoceAttackHitResult& InHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "IsDamageTriggerJustDodge_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_IsDamageTriggerJustDodge_BP Parms{};

	Parms.InHitResult = std::move(InHitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.IsHandlingJustDodge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Pl_Base_NocePlayerCharacter_C::IsHandlingJustDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "IsHandlingJustDodge");

	Params::BP_Pl_Base_NocePlayerCharacter_C_IsHandlingJustDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.IsJustDodgeCollisionEnabled_BP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Pl_Base_NocePlayerCharacter_C::IsJustDodgeCollisionEnabled_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "IsJustDodgeCollisionEnabled_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_IsJustDodgeCollisionEnabled_BP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.IsReachTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsReached                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::IsReachTargetLocation(bool* IsReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "IsReachTargetLocation");

	Params::BP_Pl_Base_NocePlayerCharacter_C_IsReachTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReached != nullptr)
		*IsReached = Parms.IsReached;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.IsUsingBossCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::IsUsingBossCamera(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "IsUsingBossCamera");

	Params::BP_Pl_Base_NocePlayerCharacter_C_IsUsingBossCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.IsUsingOnSlopeCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::IsUsingOnSlopeCamera(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "IsUsingOnSlopeCamera");

	Params::BP_Pl_Base_NocePlayerCharacter_C_IsUsingOnSlopeCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.OnPreDamageHitHandler
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InHealthDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InMaxSanityDamage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::OnPreDamageHitHandler(float InHealthDamage, float InMaxSanityDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "OnPreDamageHitHandler");

	Params::BP_Pl_Base_NocePlayerCharacter_C_OnPreDamageHitHandler Parms{};

	Parms.InHealthDamage = InHealthDamage;
	Parms.InMaxSanityDamage = InMaxSanityDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.OnRagdollStatusChanged
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceRagdollStatus                      NewStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::OnRagdollStatusChanged(ENoceRagdollStatus NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "OnRagdollStatusChanged");

	Params::BP_Pl_Base_NocePlayerCharacter_C_OnRagdollStatusChanged Parms{};

	Parms.NewStatus = NewStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.OnWeaponChanged_BP
// (Event, Public, BlueprintEvent)
// Parameters:
// class ANoceWeapon*                      NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::OnWeaponChanged_BP(class ANoceWeapon* NewWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "OnWeaponChanged_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_OnWeaponChanged_BP Parms{};

	Parms.NewWeapon = NewWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.OnWeaponChangedForSweetLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ANoceWeapon*                      NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::OnWeaponChangedForSweetLight(class ANoceWeapon* NewWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "OnWeaponChangedForSweetLight");

	Params::BP_Pl_Base_NocePlayerCharacter_C_OnWeaponChangedForSweetLight Parms{};

	Parms.NewWeapon = NewWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ProcessCharMeshType_BP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNoceCharMeshDataRow&      InDataRow                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Pl_Base_NocePlayerCharacter_C::ProcessCharMeshType_BP(const struct FNoceCharMeshDataRow& InDataRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ProcessCharMeshType_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ProcessCharMeshType_BP Parms{};

	Parms.InDataRow = std::move(InDataRow);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ReceiveEndPlay");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ReceiveOnReviveEvent
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ReceiveOnReviveEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ReceiveOnReviveEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ReceivePossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ReceivePossessed");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ReceiveTick");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ReceiveUnpossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ReceiveUnpossessed");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.RemoveBattling
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::RemoveBattling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "RemoveBattling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.RemoveHUD
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::RemoveHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "RemoveHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ResetCustomCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWithInterpolation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ResetCustomCamera(bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ResetCustomCamera");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ResetCustomCamera Parms{};

	Parms.bWithInterpolation = bWithInterpolation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ResetToPreviousCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::ResetToPreviousCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ResetToPreviousCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.SaveCurrentCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::SaveCurrentCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "SaveCurrentCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.SetupAudioDistanceProbe
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::SetupAudioDistanceProbe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "SetupAudioDistanceProbe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.SetupWinceDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InAngle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsInvertWinceDirection                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::SetupWinceDirection(double InAngle, bool InIsInvertWinceDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "SetupWinceDirection");

	Params::BP_Pl_Base_NocePlayerCharacter_C_SetupWinceDirection Parms{};

	Parms.InAngle = InAngle;
	Parms.InIsInvertWinceDirection = InIsInvertWinceDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.ShowHidePlayer_BP
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    InShow                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InAdjustInput                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::ShowHidePlayer_BP(bool InShow, bool InAdjustInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "ShowHidePlayer_BP");

	Params::BP_Pl_Base_NocePlayerCharacter_C_ShowHidePlayer_BP Parms{};

	Parms.InShow = InShow;
	Parms.InAdjustInput = InAdjustInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.StartCapsuleShrink
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::StartCapsuleShrink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "StartCapsuleShrink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.StopCharacterMontage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::StopCharacterMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "StopCharacterMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.SwitchWeaponAudioType
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InSwitchValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::SwitchWeaponAudioType(const struct FGameplayTag& InSwitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "SwitchWeaponAudioType");

	Params::BP_Pl_Base_NocePlayerCharacter_C_SwitchWeaponAudioType Parms{};

	Parms.InSwitchValue = std::move(InSwitchValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UnregisterSweetLight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UnregisterSweetLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UnregisterSweetLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UpdateAudioDistanceProbeRatio
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UpdateAudioDistanceProbeRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UpdateAudioDistanceProbeRatio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.Use Camera Mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              CameraMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    WithInterpolation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceSet                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::Use_Camera_Mode(const struct FGameplayTag& CameraMode, bool WithInterpolation, bool ForceSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "Use Camera Mode");

	Params::BP_Pl_Base_NocePlayerCharacter_C_Use_Camera_Mode Parms{};

	Parms.CameraMode = std::move(CameraMode);
	Parms.WithInterpolation = WithInterpolation;
	Parms.ForceSet = ForceSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UseBossCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UseBossCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UseBossCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UseClawGCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UseClawGCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UseClawGCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UseCustomCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              CameraMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bWithInterpolation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Pl_Base_NocePlayerCharacter_C::UseCustomCamera(const struct FGameplayTag& CameraMode, bool bWithInterpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UseCustomCamera");

	Params::BP_Pl_Base_NocePlayerCharacter_C_UseCustomCamera Parms{};

	Parms.CameraMode = std::move(CameraMode);
	Parms.bWithInterpolation = bWithInterpolation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UseDefaultCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UseDefaultCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UseDefaultCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UseIndoorCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UseIndoorCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UseIndoorCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.UseOnSlopeCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::UseOnSlopeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "UseOnSlopeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Pl_Base_NocePlayerCharacter.BP_Pl_Base_NocePlayerCharacter_C.WaitForLevelReady
// (BlueprintCallable, BlueprintEvent)

void ABP_Pl_Base_NocePlayerCharacter_C::WaitForLevelReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Pl_Base_NocePlayerCharacter_C", "WaitForLevelReady");

	UObject::ProcessEvent(Func, nullptr);
}

}

