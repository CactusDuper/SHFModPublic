#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractBase

#include "Basic.hpp"

#include "BP_InteractBase_classes.hpp"
#include "BP_InteractBase_parameters.hpp"


namespace SDK
{

// Function BP_InteractBase.BP_InteractBase_C.CanPlayerInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InCheckEnemyInSight                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_InteractBase_C::CanPlayerInteract(bool InCheckEnemyInSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "CanPlayerInteract");

	Params::BP_InteractBase_C_CanPlayerInteract Parms{};

	Parms.InCheckEnemyInSight = InCheckEnemyInSight;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.ChangeHintSizeType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENoceAutoHintSize                       InType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::ChangeHintSizeType(ENoceAutoHintSize InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "ChangeHintSizeType");

	Params::BP_InteractBase_C_ChangeHintSizeType Parms{};

	Parms.InType = InType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.CreateHintBoxBasedOnBox
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent*&                   RefCollision                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent**                   SpawnedBox                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::CreateHintBoxBasedOnBox(class UBoxComponent*& RefCollision, class UBoxComponent** SpawnedBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "CreateHintBoxBasedOnBox");

	Params::BP_InteractBase_C_CreateHintBoxBasedOnBox Parms{};

	Parms.RefCollision = RefCollision;

	UObject::ProcessEvent(Func, &Parms);

	RefCollision = Parms.RefCollision;

	if (SpawnedBox != nullptr)
		*SpawnedBox = Parms.SpawnedBox;
}


// Function BP_InteractBase.BP_InteractBase_C.CreateHintCollision
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent*                    InBoxCollision                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::CreateHintCollision(class UBoxComponent* InBoxCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "CreateHintCollision");

	Params::BP_InteractBase_C_CreateHintCollision Parms{};

	Parms.InBoxCollision = InBoxCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.CreateHintWidget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_InteractBase_C::CreateHintWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "CreateHintWidget");

	Params::BP_InteractBase_C_CreateHintWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.CreateLookAtCollison
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent*                    InBoxCollision                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent**                   SpawnedBox                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::CreateLookAtCollison(class UBoxComponent* InBoxCollision, class UBoxComponent** SpawnedBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "CreateLookAtCollison");

	Params::BP_InteractBase_C_CreateLookAtCollison Parms{};

	Parms.InBoxCollision = InBoxCollision;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedBox != nullptr)
		*SpawnedBox = Parms.SpawnedBox;
}


// Function BP_InteractBase.BP_InteractBase_C.DrawAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::DrawAngle(double InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "DrawAngle");

	Params::BP_InteractBase_C_DrawAngle Parms{};

	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.DrawCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::DrawCollision(double InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "DrawCollision");

	Params::BP_InteractBase_C_DrawCollision Parms{};

	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.DrawHeight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::DrawHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "DrawHeight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.DrawLookAtCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::DrawLookAtCollision(double InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "DrawLookAtCollision");

	Params::BP_InteractBase_C_DrawLookAtCollision Parms{};

	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.ExecuteUbergraph_BP_InteractBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::ExecuteUbergraph_BP_InteractBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "ExecuteUbergraph_BP_InteractBase");

	Params::BP_InteractBase_C_ExecuteUbergraph_BP_InteractBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.FindExistingAutoHint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent**             Output                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::FindExistingAutoHint(class UPrimitiveComponent** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "FindExistingAutoHint");

	Params::BP_InteractBase_C_FindExistingAutoHint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function BP_InteractBase.BP_InteractBase_C.GetAutoHintBoxExtent
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         BoxExtent                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::GetAutoHintBoxExtent(struct FVector* BoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "GetAutoHintBoxExtent");

	Params::BP_InteractBase_C_GetAutoHintBoxExtent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BoxExtent != nullptr)
		*BoxExtent = std::move(Parms.BoxExtent);
}


// Function BP_InteractBase.BP_InteractBase_C.GetAutoHintRadius
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::GetAutoHintRadius(double* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "GetAutoHintRadius");

	Params::BP_InteractBase_C_GetAutoHintRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BP_InteractBase.BP_InteractBase_C.GetHintboxes
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBoxComponent*>            ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

TArray<class UBoxComponent*> ABP_InteractBase_C::GetHintboxes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "GetHintboxes");

	Params::BP_InteractBase_C_GetHintboxes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.GetHintSphere
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class USphereComponent* ABP_InteractBase_C::GetHintSphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "GetHintSphere");

	Params::BP_InteractBase_C_GetHintSphere Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.GetInteractableLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_InteractBase_C::GetInteractableLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "GetInteractableLocation");

	Params::BP_InteractBase_C_GetInteractableLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.GetLocalBoxCollision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent**                   ReturnedBox                                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::GetLocalBoxCollision(class UBoxComponent** ReturnedBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "GetLocalBoxCollision");

	Params::BP_InteractBase_C_GetLocalBoxCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnedBox != nullptr)
		*ReturnedBox = Parms.ReturnedBox;
}


// Function BP_InteractBase.BP_InteractBase_C.HandleBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::HandleBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "HandleBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.HideIcon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::HideIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "HideIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.IsHitActorMatched
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InHitActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Matched                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::IsHitActorMatched(class AActor* InHitActor, bool* Matched)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "IsHitActorMatched");

	Params::BP_InteractBase_C_IsHitActorMatched Parms{};

	Parms.InHitActor = InHitActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Matched != nullptr)
		*Matched = Parms.Matched;
}


// Function BP_InteractBase.BP_InteractBase_C.IsInteractionForbitBP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_InteractBase_C::IsInteractionForbitBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "IsInteractionForbitBP");

	Params::BP_InteractBase_C_IsInteractionForbitBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.IsWallEndValid
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InWallEndPoint                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCapsuleHalfHeight                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InCapsuleRadius                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InDrawDebug                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_InteractBase_C::IsWallEndValid(const struct FVector& InWallEndPoint, double InCapsuleHalfHeight, double InCapsuleRadius, bool InDrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "IsWallEndValid");

	Params::BP_InteractBase_C_IsWallEndValid Parms{};

	Parms.InWallEndPoint = std::move(InWallEndPoint);
	Parms.InCapsuleHalfHeight = InCapsuleHalfHeight;
	Parms.InCapsuleRadius = InCapsuleRadius;
	Parms.InDrawDebug = InDrawDebug;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractBase.BP_InteractBase_C.OnAutoHintBoxBeginOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_InteractBase_C::OnAutoHintBoxBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "OnAutoHintBoxBeginOverlap");

	Params::BP_InteractBase_C_OnAutoHintBoxBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.OnAutoHintBoxEndOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::OnAutoHintBoxEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "OnAutoHintBoxEndOverlap");

	Params::BP_InteractBase_C_OnAutoHintBoxEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.OnBeginLookAtOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::OnBeginLookAtOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "OnBeginLookAtOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.OnEndLookAtOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::OnEndLookAtOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "OnEndLookAtOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.OnLookAtCollisionBeginOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_InteractBase_C::OnLookAtCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "OnLookAtCollisionBeginOverlap");

	Params::BP_InteractBase_C_OnLookAtCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.OnLookAtCollisionEndOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::OnLookAtCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "OnLookAtCollisionEndOverlap");

	Params::BP_InteractBase_C_OnLookAtCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_InteractBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "ReceiveEndPlay");

	Params::BP_InteractBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.SetHintCollisionsType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECollisionEnabled                       NewType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractBase_C::SetHintCollisionsType(ECollisionEnabled NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "SetHintCollisionsType");

	Params::BP_InteractBase_C_SetHintCollisionsType Parms{};

	Parms.NewType = NewType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractBase.BP_InteractBase_C.ShowHintIcon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::ShowHintIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "ShowHintIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.ShowPromptIcon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::ShowPromptIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "ShowPromptIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.UnbindHintCollisionEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::UnbindHintCollisionEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "UnbindHintCollisionEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.UnbindLookAtCollisionEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::UnbindLookAtCollisionEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "UnbindLookAtCollisionEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractBase.BP_InteractBase_C.UpdateHintLocation
// (BlueprintCallable, BlueprintEvent)

void ABP_InteractBase_C::UpdateHintLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractBase_C", "UpdateHintLocation");

	UObject::ProcessEvent(Func, nullptr);
}

}

