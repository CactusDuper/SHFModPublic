#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeoCheater

#include "Basic.hpp"

#include "NeoCheater_classes.hpp"
#include "NeoCheater_parameters.hpp"


namespace SDK
{

// Function NeoCheater.NeoCheatFunctionLibrary.GetName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UNeoCheatFunctionLibrary::GetName(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NeoCheatFunctionLibrary", "GetName");

	Params::NeoCheatFunctionLibrary_GetName Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatFunctionLibrary.GetNumTexts
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             InStartNum                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InEndNum                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UNeoCheatFunctionLibrary::GetNumTexts(const int32 InStartNum, const int32 InEndNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NeoCheatFunctionLibrary", "GetNumTexts");

	Params::NeoCheatFunctionLibrary_GetNumTexts Parms{};

	Parms.InStartNum = InStartNum;
	Parms.InEndNum = InEndNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnAnalogValueChangedEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnAnalogValueChangedEvent(const struct FKey& InKey, const float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnAnalogValueChangedEvent");

	Params::NeoCheatInputWidget_OnAnalogValueChangedEvent Parms{};

	Parms.InKey = std::move(InKey);
	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnApplicationActivationChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsActivated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnApplicationActivationChanged(bool IsActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnApplicationActivationChanged");

	Params::NeoCheatInputWidget_OnApplicationActivationChanged Parms{};

	Parms.IsActivated = IsActivated;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnApplicationDeactivated
// (Final, Native, Protected)
// Parameters:
// bool                                    IsActivated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatInputWidget::OnApplicationDeactivated(bool IsActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnApplicationDeactivated");

	Params::NeoCheatInputWidget_OnApplicationDeactivated Parms{};

	Parms.IsActivated = IsActivated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatInputWidget.OnKeyDownEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnKeyDownEvent(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnKeyDownEvent");

	Params::NeoCheatInputWidget_OnKeyDownEvent Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnKeyUpEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnKeyUpEvent(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnKeyUpEvent");

	Params::NeoCheatInputWidget_OnKeyUpEvent Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnMouseButtonDoubleClickEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnMouseButtonDoubleClickEvent(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnMouseButtonDoubleClickEvent");

	Params::NeoCheatInputWidget_OnMouseButtonDoubleClickEvent Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnMouseButtonDownEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnMouseButtonDownEvent(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnMouseButtonDownEvent");

	Params::NeoCheatInputWidget_OnMouseButtonDownEvent Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnMouseButtonUpEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnMouseButtonUpEvent(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnMouseButtonUpEvent");

	Params::NeoCheatInputWidget_OnMouseButtonUpEvent Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.OnMouseWheelEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::OnMouseWheelEvent(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "OnMouseWheelEvent");

	Params::NeoCheatInputWidget_OnMouseWheelEvent Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatInputWidget.SetShowGamepad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsShow                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatInputWidget::SetShowGamepad(bool IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "SetShowGamepad");

	Params::NeoCheatInputWidget_SetShowGamepad Parms{};

	Parms.IsShow = IsShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatInputWidget.SetShowMouseKeyboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsShow                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatInputWidget::SetShowMouseKeyboard(bool IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "SetShowMouseKeyboard");

	Params::NeoCheatInputWidget_SetShowMouseKeyboard Parms{};

	Parms.IsShow = IsShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatInputWidget.SetWidgetZOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InWidgetZOrder                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatInputWidget::SetWidgetZOrder(int32 InWidgetZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "SetWidgetZOrder");

	Params::NeoCheatInputWidget_SetWidgetZOrder Parms{};

	Parms.InWidgetZOrder = InWidgetZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatInputWidget.UpdateVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatInputWidget::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatInputWidget", "UpdateVisibility");

	Params::NeoCheatInputWidget_UpdateVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatManager.AddNeoCheatExtension
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TSoftClassPtr<class UClass>       Class_0                                                (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatManager::AddNeoCheatExtension(const TSoftClassPtr<class UClass> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "AddNeoCheatExtension");

	Params::NeoCheatManager_AddNeoCheatExtension Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.ClearCheatConfig
// (Final, Exec, Native, Protected, BlueprintCallable)

void UNeoCheatManager::ClearCheatConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "ClearCheatConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.ExecComboCommand
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ComboCommandName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatManager::ExecComboCommand(const class FString& ComboCommandName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "ExecComboCommand");

	Params::NeoCheatManager_ExecComboCommand Parms{};

	Parms.ComboCommandName = std::move(ComboCommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.ExecuteCommand
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            CommandValue                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatManager::ExecuteCommand(const class FString& Command, const float& CommandValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "ExecuteCommand");

	Params::NeoCheatManager_ExecuteCommand Parms{};

	Parms.Command = std::move(Command);
	Parms.CommandValue = CommandValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.FindNeoCheatExtension
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TSubclassOf<class UNeoCheatManagerExtension>Class_0                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNeoCheatManagerExtension*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNeoCheatManagerExtension* UNeoCheatManager::FindNeoCheatExtension(const TSubclassOf<class UNeoCheatManagerExtension> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "FindNeoCheatExtension");

	Params::NeoCheatManager_FindNeoCheatExtension Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatManager.GetCheatFunctionsWithCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FNeoCheatCategoryStruct>* CheatCommands                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UNeoCheatManager::GetCheatFunctionsWithCategory(TArray<struct FNeoCheatCategoryStruct>* CheatCommands)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "GetCheatFunctionsWithCategory");

	Params::NeoCheatManager_GetCheatFunctionsWithCategory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CheatCommands != nullptr)
		*CheatCommands = std::move(Parms.CheatCommands);
}


// Function NeoCheater.NeoCheatManager.GetPopupWindow
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class UNeoCheatMenuPopupWidget*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNeoCheatMenuPopupWidget* UNeoCheatManager::GetPopupWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "GetPopupWindow");

	Params::NeoCheatManager_GetPopupWindow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatManager.OnEndPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatManager::OnEndPlay(class AActor* Player, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "OnEndPlay");

	Params::NeoCheatManager_OnEndPlay Parms{};

	Parms.Player = Player;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.OnPopWindowClosed
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UNeoCheatManager::OnPopWindowClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "OnPopWindowClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.RemoveNeoCheatExtension
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TSoftClassPtr<class UClass>       Class_0                                                (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatManager::RemoveNeoCheatExtension(const TSoftClassPtr<class UClass> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "RemoveNeoCheatExtension");

	Params::NeoCheatManager_RemoveNeoCheatExtension Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.SaveCheatConfig
// (Final, Exec, Native, Protected, BlueprintCallable)

void UNeoCheatManager::SaveCheatConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "SaveCheatConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatManager.ToggleDebugMenu
// (Native, Public, BlueprintCallable)

void UNeoCheatManager::ToggleDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatManager", "ToggleDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuArrowBtn.OnDeselect
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuArrowBtn::OnDeselect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuArrowBtn", "OnDeselect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuArrowBtn.OnSelect
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuArrowBtn::OnSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuArrowBtn", "OnSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuConfirmBtn.OnDecide
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuConfirmBtn::OnDecide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuConfirmBtn", "OnDecide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuConfirmBtn.OnDeselect
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuConfirmBtn::OnDeselect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuConfirmBtn", "OnDeselect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuConfirmBtn.OnSelect
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuConfirmBtn::OnSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuConfirmBtn", "OnSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuConfirmBtn.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UNeoCheatMenuConfirmBtn::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuConfirmBtn", "SetText");

	Params::NeoCheatMenuConfirmBtn_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.GetCurrentIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNeoCheatMenuMultiArrowBtn::GetCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "GetCurrentIndex");

	Params::NeoCheatMenuMultiArrowBtn_GetCurrentIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.OnDeselect
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::OnDeselect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "OnDeselect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.OnSelect
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::OnSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "OnSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.SelectNext
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::SelectNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "SelectNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.SelectNextPage
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::SelectNextPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "SelectNextPage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.SelectPrevious
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::SelectPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "SelectPrevious");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.SelectPreviousPage
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::SelectPreviousPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "SelectPreviousPage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.SetDynamicOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FNeoCheatPopWindowDynamicOptionParam&Option                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32&                            Index_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatMenuMultiArrowBtn::SetDynamicOption(const struct FNeoCheatPopWindowDynamicOptionParam& Option, const int32& Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "SetDynamicOption");

	Params::NeoCheatMenuMultiArrowBtn_SetDynamicOption Parms{};

	Parms.Option = std::move(Option);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.SetOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FNeoCheatPopWindowOptionParam&Option                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UNeoCheatMenuMultiArrowBtn::SetOption(const struct FNeoCheatPopWindowOptionParam& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "SetOption");

	Params::NeoCheatMenuMultiArrowBtn_SetOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.UpdateDynamicOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            Index_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatMenuMultiArrowBtn::UpdateDynamicOption(const int32& Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "UpdateDynamicOption");

	Params::NeoCheatMenuMultiArrowBtn_UpdateDynamicOption Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuMultiArrowBtn.UpdateText
// (Final, Native, Public, BlueprintCallable)

void UNeoCheatMenuMultiArrowBtn::UpdateText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuMultiArrowBtn", "UpdateText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.DeselectCurrentItem
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UNeoCheatMenuPopupWidget::DeselectCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "DeselectCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.Hide
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "Hide");

	Params::NeoCheatMenuPopupWidget_Hide Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsCancel
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsCancel(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsCancel");

	Params::NeoCheatMenuPopupWidget_IsCancel Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsConfirm
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsConfirm(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsConfirm");

	Params::NeoCheatMenuPopupWidget_IsConfirm Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsDown
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsDown(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsDown");

	Params::NeoCheatMenuPopupWidget_IsDown Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsFastLeft
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsFastLeft(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsFastLeft");

	Params::NeoCheatMenuPopupWidget_IsFastLeft Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsFastRight
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsFastRight(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsFastRight");

	Params::NeoCheatMenuPopupWidget_IsFastRight Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsLeft
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsLeft(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsLeft");

	Params::NeoCheatMenuPopupWidget_IsLeft Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsRight
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsRight(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsRight");

	Params::NeoCheatMenuPopupWidget_IsRight Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.IsUp
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::IsUp(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "IsUp");

	Params::NeoCheatMenuPopupWidget_IsUp Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.OnFadeOutFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UNeoCheatMenuPopupWidget::OnFadeOutFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "OnFadeOutFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.SelectCurrentItem
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UNeoCheatMenuPopupWidget::SelectCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "SelectCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.Show
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNeoCheatPopWindowInputParam&InputParam                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::Show(const struct FNeoCheatPopWindowInputParam& InputParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "Show");

	Params::NeoCheatMenuPopupWidget_Show Parms{};

	Parms.InputParam = std::move(InputParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatMenuPopupWidget.ShowDynamicOptions
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNeoCheatPopWindowDynamicInputParam&InputParam                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatMenuPopupWidget::ShowDynamicOptions(const struct FNeoCheatPopWindowDynamicInputParam& InputParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatMenuPopupWidget", "ShowDynamicOptions");

	Params::NeoCheatMenuPopupWidget_ShowDynamicOptions Parms{};

	Parms.InputParam = std::move(InputParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatSampleManager.OnAddEnemy5WindowDecided
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FNeoCheatPopWindowOutputParam&Result                                                 (Parm, NativeAccessSpecifierPublic)

void UNeoCheatSampleManager::OnAddEnemy5WindowDecided(const struct FNeoCheatPopWindowOutputParam& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "OnAddEnemy5WindowDecided");

	Params::NeoCheatSampleManager_OnAddEnemy5WindowDecided Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.OnAddEnemy6WindowDecided
// (Final, Native, Public)
// Parameters:
// const struct FNeoCheatPopWindowOutputParam&Result                                                 (Parm, NativeAccessSpecifierPublic)

void UNeoCheatSampleManager::OnAddEnemy6WindowDecided(const struct FNeoCheatPopWindowOutputParam& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "OnAddEnemy6WindowDecided");

	Params::NeoCheatSampleManager_OnAddEnemy6WindowDecided Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Enemy1
// (Final, Exec, Native, Public, BlueprintCallable)

void UNeoCheatSampleManager::Test_Enemy1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Enemy1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Enemy2
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatSampleManager::Test_Enemy2(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Enemy2");

	Params::NeoCheatSampleManager_Test_Enemy2 Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Enemy3
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatSampleManager::Test_Enemy3(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Enemy3");

	Params::NeoCheatSampleManager_Test_Enemy3 Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Enemy4
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatSampleManager::Test_Enemy4(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Enemy4");

	Params::NeoCheatSampleManager_Test_Enemy4 Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Enemy5
// (Final, Exec, Native, Public, BlueprintCallable)

void UNeoCheatSampleManager::Test_Enemy5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Enemy5");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Enemy6
// (Final, Exec, Native, Public, BlueprintCallable)

void UNeoCheatSampleManager::Test_Enemy6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Enemy6");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Player1
// (Final, Exec, Native, Public, BlueprintCallable)

void UNeoCheatSampleManager::Test_Player1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Player1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Player2
// (Final, Exec, Native, Public, BlueprintCallable)

void UNeoCheatSampleManager::Test_Player2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Player2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatSampleManager.Test_Player3
// (Final, Exec, Native, Public, BlueprintCallable)

void UNeoCheatSampleManager::Test_Player3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatSampleManager", "Test_Player3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.CleanUp
// (Final, Native, Protected, BlueprintCallable)

void UNeoCheatUIExtension::CleanUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "CleanUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.CreateInputWidget
// (Final, Native, Protected, BlueprintCallable)

void UNeoCheatUIExtension::CreateInputWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "CreateInputWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.Debug_CheckTexts
// (Final, Exec, Native, Protected, BlueprintCallable)

void UNeoCheatUIExtension::Debug_CheckTexts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "Debug_CheckTexts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.Debug_GamepadInput
// (Final, Exec, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    InVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatUIExtension::Debug_GamepadInput(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "Debug_GamepadInput");

	Params::NeoCheatUIExtension_Debug_GamepadInput Parms{};

	Parms.InVisible = InVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.Debug_MouseKeyboardInput
// (Final, Exec, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    InVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatUIExtension::Debug_MouseKeyboardInput(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "Debug_MouseKeyboardInput");

	Params::NeoCheatUIExtension_Debug_MouseKeyboardInput Parms{};

	Parms.InVisible = InVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.Debug_ShowTextID
// (Final, Exec, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ShowID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNeoCheatUIExtension::Debug_ShowTextID(bool ShowID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "Debug_ShowTextID");

	Params::NeoCheatUIExtension_Debug_ShowTextID Parms{};

	Parms.ShowID = ShowID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.HideText
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatUIExtension::HideText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "HideText");

	Params::NeoCheatUIExtension_HideText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NeoCheater.NeoCheatUIExtension.OnPopWindowClosed
// (Final, Native, Protected)

void UNeoCheatUIExtension::OnPopWindowClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "OnPopWindowClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NeoCheater.NeoCheatUIExtension.ShowText
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeoCheatUIExtension::ShowText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeoCheatUIExtension", "ShowText");

	Params::NeoCheatUIExtension_ShowText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

