#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MultipleConditionInteract

#include "Basic.hpp"

#include "BP_MultipleConditionInteract_classes.hpp"
#include "BP_MultipleConditionInteract_parameters.hpp"


namespace SDK
{

// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_MultipleConditionInteract_C::BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_MultipleConditionInteract_C_BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MultipleConditionInteract_C::BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_MultipleConditionInteract_C_BndEvt__BP_ConditionInteract_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.CanInteractWithPawnBP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractorPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_MultipleConditionInteract_C::CanInteractWithPawnBP(class AActor* InteractorPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "CanInteractWithPawnBP");

	Params::BP_MultipleConditionInteract_C_CanInteractWithPawnBP Parms{};

	Parms.InteractorPawn = InteractorPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.CheckAllConditionHandlers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MultipleConditionInteract_C::CheckAllConditionHandlers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "CheckAllConditionHandlers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.CheckConditionStruct
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FProgressCondition&        ProgressCondition_0                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_MultipleConditionInteract_C::CheckConditionStruct(const struct FProgressCondition& ProgressCondition_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "CheckConditionStruct");

	Params::BP_MultipleConditionInteract_C_CheckConditionStruct Parms{};

	Parms.ProgressCondition_0 = std::move(ProgressCondition_0);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.ExecuteInstantFeedback
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_MultipleConditionInteract_C::ExecuteInstantFeedback(class AActor* InteractPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "ExecuteInstantFeedback");

	Params::BP_MultipleConditionInteract_C_ExecuteInstantFeedback Parms{};

	Parms.InteractPawn = InteractPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.ExecuteUbergraph_BP_MultipleConditionInteract
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MultipleConditionInteract_C::ExecuteUbergraph_BP_MultipleConditionInteract(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "ExecuteUbergraph_BP_MultipleConditionInteract");

	Params::BP_MultipleConditionInteract_C_ExecuteUbergraph_BP_MultipleConditionInteract Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.GetConditionDebugString
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString*                          Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_MultipleConditionInteract_C::GetConditionDebugString(class FString* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "GetConditionDebugString");

	Params::BP_MultipleConditionInteract_C_GetConditionDebugString Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.GetDebugTriggerInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_MultipleConditionInteract_C::GetDebugTriggerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "GetDebugTriggerInfo");

	Params::BP_MultipleConditionInteract_C_GetDebugTriggerInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MultipleConditionInteract.BP_MultipleConditionInteract_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MultipleConditionInteract_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultipleConditionInteract_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

