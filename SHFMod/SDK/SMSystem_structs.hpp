#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SMSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum SMSystem.ESMLogType
// NumValues: 0x0004
enum class ESMLogType : uint8
{
	Note                                     = 0,
	Warning                                  = 1,
	Error                                    = 2,
	ESMLogType_MAX                           = 3,
};

// Enum SMSystem.ESMNetworkConfigurationType
// NumValues: 0x0004
enum class ESMNetworkConfigurationType : uint8
{
	SM_Client                                = 0,
	SM_Server                                = 1,
	SM_ClientAndServer                       = 2,
	SM_MAX                                   = 3,
};

// Enum SMSystem.ESMExposedFunctionExecutionType
// NumValues: 0x0004
enum class ESMExposedFunctionExecutionType : uint8
{
	SM_Graph                                 = 0,
	SM_NodeInstance                          = 1,
	SM_None                                  = 2,
	SM_MAX                                   = 3,
};

// Enum SMSystem.ESMConditionalEvaluationType
// NumValues: 0x0005
enum class ESMConditionalEvaluationType : uint8
{
	SM_Graph                                 = 0,
	SM_NodeInstance                          = 1,
	SM_AlwaysFalse                           = 2,
	SM_AlwaysTrue                            = 3,
	SM_MAX                                   = 4,
};

// Enum SMSystem.ESMStateMachineInput
// NumValues: 0x000B
enum class ESMStateMachineInput : uint8
{
	Disabled                                 = 0,
	UseContextController                     = 1,
	Player0                                  = 2,
	Player1                                  = 3,
	Player2                                  = 4,
	Player3                                  = 5,
	Player4                                  = 6,
	Player5                                  = 7,
	Player6                                  = 8,
	Player7                                  = 9,
	ESMStateMachineInput_MAX                 = 10,
};

// Enum SMSystem.ESMNodeInput
// NumValues: 0x000C
enum class ESMNodeInput : uint8
{
	Disabled                                 = 0,
	UseOwningStateMachine                    = 1,
	UseContextController                     = 2,
	Player0                                  = 3,
	Player1                                  = 4,
	Player2                                  = 5,
	Player3                                  = 6,
	Player4                                  = 7,
	Player5                                  = 8,
	Player6                                  = 9,
	Player7                                  = 10,
	ESMNodeInput_MAX                         = 11,
};

// Enum SMSystem.ESMExecutionEnvironment
// NumValues: 0x0003
enum class ESMExecutionEnvironment : uint8
{
	EditorExecution                          = 0,
	GameExecution                            = 1,
	ESMExecutionEnvironment_MAX              = 2,
};

// Enum SMSystem.ESMValidEditorNode
// NumValues: 0x0003
enum class ESMValidEditorNode : uint8
{
	IsValidEditorNode                        = 0,
	IsNotValidEditorNode                     = 1,
	ESMValidEditorNode_MAX                   = 2,
};

// Enum SMSystem.ESMCompilerLogType
// NumValues: 0x0004
enum class ESMCompilerLogType : uint8
{
	Note                                     = 0,
	Warning                                  = 1,
	Error                                    = 2,
	ESMCompilerLogType_MAX                   = 3,
};

// Enum SMSystem.ESMThreadMode
// NumValues: 0x0003
enum class ESMThreadMode : uint8
{
	Blocking                                 = 0,
	Async                                    = 1,
	ESMThreadMode_MAX                        = 2,
};

// Enum SMSystem.ESMTransactionType
// NumValues: 0x0009
enum class ESMTransactionType : uint8
{
	SM_Unknown                               = 0,
	SM_Transition                            = 1,
	SM_State                                 = 2,
	SM_FullSync                              = 3,
	SM_Start                                 = 4,
	SM_Stop                                  = 5,
	SM_Initialize                            = 6,
	SM_Shutdown                              = 7,
	SM_MAX                                   = 8,
};

// Enum SMSystem.ESMOptionalBool
// NumValues: 0x0004
enum class ESMOptionalBool : uint8
{
	Unset                                    = 0,
	IsFalse                                  = 1,
	IsTrue                                   = 2,
	ESMOptionalBool_MAX                      = 3,
};

struct FSMNode_Base;

// ScriptStruct SMSystem.SMGraphProperty_Base_Runtime
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FSMGraphProperty_Base_Runtime
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FSMGraphProperty_Base_Runtime* LinkedProperty;
	struct FGuid                                  Guid;                                              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  OwnerGuid;                                         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsDefaultValueOnly : 1;                           // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	/** The node this graph property belongs to. */
	FSMNode_Base* OwningNode;
};
DUMPER7_ASSERTS_FSMGraphProperty_Base_Runtime;

// ScriptStruct SMSystem.SMGraphPropertyTemplateOwner
// 0x0010 (0x0010 - 0x0000)
struct FSMGraphPropertyTemplateOwner final
{
public:
	TArray<struct FSMGraphProperty_Base_Runtime>  VariableGraphProperties;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMGraphPropertyTemplateOwner;

struct FSMNode_FunctionHandlers;

// ScriptStruct SMSystem.SMNode_Base
// 0x0138 (0x0138 - 0x0000)
struct FSMNode_Base
{
public:
	uint8                                         Pad_0[8];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FSMNode_FunctionHandlers* FunctionHandlers;
	float                                         TimeInState;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInEndState;                                     // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasUpdated;                                       // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DuplicateId;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NodePosition;                                      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHasInputEvents : 1;                               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  OwnerGuid;                                         // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  PathGuid;                                          // 0x0054(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	/** The node directly owning this node. Should be a StateMachine. */
	FSMNode_Base* OwnerNode;
	class FString                                 NodeName;                                          // 0x0070(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TemplateName;                                      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           StackTemplateNames;                                // 0x0088(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class USMNodeInstance*>                StackNodeInstances;                                // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UObject>>            NodeStackClasses;                                  // 0x00A8(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class USMInstance*                            OwningInstance;                                    // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USMNodeInstance*                        NodeInstance;                                      // 0x00C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	/** Custom graph structs with special handling. Dynamically loaded on initialization from embedded structs. */
	TArray<FSMGraphProperty_Base_Runtime*> GraphProperties;
	TMap<struct FGuid, struct FSMGraphPropertyTemplateOwner> TemplateVariableGraphProperties;        // 0x00D8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UObject>                    NodeInstanceClass;                                 // 0x0128(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	/** Last recorded active time in state from the server. */
	float ServerTimeInState;

	uint8 bHaveGraphFunctionsInitialized : 1;
	uint8 bIsInitializedForRun : 1;
	uint8 bIsActive : 1;
};
DUMPER7_ASSERTS_FSMNode_Base;

struct FSMTransition;

// ScriptStruct SMSystem.SMState_Base
// 0x0050 (0x0188 - 0x0138)
struct FSMState_Base : public FSMNode_Base
{
public:
	uint8                                         bIsRootNode : 1;                                   // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysUpdate : 1;                                 // 0x0138(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalTransitionsOnStart : 1;                       // 0x0138(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableTickTransitionEvaluation : 1;              // 0x0138(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStayActiveOnStateChange : 1;                      // 0x0138(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowParallelReentry : 1;                         // 0x0138(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanBeEndState : 1;                                // 0x0138(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	/** The last active state before this state. Resets on entry. */
	FSMState_Base* PreviousActiveState;

	/** The last active transition before this state. Resets on entry. */
	FSMTransition* PreviousActiveTransition;

	/** UTC time the state started. */
	FDateTime StartTime;

	/** UTC time the state ended. */
	FDateTime EndTime;

	const FSMTransition* NextTransition;
	TArray<FSMTransition*> IncomingTransitions;
	TArray<FSMTransition*> OutgoingTransitions;
};
DUMPER7_ASSERTS_FSMState_Base;

// ScriptStruct SMSystem.SMNodeClassRule
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSMNodeClassRule
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIncludeChildren;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNOT;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FSMNodeClassRule;

// ScriptStruct SMSystem.SMInfo_Base
// 0x0060 (0x0060 - 0x0000)
struct FSMInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NodeName;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerGuid;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NodeGuid;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerNodeGuid;                                     // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMNodeInstance*                        NodeInstance;                                      // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMInfo_Base;

// ScriptStruct SMSystem.SMStateHistory
// 0x0020 (0x0020 - 0x0000)
struct FSMStateHistory final
{
public:
	struct FGuid                                  StateGuid;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimeInState;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMStateHistory;

// ScriptStruct SMSystem.SMTransitionInfo
// 0x0038 (0x0098 - 0x0060)
struct FSMTransitionInfo final : public FSMInfo_Base
{
public:
	struct FGuid                                  FromStateGuid;                                     // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ToStateGuid;                                       // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastNetworkTimestamp;                              // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const FSMTransition* OwningTransition;
};
DUMPER7_ASSERTS_FSMTransitionInfo;

// ScriptStruct SMSystem.SMStateInfo
// 0x0020 (0x0080 - 0x0060)
struct FSMStateInfo final : public FSMInfo_Base
{
public:
	TArray<struct FSMTransitionInfo>              OutgoingTransitions;                               // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsEndState;                                       // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const FSMState_Base* OwningState;
};
DUMPER7_ASSERTS_FSMStateInfo;

// ScriptStruct SMSystem.SMConduit
// 0x0008 (0x0190 - 0x0188)
struct FSMConduit final : public FSMState_Base
{
public:
	uint8                                         bCanEnterTransition : 1;                           // 0x0188(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvaluate : 1;                                  // 0x0188(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalWithTransitions : 1;                          // 0x0188(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESMConditionalEvaluationType                  ConditionalEvaluationType;                         // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FSMConduit;

// ScriptStruct SMSystem.SMExposedFunctionHandler
// 0x0018 (0x0018 - 0x0000)
struct FSMExposedFunctionHandler final
{
public:
	class FName                                   BoundFunction;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESMExposedFunctionExecutionType               ExecutionType;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFunction*                              Function;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
DUMPER7_ASSERTS_FSMExposedFunctionHandler;

// ScriptStruct SMSystem.SMExposedFunctionContainer
// 0x0010 (0x0010 - 0x0000)
struct FSMExposedFunctionContainer final
{
public:
	TArray<struct FSMExposedFunctionHandler>      ExposedFunctionHandlers;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMExposedFunctionContainer;

struct FSMExposedNodeFunctions;

// ScriptStruct SMSystem.SMNode_FunctionHandlers
// 0x0048 (0x0048 - 0x0000)
struct FSMNode_FunctionHandlers
{
public:
	TArray<struct FSMExposedFunctionHandler>      NodeInitializedGraphEvaluators;                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      NodeShutdownGraphEvaluators;                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      OnRootStateMachineStartedGraphEvaluator;           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      OnRootStateMachineStoppedGraphEvaluator;           // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	/** A pointer back to the owning exposed node functions. */
	struct FSMExposedNodeFunctions* ExposedFunctionsOwner;
};
DUMPER7_ASSERTS_FSMNode_FunctionHandlers;

// ScriptStruct SMSystem.SMTransaction_Base
// 0x0003 (0x0003 - 0x0000)
struct FSMTransaction_Base
{
public:
	ENetRole ServerRemoteRoleAtQueueTime;
	ESMTransactionType                            TransactionType;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOriginatedFromServer : 1;                         // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	/** If this client created the call. Only valid for owning client. */
	uint8 bOriginatedFromThisClient : 1;

	/** If this transaction has run locally. */
	uint8 bRanLocally : 1;
};
DUMPER7_ASSERTS_FSMTransaction_Base;

// ScriptStruct SMSystem.SMFullSyncStateTransaction
// 0x0015 (0x0018 - 0x0003)
struct FSMFullSyncStateTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BaseGuid;                                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMFullSyncStateTransaction;

// ScriptStruct SMSystem.SMState_FunctionHandlers
// 0x0030 (0x0078 - 0x0048)
struct FSMState_FunctionHandlers final : public FSMNode_FunctionHandlers
{
public:
	TArray<struct FSMExposedFunctionHandler>      BeginStateGraphEvaluator;                          // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      UpdateStateGraphEvaluator;                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      EndStateGraphEvaluator;                            // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMState_FunctionHandlers;

// ScriptStruct SMSystem.SMActivateStateTransaction
// 0x0019 (0x001C - 0x0003)
struct FSMActivateStateTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BaseGuid;                                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsActive : 1;                                     // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSetAllParents : 1;                                // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FSMActivateStateTransaction;

// ScriptStruct SMSystem.SMConduit_FunctionHandlers
// 0x0020 (0x0068 - 0x0048)
struct FSMConduit_FunctionHandlers final : public FSMNode_FunctionHandlers
{
public:
	TArray<struct FSMExposedFunctionHandler>      CanEnterConduitGraphEvaluator;                     // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      ConduitEnteredGraphEvaluator;                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMConduit_FunctionHandlers;

// ScriptStruct SMSystem.SMTransition_FunctionHandlers
// 0x0040 (0x0088 - 0x0048)
struct FSMTransition_FunctionHandlers final : public FSMNode_FunctionHandlers
{
public:
	TArray<struct FSMExposedFunctionHandler>      CanEnterTransitionGraphEvaluator;                  // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionEnteredGraphEvaluator;                   // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionPreEvaluateGraphEvaluator;               // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionPostEvaluateGraphEvaluator;              // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMTransition_FunctionHandlers;

// ScriptStruct SMSystem.SMExposedNodeFunctions
// 0x0080 (0x0080 - 0x0000)
struct FSMExposedNodeFunctions final
{
public:
	TArray<struct FSMState_FunctionHandlers>      FSMState_FunctionHandlers;                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMConduit_FunctionHandlers>    FSMConduit_FunctionHandlers;                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMTransition_FunctionHandlers> FSMTransition_FunctionHandlers;                    // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FSMExposedFunctionContainer> GraphPropertyFunctionHandlers;            // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMExposedNodeFunctions;

// ScriptStruct SMSystem.SMGraphProperty_Runtime
// 0x0000 (0x0048 - 0x0048)
struct FSMGraphProperty_Runtime final : public FSMGraphProperty_Base_Runtime
{
};
DUMPER7_ASSERTS_FSMGraphProperty_Runtime;

// ScriptStruct SMSystem.SMGraphProperty_Base
// 0x00C0 (0x0108 - 0x0048)
struct FSMGraphProperty_Base : public FSMGraphProperty_Base_Runtime
{
public:
	class FName                                   VariableName;                                      // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEdGraphPinType                        VariableType;                                      // 0x0050(0x0058)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMemberReference                       MemberReference;                                   // 0x00A8(0x0038)(NativeAccessSpecifierPublic)
	bool                                          bIsInArray;                                        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x00E1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x00E2(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x1];                                       // 0x00E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GuidUnmodified;                                    // 0x00E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  TemplateGuid;                                      // 0x00F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GuidIndex;                                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
DUMPER7_ASSERTS_FSMGraphProperty_Base;

// ScriptStruct SMSystem.SMGraphProperty
// 0x0000 (0x0108 - 0x0108)
struct FSMGraphProperty final : public FSMGraphProperty_Base
{
};
DUMPER7_ASSERTS_FSMGraphProperty;

// ScriptStruct SMSystem.SMDebugStateMachine
// 0x0001 (0x0001 - 0x0000)
struct FSMDebugStateMachine final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FSMDebugStateMachine;

// ScriptStruct SMSystem.SMReferenceContainer
// 0x0018 (0x0018 - 0x0000)
struct FSMReferenceContainer final
{
public:
	struct FGuid                                  PathGuid;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMInstance*                            Reference;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMReferenceContainer;

// ScriptStruct SMSystem.SMGuidMap
// 0x0050 (0x0050 - 0x0000)
struct FSMGuidMap final
{
public:
	TMap<struct FGuid, struct FGuid>              NodeToPathGuids;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMGuidMap;

// ScriptStruct SMSystem.SMNodeDescription
// 0x0028 (0x0028 - 0x0000)
struct FSMNodeDescription final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Category;                                          // 0x0008(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMNodeDescription;

// ScriptStruct SMSystem.SMStateClassRule
// 0x0028 (0x0038 - 0x0010)
struct FSMStateClassRule final : public FSMNodeClassRule
{
public:
	TSoftClassPtr<class UClass>                   StateClass;                                        // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMStateClassRule;

// ScriptStruct SMSystem.SMTransitionClassRule
// 0x0028 (0x0038 - 0x0010)
struct FSMTransitionClassRule final : public FSMNodeClassRule
{
public:
	TSoftClassPtr<class UClass>                   TransitionClass;                                   // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMTransitionClassRule;

// ScriptStruct SMSystem.SMStateMachineClassRule
// 0x0028 (0x0038 - 0x0010)
struct FSMStateMachineClassRule final : public FSMNodeClassRule
{
public:
	TSoftClassPtr<class UClass>                   StateMachineClass;                                 // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMStateMachineClassRule;

// ScriptStruct SMSystem.SMNodeConnectionRule
// 0x00A8 (0x00A8 - 0x0000)
struct FSMNodeConnectionRule final
{
public:
	struct FSMStateClassRule                      FromState;                                         // 0x0000(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSMStateClassRule                      ToState;                                           // 0x0038(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSMStateMachineClassRule               InStateMachine;                                    // 0x0070(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMNodeConnectionRule;

// ScriptStruct SMSystem.SMConnectionValidator
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSMConnectionValidator
{
};
#pragma pack(pop)
DUMPER7_ASSERTS_FSMConnectionValidator;

// ScriptStruct SMSystem.SMTransitionConnectionValidator
// 0x0010 (0x0010 - 0x0000)
struct FSMTransitionConnectionValidator final : public FSMConnectionValidator
{
public:
	TArray<struct FSMNodeConnectionRule>          AllowedConnections;                                // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMTransitionConnectionValidator;

// ScriptStruct SMSystem.SMStateConnectionValidator
// 0x0030 (0x0030 - 0x0000)
struct FSMStateConnectionValidator final : public FSMConnectionValidator
{
public:
	TArray<struct FSMStateClassRule>              AllowedInboundStates;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSMStateClassRule>              AllowedOutboundStates;                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSMStateMachineClassRule>       AllowedInStateMachines;                            // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMStateConnectionValidator;

// ScriptStruct SMSystem.SMStateMachineNodePlacementValidator
// 0x0050 (0x0050 - 0x0000)
struct FSMStateMachineNodePlacementValidator final : public FSMConnectionValidator
{
public:
	TArray<struct FSMStateClassRule>              AllowedStates;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSMTransitionClassRule>         AllowedTransitions;                                // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAllowReferences;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowParents;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSubStateMachines;                            // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DefaultSubStateMachineClass;                       // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMStateMachineNodePlacementValidator;

// ScriptStruct SMSystem.SMNodeWidgetInfo
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSMNodeWidgetInfo
{
};
#pragma pack(pop)
DUMPER7_ASSERTS_FSMNodeWidgetInfo;

// ScriptStruct SMSystem.SMTextDisplayWidgetInfo
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSMTextDisplayWidgetInfo : public FSMNodeWidgetInfo
{
};
#pragma pack(pop)
DUMPER7_ASSERTS_FSMTextDisplayWidgetInfo;

// ScriptStruct SMSystem.SMState
// 0x0000 (0x0188 - 0x0188)
struct FSMState final : public FSMState_Base
{
};
DUMPER7_ASSERTS_FSMState;

// ScriptStruct SMSystem.SMStateMachine
// 0x0140 (0x02C8 - 0x0188)
struct FSMStateMachine final : public FSMState_Base
{
public:
	uint8                                         bHasAdditionalLogic : 1;                           // 0x0188(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReuseCurrentState : 1;                            // 0x0188(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyReuseIfNotEndState : 1;                       // 0x0188(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowIndependentTick : 1;                         // 0x0188(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCallReferenceTickOnManualUpdate : 1;              // 0x0188(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWaitForEndState : 1;                              // 0x0188(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISMStateMachineNetworkedInterface> NetworkedInterface;                    // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<FSMState_Base*> States;
	TArray<FSMTransition*> Transitions;

	/** The default root entry point. */
	TArray<FSMState_Base*> EntryStates;

	/** Entry states that are temporary and used for loading purposes. */
	TArray<FSMState_Base*> TemporaryEntryStates;

	/** In most cases this should be of size 0 or 1. Greater than 1 implies the sm is configured for multiple active states.
	 *  Array container needed for exact order when adding parallel states. O(n) operations should be acceptable for average number
	 *  of active states and only on state changes. */
	TArray<FSMState_Base*> ActiveStates;

	/** All contained states, mapped by their name. */
	TMap<FString, FSMState_Base*> StateNameMap;

	/** Keeps track of states currently processing for the given FSM scope.
		Helps with possible infinite recursion when using multiple states that can re-enter each other. */
	TMap<FGuid, TSet<FSMState_Base*>> ProcessingStates;
	TSubclassOf<class UObject>                    ReferencedStateMachineClass;                       // 0x0290(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReferencedTemplateName;                            // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DynamicStateMachineReferenceVariable;              // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USMInstance*                            ReferencedStateMachine;                            // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USMInstance*                            IsReferencedByInstance;                            // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	/** The state machine referencing this state machine, if any. */
	FSMStateMachine* IsReferencedByStateMachine;

	/** Current time spent waiting for an update. */
	float TimeSpentWaitingForUpdate;

	/** Is currently waiting for an update. */
	uint8 bWaitingForTransitionUpdate : 1;

	/** Can this instance even evaluate transitions. */
	uint8 bCanEvaluateTransitions : 1;

	/** Once evaluated can this instance take the transition. */
	uint8 bCanTakeTransitions : 1;
};
DUMPER7_ASSERTS_FSMStateMachine;

// ScriptStruct SMSystem.SMInitializeTransaction
// 0x000D (0x0010 - 0x0003)
struct FSMInitializeTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Context;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_FSMInitializeTransaction;

// ScriptStruct SMSystem.SMTransitionTransaction
// 0x0035 (0x0038 - 0x0003)
struct FSMTransitionTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BaseGuid;                                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          AdditionalGuids;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveTime;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	/** Set from server during processing. */
	uint8 bIsServer : 1;
};
DUMPER7_ASSERTS_FSMTransitionTransaction;

// ScriptStruct SMSystem.SMFullSyncTransaction
// 0x001D (0x0020 - 0x0003)
struct FSMFullSyncTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMFullSyncStateTransaction>    ActiveStates;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bHasStarted : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFromUserLoad : 1;                                 // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceFullRefresh : 1;                             // 0x0018(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_FSMFullSyncTransaction;

// ScriptStruct SMSystem.SMTransition
// 0x0058 (0x0190 - 0x0138)
struct FSMTransition final : public FSMNode_Base
{
public:
	int32                                         Priority;                                          // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanEnterTransition : 1;                           // 0x013C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEnterTransitionFromEvent : 1;                  // 0x013C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEvaluating : 1;                                 // 0x013C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvaluate : 1;                                  // 0x013C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvaluateFromEvent : 1;                         // 0x013C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRunParallel : 1;                                  // 0x013C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalIfNextStateActive : 1;                        // 0x013C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvalWithStartState : 1;                        // 0x013C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysFalse : 1;                                  // 0x013D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFromAnyState : 1;                                 // 0x013D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFromLinkState : 1;                                // 0x013D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  FromGuid;                                          // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ToGuid;                                            // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESMConditionalEvaluationType                  ConditionalEvaluationType;                         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	/** Last recorded timestamp from a network transaction. */
	FDateTime LastNetworkTimestamp;

	/** Original state transitioning from. */
	FSMState_Base* SourceState;

	/** Destination state transitioning to. */
	FSMState_Base* DestinationState;
	FSMState_Base* FromState;
	FSMState_Base* ToState;
};
DUMPER7_ASSERTS_FSMTransition;

}

