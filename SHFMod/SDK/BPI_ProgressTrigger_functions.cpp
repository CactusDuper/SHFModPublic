#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ProgressTrigger

#include "Basic.hpp"

#include "BPI_ProgressTrigger_classes.hpp"
#include "BPI_ProgressTrigger_parameters.hpp"


namespace SDK
{

// Function BPI_ProgressTrigger.BPI_ProgressTrigger_C.BPI_ProgressTrigger_MatchesTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              TagTwo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_ProgressTrigger_C::BPI_ProgressTrigger_MatchesTag(const struct FGameplayTag& TagTwo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ProgressTrigger_C", "BPI_ProgressTrigger_MatchesTag");

	Params::BPI_ProgressTrigger_C_BPI_ProgressTrigger_MatchesTag Parms{};

	Parms.TagTwo = std::move(TagTwo);

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_ProgressTrigger.BPI_ProgressTrigger_C.BPI_ProgressTigger_GetIndicatorLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProgressTrigger_C::BPI_ProgressTigger_GetIndicatorLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ProgressTrigger_C", "BPI_ProgressTigger_GetIndicatorLocation");

	Params::BPI_ProgressTrigger_C_BPI_ProgressTigger_GetIndicatorLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

