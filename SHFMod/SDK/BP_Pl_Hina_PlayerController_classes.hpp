#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pl_Hina_PlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameNoce_structs.hpp"
#include "GameNoce_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Pl_Hina_PlayerController.BP_Pl_Hina_PlayerController_C
// 0x00B0 (0x0AB8 - 0x0A08)
class ABP_Pl_Hina_PlayerController_C final : public ANocePlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNeoAudioSoundComponent*                NeoAudioSound;                                     // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USMStateMachineComponent*               GameFlowStatemachine;                              // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_LineOfSight_C*                      BP_LineOfSight;                                    // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_NocePostProcessManager_C*           BP_NocePostProcessManager;                         // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Class_BP_Pl_Hina;                                  // 0x0A30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Class_BP_Pl_Hina_Claw;                             // 0x0A58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Class_BP_Pl_Hina_Claw_DevLevel;                    // 0x0A80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           CheckPlayerReady_TimerHandle;                      // 0x0AA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ShiromukuReviveIndex;                              // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalNearClipPlane;                             // 0x0AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BPI_EnableLineOfSight(bool InValue);
	void BPI_EndCounterableHint();
	void BPI_HandleBreakDown();
	void BPI_HandleEndHPWarnings(bool InSourceFormEvent);
	void BPI_HandleHellModeSpiritAttack();
	void BPI_HandleJustDodge();
	void BPI_HandleSanityFocus(bool InValue);
	void BPI_HandleSanityWeak(bool InValue);
	void BPI_HandleShiromukuRevive(int32 InValue);
	void BPI_HandleStartHPWarnings(double InPlayTime, bool InSourceFormEvent);
	void BPI_PlayControllerVibrationByData(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FNeoAudioPostEventParam& HapticEffect);
	void BPI_PlayControllerVibrationByType(ENoceControllerVibrationType VibrationType);
	void BPI_StartCounterableHint(double InAlpha, double InBlend, double InJitterScale, double InJitterSpeed, double InOverlayColor_ColorShiftBlend, double InOverlayColorRatio, const struct FLinearColor& InOverlayColor);
	void BPI_SwitchControlledPlayer(class ACharacter* InPlayerCharacter, bool InResetWeapon, class FName InWeaponName, bool InFullReocver, bool InDestroyOldCharacter);
	void BPI_UseHIna(bool InResetWeapon, bool InFullRecover);
	void BPI_UseHinaClaw(bool InResetWeapon, bool InFullRecover);
	void BPI_UseHinaClawDevLevel(bool InResetWeapon, bool InFullRecover);
	void CheckPlayerReady();
	void DestroyLineOfSight();
	void DestroyNocePostProcessManager();
	void ExecuteUbergraph_BP_Pl_Hina_PlayerController(int32 EntryPoint);
	void HandleOnNotebookWidgetOpen(bool InOpen);
	void OnGameInitialized();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceivePossess(class APawn* PossessedPawn);
	void SpawnLineOfSight();
	void SpawnNocePostProcessManager(class ABP_NocePostProcessManager_C** OutPostProcessManager);
	void Switch_Controled_Player(class ACharacter* InPlayerCharacter, bool InResetWeapon, class FName InWeaponName, bool InFullReocver, bool InDestroyOldCharacter);
	void UsePlayerBase(class UClass* InPlayerClass, bool InResetWeapon, class FName InWeaponName, bool InFullReocver, bool InDestoryOldCharacter);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_Pl_Hina_PlayerController_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_Pl_Hina_PlayerController_C")
	}
	static class ABP_Pl_Hina_PlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Pl_Hina_PlayerController_C>();
	}
};
DUMPER7_ASSERTS_ABP_Pl_Hina_PlayerController_C;

}

