#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerTrigger_Base

#include "Basic.hpp"

#include "BP_PlayerTrigger_Base_classes.hpp"
#include "BP_PlayerTrigger_Base_parameters.hpp"


namespace SDK
{

// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.UnbindOverlapEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::UnbindOverlapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "UnbindOverlapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.StartTriggerTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::StartTriggerTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "StartTriggerTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.RequestCreateRecordDataBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::RequestCreateRecordDataBP(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "RequestCreateRecordDataBP");

	Params::BP_PlayerTrigger_Base_C_RequestCreateRecordDataBP Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "ReceiveEndPlay");

	Params::BP_PlayerTrigger_Base_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnUntrigger
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::OnUntrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnUntrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnTriggerTimerUp
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::OnTriggerTimerUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnTriggerTimerUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnTrigger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::OnTrigger(class AActor* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnTrigger");

	Params::BP_PlayerTrigger_Base_C_OnTrigger Parms{};

	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnPlayerSwitchPawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::OnPlayerSwitchPawn(class AActor* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnPlayerSwitchPawn");

	Params::BP_PlayerTrigger_Base_C_OnPlayerSwitchPawn Parms{};

	Parms.NewPawn = NewPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnConditionChanged_BP
// (Event, Protected, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::OnConditionChanged_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnConditionChanged_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnBoxEndOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::OnBoxEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnBoxEndOverlap");

	Params::BP_PlayerTrigger_Base_C_OnBoxEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.OnBoxBeginOverlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PlayerTrigger_Base_C::OnBoxBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "OnBoxBeginOverlap");

	Params::BP_PlayerTrigger_Base_C_OnBoxBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.ManualCheckOverlapping
// (Event, Protected, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::ManualCheckOverlapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "ManualCheckOverlapping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.IsPlayerOverlapping
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_PlayerTrigger_Base_C::IsPlayerOverlapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "IsPlayerOverlapping");

	Params::BP_PlayerTrigger_Base_C_IsPlayerOverlapping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.InternalEndOverlap
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::InternalEndOverlap(class AActor* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "InternalEndOverlap");

	Params::BP_PlayerTrigger_Base_C_InternalEndOverlap Parms{};

	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.InternalBeginOverlap
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::InternalBeginOverlap(class AActor* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "InternalBeginOverlap");

	Params::BP_PlayerTrigger_Base_C_InternalBeginOverlap Parms{};

	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.ExecuteUbergraph_BP_PlayerTrigger_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::ExecuteUbergraph_BP_PlayerTrigger_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "ExecuteUbergraph_BP_PlayerTrigger_Base");

	Params::BP_PlayerTrigger_Base_C_ExecuteUbergraph_BP_PlayerTrigger_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.EnableTrigger
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::EnableTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "EnableTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.DoOnEndOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::DoOnEndOverlap(class AActor* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "DoOnEndOverlap");

	Params::BP_PlayerTrigger_Base_C_DoOnEndOverlap Parms{};

	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.DoOnBeginOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::DoOnBeginOverlap(class AActor* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "DoOnBeginOverlap");

	Params::BP_PlayerTrigger_Base_C_DoOnBeginOverlap Parms{};

	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.DisableTrigger
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::DisableTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "DisableTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.CheckPlayerOverlapping
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           InCheckActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsOverlapping                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerTrigger_Base_C::CheckPlayerOverlapping(class AActor* InCheckActor, bool* IsOverlapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "CheckPlayerOverlapping");

	Params::BP_PlayerTrigger_Base_C_CheckPlayerOverlapping Parms{};

	Parms.InCheckActor = InCheckActor;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOverlapping != nullptr)
		*IsOverlapping = Parms.IsOverlapping;
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.Check Condition Change
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::Check_Condition_Change()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "Check Condition Change");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.BP_OnRecordLoaded
// (Event, Public, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::BP_OnRecordLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "BP_OnRecordLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.BindOverlapEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::BindOverlapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "BindOverlapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerTrigger_Base.BP_PlayerTrigger_Base_C.AssignTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerTrigger_Base_C::AssignTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerTrigger_Base_C", "AssignTrigger");

	UObject::ProcessEvent(Func, nullptr);
}

}

