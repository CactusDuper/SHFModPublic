#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NBMaterialLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class NBMaterialLibrary.PreviewSceneManager
// 0x00A0 (0x0330 - 0x0290)
class APreviewSceneManager final : public AActor
{
public:
	TSoftObjectPtr<class ASkyLight>               m_SkyLight;                                        // 0x0290(0x0028)(Edit, BlueprintVisible, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class AStaticMeshActor>        M_SkyBox;                                          // 0x02B8(0x0028)(Edit, BlueprintVisible, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class ADirectionalLight>       m_DirLight;                                        // 0x02E0(0x0028)(Edit, BlueprintVisible, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              m_PreviewSceneDatas;                               // 0x0308(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BroadcastStreamingLevelComplete();
	void InitWhenChangeScene();
	class ULevelStreamingDynamic* LoadLevelInstance(TSoftObjectPtr<class UWorld> Level, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const class FString& OptionalLevelNameOverride, TSubclassOf<class ULevelStreamingDynamic> OptionalLevelStreamingClass, bool bLoadAsTempPackage);
	void UpdatePreviewScene(const struct FPreviewSceneData& InData);

	bool IsPackage() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PreviewSceneManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PreviewSceneManager")
	}
	static class APreviewSceneManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<APreviewSceneManager>();
	}
};
DUMPER7_ASSERTS_APreviewSceneManager;

}

